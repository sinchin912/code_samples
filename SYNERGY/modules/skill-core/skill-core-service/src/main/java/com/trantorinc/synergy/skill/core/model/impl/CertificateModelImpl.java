/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.skill.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.skill.core.model.Certificate;
import com.trantorinc.synergy.skill.core.model.CertificateModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Certificate service. Represents a row in the &quot;SKILL_Certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CertificateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CertificateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CertificateImpl
 * @generated
 */
public class CertificateModelImpl
	extends BaseModelImpl<Certificate> implements CertificateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a certificate model instance should use the <code>Certificate</code> interface instead.
	 */
	public static final String TABLE_NAME = "SKILL_Certificate";

	public static final Object[][] TABLE_COLUMNS = {
		{"certificateId", Types.BIGINT}, {"ecode", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"category", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"fileId", Types.VARCHAR},
		{"filename", Types.VARCHAR}, {"createdDate", Types.TIMESTAMP},
		{"expiryDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiryDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SKILL_Certificate (certificateId LONG not null primary key,ecode VARCHAR(75) null,name VARCHAR(75) null,category VARCHAR(75) null,description VARCHAR(1000) null,fileId VARCHAR(75) null,filename VARCHAR(75) null,createdDate DATE null,expiryDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table SKILL_Certificate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY certificate.certificateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SKILL_Certificate.certificateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CERTIFICATEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _certificateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCertificateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _certificateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Certificate.class;
	}

	@Override
	public String getModelClassName() {
		return Certificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Certificate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Certificate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Certificate, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Certificate)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Certificate, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Certificate, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Certificate)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Certificate, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Certificate, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Certificate, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Certificate, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Certificate, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Certificate, Object>>();
		Map<String, BiConsumer<Certificate, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Certificate, ?>>();

		attributeGetterFunctions.put(
			"certificateId", Certificate::getCertificateId);
		attributeSetterBiConsumers.put(
			"certificateId",
			(BiConsumer<Certificate, Long>)Certificate::setCertificateId);
		attributeGetterFunctions.put("ecode", Certificate::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Certificate, String>)Certificate::setEcode);
		attributeGetterFunctions.put("name", Certificate::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Certificate, String>)Certificate::setName);
		attributeGetterFunctions.put("category", Certificate::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<Certificate, String>)Certificate::setCategory);
		attributeGetterFunctions.put(
			"description", Certificate::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Certificate, String>)Certificate::setDescription);
		attributeGetterFunctions.put("fileId", Certificate::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<Certificate, String>)Certificate::setFileId);
		attributeGetterFunctions.put("filename", Certificate::getFilename);
		attributeSetterBiConsumers.put(
			"filename",
			(BiConsumer<Certificate, String>)Certificate::setFilename);
		attributeGetterFunctions.put(
			"createdDate", Certificate::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<Certificate, Date>)Certificate::setCreatedDate);
		attributeGetterFunctions.put("expiryDate", Certificate::getExpiryDate);
		attributeSetterBiConsumers.put(
			"expiryDate",
			(BiConsumer<Certificate, Date>)Certificate::setExpiryDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificateId = certificateId;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public String getFileId() {
		if (_fileId == null) {
			return "";
		}
		else {
			return _fileId;
		}
	}

	@Override
	public void setFileId(String fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	@Override
	public String getFilename() {
		if (_filename == null) {
			return "";
		}
		else {
			return _filename;
		}
	}

	@Override
	public void setFilename(String filename) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filename = filename;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiryDate = expiryDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Certificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Certificate toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Certificate>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CertificateImpl certificateImpl = new CertificateImpl();

		certificateImpl.setCertificateId(getCertificateId());
		certificateImpl.setEcode(getEcode());
		certificateImpl.setName(getName());
		certificateImpl.setCategory(getCategory());
		certificateImpl.setDescription(getDescription());
		certificateImpl.setFileId(getFileId());
		certificateImpl.setFilename(getFilename());
		certificateImpl.setCreatedDate(getCreatedDate());
		certificateImpl.setExpiryDate(getExpiryDate());

		certificateImpl.resetOriginalValues();

		return certificateImpl;
	}

	@Override
	public Certificate cloneWithOriginalValues() {
		CertificateImpl certificateImpl = new CertificateImpl();

		certificateImpl.setCertificateId(
			this.<Long>getColumnOriginalValue("certificateId"));
		certificateImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		certificateImpl.setName(this.<String>getColumnOriginalValue("name"));
		certificateImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		certificateImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		certificateImpl.setFileId(
			this.<String>getColumnOriginalValue("fileId"));
		certificateImpl.setFilename(
			this.<String>getColumnOriginalValue("filename"));
		certificateImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		certificateImpl.setExpiryDate(
			this.<Date>getColumnOriginalValue("expiryDate"));

		return certificateImpl;
	}

	@Override
	public int compareTo(Certificate certificate) {
		long primaryKey = certificate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Certificate)) {
			return false;
		}

		Certificate certificate = (Certificate)object;

		long primaryKey = certificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Certificate> toCacheModel() {
		CertificateCacheModel certificateCacheModel =
			new CertificateCacheModel();

		certificateCacheModel.certificateId = getCertificateId();

		certificateCacheModel.ecode = getEcode();

		String ecode = certificateCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			certificateCacheModel.ecode = null;
		}

		certificateCacheModel.name = getName();

		String name = certificateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			certificateCacheModel.name = null;
		}

		certificateCacheModel.category = getCategory();

		String category = certificateCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			certificateCacheModel.category = null;
		}

		certificateCacheModel.description = getDescription();

		String description = certificateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			certificateCacheModel.description = null;
		}

		certificateCacheModel.fileId = getFileId();

		String fileId = certificateCacheModel.fileId;

		if ((fileId != null) && (fileId.length() == 0)) {
			certificateCacheModel.fileId = null;
		}

		certificateCacheModel.filename = getFilename();

		String filename = certificateCacheModel.filename;

		if ((filename != null) && (filename.length() == 0)) {
			certificateCacheModel.filename = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			certificateCacheModel.createdDate = createdDate.getTime();
		}
		else {
			certificateCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			certificateCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			certificateCacheModel.expiryDate = Long.MIN_VALUE;
		}

		return certificateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Certificate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Certificate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Certificate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Certificate)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Certificate>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Certificate.class, ModelWrapper.class);

	}

	private long _certificateId;
	private String _ecode;
	private String _name;
	private String _category;
	private String _description;
	private String _fileId;
	private String _filename;
	private Date _createdDate;
	private Date _expiryDate;

	public <T> T getColumnValue(String columnName) {
		Function<Certificate, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Certificate)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("certificateId", _certificateId);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("filename", _filename);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("expiryDate", _expiryDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("certificateId", 1L);

		columnBitmasks.put("ecode", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("category", 8L);

		columnBitmasks.put("description", 16L);

		columnBitmasks.put("fileId", 32L);

		columnBitmasks.put("filename", 64L);

		columnBitmasks.put("createdDate", 128L);

		columnBitmasks.put("expiryDate", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Certificate _escapedModel;

}