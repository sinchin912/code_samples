/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.skill.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.skill.core.model.Skill;
import com.trantorinc.synergy.skill.core.model.SkillModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Skill service. Represents a row in the &quot;SKILL_Skill&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SkillModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SkillImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SkillImpl
 * @generated
 */
public class SkillModelImpl extends BaseModelImpl<Skill> implements SkillModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a skill model instance should use the <code>Skill</code> interface instead.
	 */
	public static final String TABLE_NAME = "SKILL_Skill";

	public static final Object[][] TABLE_COLUMNS = {
		{"skillId", Types.BIGINT}, {"ecode", Types.VARCHAR},
		{"project", Types.VARCHAR}, {"coreSkill", Types.VARCHAR},
		{"subSkill", Types.VARCHAR}, {"tool", Types.VARCHAR},
		{"validity", Types.VARCHAR}, {"version", Types.VARCHAR},
		{"status", Types.INTEGER}, {"reviewer", Types.VARCHAR},
		{"manager", Types.VARCHAR}, {"primarySkill", Types.BOOLEAN},
		{"proficiencyLevel", Types.INTEGER}, {"requiredLevel", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("skillId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("project", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("coreSkill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subSkill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tool", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reviewer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primarySkill", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("proficiencyLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("requiredLevel", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SKILL_Skill (skillId LONG not null primary key,ecode VARCHAR(75) null,project VARCHAR(75) null,coreSkill VARCHAR(75) null,subSkill VARCHAR(75) null,tool VARCHAR(1000) null,validity VARCHAR(75) null,version VARCHAR(1000) null,status INTEGER,reviewer VARCHAR(75) null,manager VARCHAR(75) null,primarySkill BOOLEAN,proficiencyLevel INTEGER,requiredLevel INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table SKILL_Skill";

	public static final String ORDER_BY_JPQL = " ORDER BY skill.skillId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SKILL_Skill.skillId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SKILLID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SkillModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _skillId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSkillId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _skillId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Skill.class;
	}

	@Override
	public String getModelClassName() {
		return Skill.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Skill, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Skill, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Skill, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Skill)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Skill, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Skill, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Skill)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Skill, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Skill, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Skill, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Skill, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Skill, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Skill, Object>>();
		Map<String, BiConsumer<Skill, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Skill, ?>>();

		attributeGetterFunctions.put("skillId", Skill::getSkillId);
		attributeSetterBiConsumers.put(
			"skillId", (BiConsumer<Skill, Long>)Skill::setSkillId);
		attributeGetterFunctions.put("ecode", Skill::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Skill, String>)Skill::setEcode);
		attributeGetterFunctions.put("project", Skill::getProject);
		attributeSetterBiConsumers.put(
			"project", (BiConsumer<Skill, String>)Skill::setProject);
		attributeGetterFunctions.put("coreSkill", Skill::getCoreSkill);
		attributeSetterBiConsumers.put(
			"coreSkill", (BiConsumer<Skill, String>)Skill::setCoreSkill);
		attributeGetterFunctions.put("subSkill", Skill::getSubSkill);
		attributeSetterBiConsumers.put(
			"subSkill", (BiConsumer<Skill, String>)Skill::setSubSkill);
		attributeGetterFunctions.put("tool", Skill::getTool);
		attributeSetterBiConsumers.put(
			"tool", (BiConsumer<Skill, String>)Skill::setTool);
		attributeGetterFunctions.put("validity", Skill::getValidity);
		attributeSetterBiConsumers.put(
			"validity", (BiConsumer<Skill, String>)Skill::setValidity);
		attributeGetterFunctions.put("version", Skill::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<Skill, String>)Skill::setVersion);
		attributeGetterFunctions.put("status", Skill::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Skill, Integer>)Skill::setStatus);
		attributeGetterFunctions.put("reviewer", Skill::getReviewer);
		attributeSetterBiConsumers.put(
			"reviewer", (BiConsumer<Skill, String>)Skill::setReviewer);
		attributeGetterFunctions.put("manager", Skill::getManager);
		attributeSetterBiConsumers.put(
			"manager", (BiConsumer<Skill, String>)Skill::setManager);
		attributeGetterFunctions.put("primarySkill", Skill::getPrimarySkill);
		attributeSetterBiConsumers.put(
			"primarySkill", (BiConsumer<Skill, Boolean>)Skill::setPrimarySkill);
		attributeGetterFunctions.put(
			"proficiencyLevel", Skill::getProficiencyLevel);
		attributeSetterBiConsumers.put(
			"proficiencyLevel",
			(BiConsumer<Skill, Integer>)Skill::setProficiencyLevel);
		attributeGetterFunctions.put("requiredLevel", Skill::getRequiredLevel);
		attributeSetterBiConsumers.put(
			"requiredLevel",
			(BiConsumer<Skill, Integer>)Skill::setRequiredLevel);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSkillId() {
		return _skillId;
	}

	@Override
	public void setSkillId(long skillId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skillId = skillId;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getProject() {
		if (_project == null) {
			return "";
		}
		else {
			return _project;
		}
	}

	@Override
	public void setProject(String project) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_project = project;
	}

	@Override
	public String getCoreSkill() {
		if (_coreSkill == null) {
			return "";
		}
		else {
			return _coreSkill;
		}
	}

	@Override
	public void setCoreSkill(String coreSkill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coreSkill = coreSkill;
	}

	@Override
	public String getSubSkill() {
		if (_subSkill == null) {
			return "";
		}
		else {
			return _subSkill;
		}
	}

	@Override
	public void setSubSkill(String subSkill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subSkill = subSkill;
	}

	@Override
	public String getTool() {
		if (_tool == null) {
			return "";
		}
		else {
			return _tool;
		}
	}

	@Override
	public void setTool(String tool) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tool = tool;
	}

	@Override
	public String getValidity() {
		if (_validity == null) {
			return "";
		}
		else {
			return _validity;
		}
	}

	@Override
	public void setValidity(String validity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validity = validity;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getReviewer() {
		if (_reviewer == null) {
			return "";
		}
		else {
			return _reviewer;
		}
	}

	@Override
	public void setReviewer(String reviewer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewer = reviewer;
	}

	@Override
	public String getManager() {
		if (_manager == null) {
			return "";
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manager = manager;
	}

	@Override
	public boolean getPrimarySkill() {
		return _primarySkill;
	}

	@Override
	public boolean isPrimarySkill() {
		return _primarySkill;
	}

	@Override
	public void setPrimarySkill(boolean primarySkill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primarySkill = primarySkill;
	}

	@Override
	public int getProficiencyLevel() {
		return _proficiencyLevel;
	}

	@Override
	public void setProficiencyLevel(int proficiencyLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proficiencyLevel = proficiencyLevel;
	}

	@Override
	public int getRequiredLevel() {
		return _requiredLevel;
	}

	@Override
	public void setRequiredLevel(int requiredLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requiredLevel = requiredLevel;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Skill.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Skill toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Skill>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SkillImpl skillImpl = new SkillImpl();

		skillImpl.setSkillId(getSkillId());
		skillImpl.setEcode(getEcode());
		skillImpl.setProject(getProject());
		skillImpl.setCoreSkill(getCoreSkill());
		skillImpl.setSubSkill(getSubSkill());
		skillImpl.setTool(getTool());
		skillImpl.setValidity(getValidity());
		skillImpl.setVersion(getVersion());
		skillImpl.setStatus(getStatus());
		skillImpl.setReviewer(getReviewer());
		skillImpl.setManager(getManager());
		skillImpl.setPrimarySkill(isPrimarySkill());
		skillImpl.setProficiencyLevel(getProficiencyLevel());
		skillImpl.setRequiredLevel(getRequiredLevel());

		skillImpl.resetOriginalValues();

		return skillImpl;
	}

	@Override
	public Skill cloneWithOriginalValues() {
		SkillImpl skillImpl = new SkillImpl();

		skillImpl.setSkillId(this.<Long>getColumnOriginalValue("skillId"));
		skillImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		skillImpl.setProject(this.<String>getColumnOriginalValue("project"));
		skillImpl.setCoreSkill(
			this.<String>getColumnOriginalValue("coreSkill"));
		skillImpl.setSubSkill(this.<String>getColumnOriginalValue("subSkill"));
		skillImpl.setTool(this.<String>getColumnOriginalValue("tool"));
		skillImpl.setValidity(this.<String>getColumnOriginalValue("validity"));
		skillImpl.setVersion(this.<String>getColumnOriginalValue("version"));
		skillImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		skillImpl.setReviewer(this.<String>getColumnOriginalValue("reviewer"));
		skillImpl.setManager(this.<String>getColumnOriginalValue("manager"));
		skillImpl.setPrimarySkill(
			this.<Boolean>getColumnOriginalValue("primarySkill"));
		skillImpl.setProficiencyLevel(
			this.<Integer>getColumnOriginalValue("proficiencyLevel"));
		skillImpl.setRequiredLevel(
			this.<Integer>getColumnOriginalValue("requiredLevel"));

		return skillImpl;
	}

	@Override
	public int compareTo(Skill skill) {
		int value = 0;

		if (getSkillId() < skill.getSkillId()) {
			value = -1;
		}
		else if (getSkillId() > skill.getSkillId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Skill)) {
			return false;
		}

		Skill skill = (Skill)object;

		long primaryKey = skill.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Skill> toCacheModel() {
		SkillCacheModel skillCacheModel = new SkillCacheModel();

		skillCacheModel.skillId = getSkillId();

		skillCacheModel.ecode = getEcode();

		String ecode = skillCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			skillCacheModel.ecode = null;
		}

		skillCacheModel.project = getProject();

		String project = skillCacheModel.project;

		if ((project != null) && (project.length() == 0)) {
			skillCacheModel.project = null;
		}

		skillCacheModel.coreSkill = getCoreSkill();

		String coreSkill = skillCacheModel.coreSkill;

		if ((coreSkill != null) && (coreSkill.length() == 0)) {
			skillCacheModel.coreSkill = null;
		}

		skillCacheModel.subSkill = getSubSkill();

		String subSkill = skillCacheModel.subSkill;

		if ((subSkill != null) && (subSkill.length() == 0)) {
			skillCacheModel.subSkill = null;
		}

		skillCacheModel.tool = getTool();

		String tool = skillCacheModel.tool;

		if ((tool != null) && (tool.length() == 0)) {
			skillCacheModel.tool = null;
		}

		skillCacheModel.validity = getValidity();

		String validity = skillCacheModel.validity;

		if ((validity != null) && (validity.length() == 0)) {
			skillCacheModel.validity = null;
		}

		skillCacheModel.version = getVersion();

		String version = skillCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			skillCacheModel.version = null;
		}

		skillCacheModel.status = getStatus();

		skillCacheModel.reviewer = getReviewer();

		String reviewer = skillCacheModel.reviewer;

		if ((reviewer != null) && (reviewer.length() == 0)) {
			skillCacheModel.reviewer = null;
		}

		skillCacheModel.manager = getManager();

		String manager = skillCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			skillCacheModel.manager = null;
		}

		skillCacheModel.primarySkill = isPrimarySkill();

		skillCacheModel.proficiencyLevel = getProficiencyLevel();

		skillCacheModel.requiredLevel = getRequiredLevel();

		return skillCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Skill, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Skill, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Skill, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Skill)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Skill>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Skill.class, ModelWrapper.class);

	}

	private long _skillId;
	private String _ecode;
	private String _project;
	private String _coreSkill;
	private String _subSkill;
	private String _tool;
	private String _validity;
	private String _version;
	private int _status;
	private String _reviewer;
	private String _manager;
	private boolean _primarySkill;
	private int _proficiencyLevel;
	private int _requiredLevel;

	public <T> T getColumnValue(String columnName) {
		Function<Skill, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Skill)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("skillId", _skillId);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("project", _project);
		_columnOriginalValues.put("coreSkill", _coreSkill);
		_columnOriginalValues.put("subSkill", _subSkill);
		_columnOriginalValues.put("tool", _tool);
		_columnOriginalValues.put("validity", _validity);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("reviewer", _reviewer);
		_columnOriginalValues.put("manager", _manager);
		_columnOriginalValues.put("primarySkill", _primarySkill);
		_columnOriginalValues.put("proficiencyLevel", _proficiencyLevel);
		_columnOriginalValues.put("requiredLevel", _requiredLevel);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("skillId", 1L);

		columnBitmasks.put("ecode", 2L);

		columnBitmasks.put("project", 4L);

		columnBitmasks.put("coreSkill", 8L);

		columnBitmasks.put("subSkill", 16L);

		columnBitmasks.put("tool", 32L);

		columnBitmasks.put("validity", 64L);

		columnBitmasks.put("version", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("reviewer", 512L);

		columnBitmasks.put("manager", 1024L);

		columnBitmasks.put("primarySkill", 2048L);

		columnBitmasks.put("proficiencyLevel", 4096L);

		columnBitmasks.put("requiredLevel", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Skill _escapedModel;

}