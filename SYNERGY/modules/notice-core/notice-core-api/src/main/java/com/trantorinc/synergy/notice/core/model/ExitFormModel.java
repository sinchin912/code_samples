/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model;

import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ExitForm service. Represents a row in the &quot;NOTICE_ExitForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.trantorinc.synergy.notice.core.model.impl.ExitFormModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.trantorinc.synergy.notice.core.model.impl.ExitFormImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExitForm
 * @generated
 */
@ProviderType
public interface ExitFormModel extends BaseModel<ExitForm> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a exit form model instance should use the {@link ExitForm} interface instead.
	 */

	/**
	 * Returns the primary key of this exit form.
	 *
	 * @return the primary key of this exit form
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this exit form.
	 *
	 * @param primaryKey the primary key of this exit form
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this exit form.
	 *
	 * @return the ID of this exit form
	 */
	public long getId();

	/**
	 * Sets the ID of this exit form.
	 *
	 * @param id the ID of this exit form
	 */
	public void setId(long id);

	/**
	 * Returns the resignation ID of this exit form.
	 *
	 * @return the resignation ID of this exit form
	 */
	public long getResignationId();

	/**
	 * Sets the resignation ID of this exit form.
	 *
	 * @param resignationId the resignation ID of this exit form
	 */
	public void setResignationId(long resignationId);

	/**
	 * Returns the manager form status of this exit form.
	 *
	 * @return the manager form status of this exit form
	 */
	public boolean getManagerFormStatus();

	/**
	 * Returns <code>true</code> if this exit form is manager form status.
	 *
	 * @return <code>true</code> if this exit form is manager form status; <code>false</code> otherwise
	 */
	public boolean isManagerFormStatus();

	/**
	 * Sets whether this exit form is manager form status.
	 *
	 * @param managerFormStatus the manager form status of this exit form
	 */
	public void setManagerFormStatus(boolean managerFormStatus);

	/**
	 * Returns the hr form status of this exit form.
	 *
	 * @return the hr form status of this exit form
	 */
	public boolean getHrFormStatus();

	/**
	 * Returns <code>true</code> if this exit form is hr form status.
	 *
	 * @return <code>true</code> if this exit form is hr form status; <code>false</code> otherwise
	 */
	public boolean isHrFormStatus();

	/**
	 * Sets whether this exit form is hr form status.
	 *
	 * @param hrFormStatus the hr form status of this exit form
	 */
	public void setHrFormStatus(boolean hrFormStatus);

	/**
	 * Returns the it form status of this exit form.
	 *
	 * @return the it form status of this exit form
	 */
	public boolean getItFormStatus();

	/**
	 * Returns <code>true</code> if this exit form is it form status.
	 *
	 * @return <code>true</code> if this exit form is it form status; <code>false</code> otherwise
	 */
	public boolean isItFormStatus();

	/**
	 * Sets whether this exit form is it form status.
	 *
	 * @param itFormStatus the it form status of this exit form
	 */
	public void setItFormStatus(boolean itFormStatus);

	/**
	 * Returns the admin form status of this exit form.
	 *
	 * @return the admin form status of this exit form
	 */
	public boolean getAdminFormStatus();

	/**
	 * Returns <code>true</code> if this exit form is admin form status.
	 *
	 * @return <code>true</code> if this exit form is admin form status; <code>false</code> otherwise
	 */
	public boolean isAdminFormStatus();

	/**
	 * Sets whether this exit form is admin form status.
	 *
	 * @param adminFormStatus the admin form status of this exit form
	 */
	public void setAdminFormStatus(boolean adminFormStatus);

	/**
	 * Returns the finance form status of this exit form.
	 *
	 * @return the finance form status of this exit form
	 */
	public boolean getFinanceFormStatus();

	/**
	 * Returns <code>true</code> if this exit form is finance form status.
	 *
	 * @return <code>true</code> if this exit form is finance form status; <code>false</code> otherwise
	 */
	public boolean isFinanceFormStatus();

	/**
	 * Sets whether this exit form is finance form status.
	 *
	 * @param financeFormStatus the finance form status of this exit form
	 */
	public void setFinanceFormStatus(boolean financeFormStatus);

	@Override
	public ExitForm cloneWithOriginalValues();

}