/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.QuestionnaireForm;
import com.trantorinc.synergy.notice.core.model.QuestionnaireFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuestionnaireForm service. Represents a row in the &quot;NOTICE_QuestionnaireForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuestionnaireFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuestionnaireFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuestionnaireFormImpl
 * @generated
 */
public class QuestionnaireFormModelImpl
	extends BaseModelImpl<QuestionnaireForm> implements QuestionnaireFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a questionnaire form model instance should use the <code>QuestionnaireForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_QuestionnaireForm";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"resignationId", Types.BIGINT},
		{"workExperience", Types.VARCHAR},
		{"communicationWithEmployees", Types.VARCHAR},
		{"trainingOpportunity", Types.VARCHAR},
		{"dealingWithStaff", Types.VARCHAR},
		{"satisfactionLevel", Types.VARCHAR},
		{"reasonForLeaving", Types.VARCHAR},
		{"reasonForLeavingDescribe", Types.VARCHAR},
		{"reasonForJoining", Types.VARCHAR}, {"workAgain", Types.INTEGER},
		{"notWorkAgain", Types.VARCHAR}, {"recommendTrantor", Types.INTEGER},
		{"notRecommendTrantor", Types.VARCHAR}, {"companyName", Types.VARCHAR},
		{"companyDetails", Types.VARCHAR}, {"designation", Types.VARCHAR},
		{"location ", Types.VARCHAR}, {"salaryHike", Types.VARCHAR},
		{"feedback ", Types.VARCHAR}, {"hrRemark", Types.VARCHAR},
		{"submittedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resignationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workExperience", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("communicationWithEmployees", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingOpportunity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dealingWithStaff", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("satisfactionLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForLeaving", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForLeavingDescribe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForJoining", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workAgain", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("notWorkAgain", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recommendTrantor", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("notRecommendTrantor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salaryHike", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feedback ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submittedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_QuestionnaireForm (id_ LONG not null primary key,resignationId LONG,workExperience VARCHAR(75) null,communicationWithEmployees VARCHAR(75) null,trainingOpportunity VARCHAR(75) null,dealingWithStaff VARCHAR(75) null,satisfactionLevel VARCHAR(75) null,reasonForLeaving VARCHAR(75) null,reasonForLeavingDescribe VARCHAR(300) null,reasonForJoining VARCHAR(300) null,workAgain INTEGER,notWorkAgain VARCHAR(300) null,recommendTrantor INTEGER,notRecommendTrantor VARCHAR(300) null,companyName VARCHAR(75) null,companyDetails VARCHAR(300) null,designation VARCHAR(75) null,location   VARCHAR(75) null,salaryHike VARCHAR(75) null,feedback  VARCHAR(75) null,hrRemark VARCHAR(500) null,submittedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table NOTICE_QuestionnaireForm";

	public static final String ORDER_BY_JPQL =
		" ORDER BY questionnaireForm.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NOTICE_QuestionnaireForm.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuestionnaireFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuestionnaireForm.class;
	}

	@Override
	public String getModelClassName() {
		return QuestionnaireForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuestionnaireForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuestionnaireForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuestionnaireForm, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuestionnaireForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuestionnaireForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuestionnaireForm, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuestionnaireForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuestionnaireForm, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuestionnaireForm, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<QuestionnaireForm, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuestionnaireForm, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuestionnaireForm, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<QuestionnaireForm, Object>>();
		Map<String, BiConsumer<QuestionnaireForm, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<QuestionnaireForm, ?>>();

		attributeGetterFunctions.put("id", QuestionnaireForm::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<QuestionnaireForm, Long>)QuestionnaireForm::setId);
		attributeGetterFunctions.put(
			"resignationId", QuestionnaireForm::getResignationId);
		attributeSetterBiConsumers.put(
			"resignationId",
			(BiConsumer<QuestionnaireForm, Long>)
				QuestionnaireForm::setResignationId);
		attributeGetterFunctions.put(
			"workExperience", QuestionnaireForm::getWorkExperience);
		attributeSetterBiConsumers.put(
			"workExperience",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setWorkExperience);
		attributeGetterFunctions.put(
			"communicationWithEmployees",
			QuestionnaireForm::getCommunicationWithEmployees);
		attributeSetterBiConsumers.put(
			"communicationWithEmployees",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setCommunicationWithEmployees);
		attributeGetterFunctions.put(
			"trainingOpportunity", QuestionnaireForm::getTrainingOpportunity);
		attributeSetterBiConsumers.put(
			"trainingOpportunity",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setTrainingOpportunity);
		attributeGetterFunctions.put(
			"dealingWithStaff", QuestionnaireForm::getDealingWithStaff);
		attributeSetterBiConsumers.put(
			"dealingWithStaff",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setDealingWithStaff);
		attributeGetterFunctions.put(
			"satisfactionLevel", QuestionnaireForm::getSatisfactionLevel);
		attributeSetterBiConsumers.put(
			"satisfactionLevel",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setSatisfactionLevel);
		attributeGetterFunctions.put(
			"reasonForLeaving", QuestionnaireForm::getReasonForLeaving);
		attributeSetterBiConsumers.put(
			"reasonForLeaving",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setReasonForLeaving);
		attributeGetterFunctions.put(
			"reasonForLeavingDescribe",
			QuestionnaireForm::getReasonForLeavingDescribe);
		attributeSetterBiConsumers.put(
			"reasonForLeavingDescribe",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setReasonForLeavingDescribe);
		attributeGetterFunctions.put(
			"reasonForJoining", QuestionnaireForm::getReasonForJoining);
		attributeSetterBiConsumers.put(
			"reasonForJoining",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setReasonForJoining);
		attributeGetterFunctions.put(
			"workAgain", QuestionnaireForm::getWorkAgain);
		attributeSetterBiConsumers.put(
			"workAgain",
			(BiConsumer<QuestionnaireForm, Integer>)
				QuestionnaireForm::setWorkAgain);
		attributeGetterFunctions.put(
			"notWorkAgain", QuestionnaireForm::getNotWorkAgain);
		attributeSetterBiConsumers.put(
			"notWorkAgain",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setNotWorkAgain);
		attributeGetterFunctions.put(
			"recommendTrantor", QuestionnaireForm::getRecommendTrantor);
		attributeSetterBiConsumers.put(
			"recommendTrantor",
			(BiConsumer<QuestionnaireForm, Integer>)
				QuestionnaireForm::setRecommendTrantor);
		attributeGetterFunctions.put(
			"notRecommendTrantor", QuestionnaireForm::getNotRecommendTrantor);
		attributeSetterBiConsumers.put(
			"notRecommendTrantor",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setNotRecommendTrantor);
		attributeGetterFunctions.put(
			"companyName", QuestionnaireForm::getCompanyName);
		attributeSetterBiConsumers.put(
			"companyName",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setCompanyName);
		attributeGetterFunctions.put(
			"companyDetails", QuestionnaireForm::getCompanyDetails);
		attributeSetterBiConsumers.put(
			"companyDetails",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setCompanyDetails);
		attributeGetterFunctions.put(
			"designation", QuestionnaireForm::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setDesignation);
		attributeGetterFunctions.put(
			"location  ", QuestionnaireForm::getLocation);
		attributeSetterBiConsumers.put(
			"location  ",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setLocation);
		attributeGetterFunctions.put(
			"salaryHike", QuestionnaireForm::getSalaryHike);
		attributeSetterBiConsumers.put(
			"salaryHike",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setSalaryHike);
		attributeGetterFunctions.put(
			"feedback ", QuestionnaireForm::getFeedback);
		attributeSetterBiConsumers.put(
			"feedback ",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setFeedback);
		attributeGetterFunctions.put(
			"hrRemark", QuestionnaireForm::getHrRemark);
		attributeSetterBiConsumers.put(
			"hrRemark",
			(BiConsumer<QuestionnaireForm, String>)
				QuestionnaireForm::setHrRemark);
		attributeGetterFunctions.put(
			"submittedDate", QuestionnaireForm::getSubmittedDate);
		attributeSetterBiConsumers.put(
			"submittedDate",
			(BiConsumer<QuestionnaireForm, Date>)
				QuestionnaireForm::setSubmittedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getResignationId() {
		return _resignationId;
	}

	@Override
	public void setResignationId(long resignationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resignationId = resignationId;
	}

	@Override
	public String getWorkExperience() {
		if (_workExperience == null) {
			return "";
		}
		else {
			return _workExperience;
		}
	}

	@Override
	public void setWorkExperience(String workExperience) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workExperience = workExperience;
	}

	@Override
	public String getCommunicationWithEmployees() {
		if (_communicationWithEmployees == null) {
			return "";
		}
		else {
			return _communicationWithEmployees;
		}
	}

	@Override
	public void setCommunicationWithEmployees(
		String communicationWithEmployees) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_communicationWithEmployees = communicationWithEmployees;
	}

	@Override
	public String getTrainingOpportunity() {
		if (_trainingOpportunity == null) {
			return "";
		}
		else {
			return _trainingOpportunity;
		}
	}

	@Override
	public void setTrainingOpportunity(String trainingOpportunity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingOpportunity = trainingOpportunity;
	}

	@Override
	public String getDealingWithStaff() {
		if (_dealingWithStaff == null) {
			return "";
		}
		else {
			return _dealingWithStaff;
		}
	}

	@Override
	public void setDealingWithStaff(String dealingWithStaff) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealingWithStaff = dealingWithStaff;
	}

	@Override
	public String getSatisfactionLevel() {
		if (_satisfactionLevel == null) {
			return "";
		}
		else {
			return _satisfactionLevel;
		}
	}

	@Override
	public void setSatisfactionLevel(String satisfactionLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_satisfactionLevel = satisfactionLevel;
	}

	@Override
	public String getReasonForLeaving() {
		if (_reasonForLeaving == null) {
			return "";
		}
		else {
			return _reasonForLeaving;
		}
	}

	@Override
	public void setReasonForLeaving(String reasonForLeaving) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForLeaving = reasonForLeaving;
	}

	@Override
	public String getReasonForLeavingDescribe() {
		if (_reasonForLeavingDescribe == null) {
			return "";
		}
		else {
			return _reasonForLeavingDescribe;
		}
	}

	@Override
	public void setReasonForLeavingDescribe(String reasonForLeavingDescribe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForLeavingDescribe = reasonForLeavingDescribe;
	}

	@Override
	public String getReasonForJoining() {
		if (_reasonForJoining == null) {
			return "";
		}
		else {
			return _reasonForJoining;
		}
	}

	@Override
	public void setReasonForJoining(String reasonForJoining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForJoining = reasonForJoining;
	}

	@Override
	public int getWorkAgain() {
		return _workAgain;
	}

	@Override
	public void setWorkAgain(int workAgain) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workAgain = workAgain;
	}

	@Override
	public String getNotWorkAgain() {
		if (_notWorkAgain == null) {
			return "";
		}
		else {
			return _notWorkAgain;
		}
	}

	@Override
	public void setNotWorkAgain(String notWorkAgain) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notWorkAgain = notWorkAgain;
	}

	@Override
	public int getRecommendTrantor() {
		return _recommendTrantor;
	}

	@Override
	public void setRecommendTrantor(int recommendTrantor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recommendTrantor = recommendTrantor;
	}

	@Override
	public String getNotRecommendTrantor() {
		if (_notRecommendTrantor == null) {
			return "";
		}
		else {
			return _notRecommendTrantor;
		}
	}

	@Override
	public void setNotRecommendTrantor(String notRecommendTrantor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notRecommendTrantor = notRecommendTrantor;
	}

	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@Override
	public String getCompanyDetails() {
		if (_companyDetails == null) {
			return "";
		}
		else {
			return _companyDetails;
		}
	}

	@Override
	public void setCompanyDetails(String companyDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyDetails = companyDetails;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@Override
	public String getSalaryHike() {
		if (_salaryHike == null) {
			return "";
		}
		else {
			return _salaryHike;
		}
	}

	@Override
	public void setSalaryHike(String salaryHike) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salaryHike = salaryHike;
	}

	@Override
	public String getFeedback() {
		if (_feedback == null) {
			return "";
		}
		else {
			return _feedback;
		}
	}

	@Override
	public void setFeedback(String feedback) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedback = feedback;
	}

	@Override
	public String getHrRemark() {
		if (_hrRemark == null) {
			return "";
		}
		else {
			return _hrRemark;
		}
	}

	@Override
	public void setHrRemark(String hrRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrRemark = hrRemark;
	}

	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_submittedDate = submittedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuestionnaireForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuestionnaireForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuestionnaireForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuestionnaireFormImpl questionnaireFormImpl =
			new QuestionnaireFormImpl();

		questionnaireFormImpl.setId(getId());
		questionnaireFormImpl.setResignationId(getResignationId());
		questionnaireFormImpl.setWorkExperience(getWorkExperience());
		questionnaireFormImpl.setCommunicationWithEmployees(
			getCommunicationWithEmployees());
		questionnaireFormImpl.setTrainingOpportunity(getTrainingOpportunity());
		questionnaireFormImpl.setDealingWithStaff(getDealingWithStaff());
		questionnaireFormImpl.setSatisfactionLevel(getSatisfactionLevel());
		questionnaireFormImpl.setReasonForLeaving(getReasonForLeaving());
		questionnaireFormImpl.setReasonForLeavingDescribe(
			getReasonForLeavingDescribe());
		questionnaireFormImpl.setReasonForJoining(getReasonForJoining());
		questionnaireFormImpl.setWorkAgain(getWorkAgain());
		questionnaireFormImpl.setNotWorkAgain(getNotWorkAgain());
		questionnaireFormImpl.setRecommendTrantor(getRecommendTrantor());
		questionnaireFormImpl.setNotRecommendTrantor(getNotRecommendTrantor());
		questionnaireFormImpl.setCompanyName(getCompanyName());
		questionnaireFormImpl.setCompanyDetails(getCompanyDetails());
		questionnaireFormImpl.setDesignation(getDesignation());
		questionnaireFormImpl.setLocation(getLocation());
		questionnaireFormImpl.setSalaryHike(getSalaryHike());
		questionnaireFormImpl.setFeedback(getFeedback());
		questionnaireFormImpl.setHrRemark(getHrRemark());
		questionnaireFormImpl.setSubmittedDate(getSubmittedDate());

		questionnaireFormImpl.resetOriginalValues();

		return questionnaireFormImpl;
	}

	@Override
	public QuestionnaireForm cloneWithOriginalValues() {
		QuestionnaireFormImpl questionnaireFormImpl =
			new QuestionnaireFormImpl();

		questionnaireFormImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		questionnaireFormImpl.setResignationId(
			this.<Long>getColumnOriginalValue("resignationId"));
		questionnaireFormImpl.setWorkExperience(
			this.<String>getColumnOriginalValue("workExperience"));
		questionnaireFormImpl.setCommunicationWithEmployees(
			this.<String>getColumnOriginalValue("communicationWithEmployees"));
		questionnaireFormImpl.setTrainingOpportunity(
			this.<String>getColumnOriginalValue("trainingOpportunity"));
		questionnaireFormImpl.setDealingWithStaff(
			this.<String>getColumnOriginalValue("dealingWithStaff"));
		questionnaireFormImpl.setSatisfactionLevel(
			this.<String>getColumnOriginalValue("satisfactionLevel"));
		questionnaireFormImpl.setReasonForLeaving(
			this.<String>getColumnOriginalValue("reasonForLeaving"));
		questionnaireFormImpl.setReasonForLeavingDescribe(
			this.<String>getColumnOriginalValue("reasonForLeavingDescribe"));
		questionnaireFormImpl.setReasonForJoining(
			this.<String>getColumnOriginalValue("reasonForJoining"));
		questionnaireFormImpl.setWorkAgain(
			this.<Integer>getColumnOriginalValue("workAgain"));
		questionnaireFormImpl.setNotWorkAgain(
			this.<String>getColumnOriginalValue("notWorkAgain"));
		questionnaireFormImpl.setRecommendTrantor(
			this.<Integer>getColumnOriginalValue("recommendTrantor"));
		questionnaireFormImpl.setNotRecommendTrantor(
			this.<String>getColumnOriginalValue("notRecommendTrantor"));
		questionnaireFormImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		questionnaireFormImpl.setCompanyDetails(
			this.<String>getColumnOriginalValue("companyDetails"));
		questionnaireFormImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		questionnaireFormImpl.setLocation(
			this.<String>getColumnOriginalValue("location  "));
		questionnaireFormImpl.setSalaryHike(
			this.<String>getColumnOriginalValue("salaryHike"));
		questionnaireFormImpl.setFeedback(
			this.<String>getColumnOriginalValue("feedback "));
		questionnaireFormImpl.setHrRemark(
			this.<String>getColumnOriginalValue("hrRemark"));
		questionnaireFormImpl.setSubmittedDate(
			this.<Date>getColumnOriginalValue("submittedDate"));

		return questionnaireFormImpl;
	}

	@Override
	public int compareTo(QuestionnaireForm questionnaireForm) {
		long primaryKey = questionnaireForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuestionnaireForm)) {
			return false;
		}

		QuestionnaireForm questionnaireForm = (QuestionnaireForm)object;

		long primaryKey = questionnaireForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuestionnaireForm> toCacheModel() {
		QuestionnaireFormCacheModel questionnaireFormCacheModel =
			new QuestionnaireFormCacheModel();

		questionnaireFormCacheModel.id = getId();

		questionnaireFormCacheModel.resignationId = getResignationId();

		questionnaireFormCacheModel.workExperience = getWorkExperience();

		String workExperience = questionnaireFormCacheModel.workExperience;

		if ((workExperience != null) && (workExperience.length() == 0)) {
			questionnaireFormCacheModel.workExperience = null;
		}

		questionnaireFormCacheModel.communicationWithEmployees =
			getCommunicationWithEmployees();

		String communicationWithEmployees =
			questionnaireFormCacheModel.communicationWithEmployees;

		if ((communicationWithEmployees != null) &&
			(communicationWithEmployees.length() == 0)) {

			questionnaireFormCacheModel.communicationWithEmployees = null;
		}

		questionnaireFormCacheModel.trainingOpportunity =
			getTrainingOpportunity();

		String trainingOpportunity =
			questionnaireFormCacheModel.trainingOpportunity;

		if ((trainingOpportunity != null) &&
			(trainingOpportunity.length() == 0)) {

			questionnaireFormCacheModel.trainingOpportunity = null;
		}

		questionnaireFormCacheModel.dealingWithStaff = getDealingWithStaff();

		String dealingWithStaff = questionnaireFormCacheModel.dealingWithStaff;

		if ((dealingWithStaff != null) && (dealingWithStaff.length() == 0)) {
			questionnaireFormCacheModel.dealingWithStaff = null;
		}

		questionnaireFormCacheModel.satisfactionLevel = getSatisfactionLevel();

		String satisfactionLevel =
			questionnaireFormCacheModel.satisfactionLevel;

		if ((satisfactionLevel != null) && (satisfactionLevel.length() == 0)) {
			questionnaireFormCacheModel.satisfactionLevel = null;
		}

		questionnaireFormCacheModel.reasonForLeaving = getReasonForLeaving();

		String reasonForLeaving = questionnaireFormCacheModel.reasonForLeaving;

		if ((reasonForLeaving != null) && (reasonForLeaving.length() == 0)) {
			questionnaireFormCacheModel.reasonForLeaving = null;
		}

		questionnaireFormCacheModel.reasonForLeavingDescribe =
			getReasonForLeavingDescribe();

		String reasonForLeavingDescribe =
			questionnaireFormCacheModel.reasonForLeavingDescribe;

		if ((reasonForLeavingDescribe != null) &&
			(reasonForLeavingDescribe.length() == 0)) {

			questionnaireFormCacheModel.reasonForLeavingDescribe = null;
		}

		questionnaireFormCacheModel.reasonForJoining = getReasonForJoining();

		String reasonForJoining = questionnaireFormCacheModel.reasonForJoining;

		if ((reasonForJoining != null) && (reasonForJoining.length() == 0)) {
			questionnaireFormCacheModel.reasonForJoining = null;
		}

		questionnaireFormCacheModel.workAgain = getWorkAgain();

		questionnaireFormCacheModel.notWorkAgain = getNotWorkAgain();

		String notWorkAgain = questionnaireFormCacheModel.notWorkAgain;

		if ((notWorkAgain != null) && (notWorkAgain.length() == 0)) {
			questionnaireFormCacheModel.notWorkAgain = null;
		}

		questionnaireFormCacheModel.recommendTrantor = getRecommendTrantor();

		questionnaireFormCacheModel.notRecommendTrantor =
			getNotRecommendTrantor();

		String notRecommendTrantor =
			questionnaireFormCacheModel.notRecommendTrantor;

		if ((notRecommendTrantor != null) &&
			(notRecommendTrantor.length() == 0)) {

			questionnaireFormCacheModel.notRecommendTrantor = null;
		}

		questionnaireFormCacheModel.companyName = getCompanyName();

		String companyName = questionnaireFormCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			questionnaireFormCacheModel.companyName = null;
		}

		questionnaireFormCacheModel.companyDetails = getCompanyDetails();

		String companyDetails = questionnaireFormCacheModel.companyDetails;

		if ((companyDetails != null) && (companyDetails.length() == 0)) {
			questionnaireFormCacheModel.companyDetails = null;
		}

		questionnaireFormCacheModel.designation = getDesignation();

		String designation = questionnaireFormCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			questionnaireFormCacheModel.designation = null;
		}

		questionnaireFormCacheModel.location = getLocation();

		String location = questionnaireFormCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			questionnaireFormCacheModel.location = null;
		}

		questionnaireFormCacheModel.salaryHike = getSalaryHike();

		String salaryHike = questionnaireFormCacheModel.salaryHike;

		if ((salaryHike != null) && (salaryHike.length() == 0)) {
			questionnaireFormCacheModel.salaryHike = null;
		}

		questionnaireFormCacheModel.feedback = getFeedback();

		String feedback = questionnaireFormCacheModel.feedback;

		if ((feedback != null) && (feedback.length() == 0)) {
			questionnaireFormCacheModel.feedback = null;
		}

		questionnaireFormCacheModel.hrRemark = getHrRemark();

		String hrRemark = questionnaireFormCacheModel.hrRemark;

		if ((hrRemark != null) && (hrRemark.length() == 0)) {
			questionnaireFormCacheModel.hrRemark = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			questionnaireFormCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			questionnaireFormCacheModel.submittedDate = Long.MIN_VALUE;
		}

		return questionnaireFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuestionnaireForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuestionnaireForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuestionnaireForm, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuestionnaireForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuestionnaireForm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					QuestionnaireForm.class, ModelWrapper.class);

	}

	private long _id;
	private long _resignationId;
	private String _workExperience;
	private String _communicationWithEmployees;
	private String _trainingOpportunity;
	private String _dealingWithStaff;
	private String _satisfactionLevel;
	private String _reasonForLeaving;
	private String _reasonForLeavingDescribe;
	private String _reasonForJoining;
	private int _workAgain;
	private String _notWorkAgain;
	private int _recommendTrantor;
	private String _notRecommendTrantor;
	private String _companyName;
	private String _companyDetails;
	private String _designation;
	private String _location;
	private String _salaryHike;
	private String _feedback;
	private String _hrRemark;
	private Date _submittedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuestionnaireForm, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuestionnaireForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("resignationId", _resignationId);
		_columnOriginalValues.put("workExperience", _workExperience);
		_columnOriginalValues.put(
			"communicationWithEmployees", _communicationWithEmployees);
		_columnOriginalValues.put("trainingOpportunity", _trainingOpportunity);
		_columnOriginalValues.put("dealingWithStaff", _dealingWithStaff);
		_columnOriginalValues.put("satisfactionLevel", _satisfactionLevel);
		_columnOriginalValues.put("reasonForLeaving", _reasonForLeaving);
		_columnOriginalValues.put(
			"reasonForLeavingDescribe", _reasonForLeavingDescribe);
		_columnOriginalValues.put("reasonForJoining", _reasonForJoining);
		_columnOriginalValues.put("workAgain", _workAgain);
		_columnOriginalValues.put("notWorkAgain", _notWorkAgain);
		_columnOriginalValues.put("recommendTrantor", _recommendTrantor);
		_columnOriginalValues.put("notRecommendTrantor", _notRecommendTrantor);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("companyDetails", _companyDetails);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("location  ", _location);
		_columnOriginalValues.put("salaryHike", _salaryHike);
		_columnOriginalValues.put("feedback ", _feedback);
		_columnOriginalValues.put("hrRemark", _hrRemark);
		_columnOriginalValues.put("submittedDate", _submittedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("resignationId", 2L);

		columnBitmasks.put("workExperience", 4L);

		columnBitmasks.put("communicationWithEmployees", 8L);

		columnBitmasks.put("trainingOpportunity", 16L);

		columnBitmasks.put("dealingWithStaff", 32L);

		columnBitmasks.put("satisfactionLevel", 64L);

		columnBitmasks.put("reasonForLeaving", 128L);

		columnBitmasks.put("reasonForLeavingDescribe", 256L);

		columnBitmasks.put("reasonForJoining", 512L);

		columnBitmasks.put("workAgain", 1024L);

		columnBitmasks.put("notWorkAgain", 2048L);

		columnBitmasks.put("recommendTrantor", 4096L);

		columnBitmasks.put("notRecommendTrantor", 8192L);

		columnBitmasks.put("companyName", 16384L);

		columnBitmasks.put("companyDetails", 32768L);

		columnBitmasks.put("designation", 65536L);

		columnBitmasks.put("location  ", 131072L);

		columnBitmasks.put("salaryHike", 262144L);

		columnBitmasks.put("feedback ", 524288L);

		columnBitmasks.put("hrRemark", 1048576L);

		columnBitmasks.put("submittedDate", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuestionnaireForm _escapedModel;

}