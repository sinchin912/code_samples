/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.HrForm;
import com.trantorinc.synergy.notice.core.model.HrFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HrForm service. Represents a row in the &quot;NOTICE_HrForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HrFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HrFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HrFormImpl
 * @generated
 */
public class HrFormModelImpl
	extends BaseModelImpl<HrForm> implements HrFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hr form model instance should use the <code>HrForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_HrForm";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"exitId", Types.BIGINT},
		{"foodOption", Types.BIGINT}, {"foodOptionRemark", Types.VARCHAR},
		{"inductionFeedbackStatus", Types.INTEGER},
		{"inductionFeedbackRemark", Types.VARCHAR},
		{"inductionQuizStatus", Types.INTEGER},
		{"inductionQuizRemark", Types.VARCHAR},
		{"trainingFeedbackStatus", Types.INTEGER},
		{"trainingFeedbackRemark", Types.VARCHAR},
		{"exitInterviewStatus", Types.INTEGER},
		{"exitInterviewRemark", Types.VARCHAR},
		{"employeeDirectoryStatus", Types.INTEGER},
		{"employeeDirectoryRemark", Types.VARCHAR},
		{"lmsStatus", Types.INTEGER}, {"lmsRemark", Types.VARCHAR},
		{"vantageCircleStatus", Types.INTEGER},
		{"vantageCircleRemark", Types.VARCHAR},
		{"birthdaySynergyStatus", Types.INTEGER},
		{"birthdaySynergyRemark", Types.VARCHAR},
		{"experienceLetterStatus", Types.INTEGER},
		{"experienceLetterRemark", Types.VARCHAR},
		{"ndaFormStatus", Types.INTEGER}, {"ndaFormRemark", Types.VARCHAR},
		{"separationDocumentStatus", Types.INTEGER},
		{"separationDocumentRemark", Types.VARCHAR},
		{"trainingAgreementAmt", Types.VARCHAR},
		{"trainingAgreementStatus", Types.INTEGER},
		{"recoverableBonusAmt", Types.VARCHAR},
		{"recoverableBonusStatus", Types.INTEGER},
		{"noticePeriodRecoveryAmt", Types.VARCHAR},
		{"noticePeriodRecoveryStatus", Types.INTEGER},
		{"leavesMonth1", Types.VARCHAR}, {"leaveDaysMonth1", Types.VARCHAR},
		{"leaveDateMonth1", Types.VARCHAR}, {"leavesMonth2", Types.VARCHAR},
		{"leaveDaysMonth2", Types.VARCHAR}, {"leaveDateMonth2", Types.VARCHAR},
		{"leavesMonth3", Types.VARCHAR}, {"leaveDaysMonth3", Types.VARCHAR},
		{"leaveDateMonth3", Types.VARCHAR}, {"lopMonth1", Types.VARCHAR},
		{"lopDaysMonth1", Types.VARCHAR}, {"lopDateMonth1", Types.VARCHAR},
		{"lopMonth2", Types.VARCHAR}, {"lopDaysMonth2", Types.VARCHAR},
		{"lopDateMonth2", Types.VARCHAR}, {"lopMonth3", Types.VARCHAR},
		{"lopDaysMonth3", Types.VARCHAR}, {"lopDateMonth3", Types.VARCHAR},
		{"earnedLeaveBalance", Types.VARCHAR}, {"hrRemark", Types.VARCHAR},
		{"updatedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("exitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("foodOption", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("foodOptionRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inductionFeedbackStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("inductionFeedbackRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inductionQuizStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("inductionQuizRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingFeedbackStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trainingFeedbackRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exitInterviewStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("exitInterviewRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeDirectoryStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("employeeDirectoryRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lmsStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lmsRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vantageCircleStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("vantageCircleRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthdaySynergyStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("birthdaySynergyRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experienceLetterStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("experienceLetterRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ndaFormStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ndaFormRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("separationDocumentStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("separationDocumentRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingAgreementAmt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingAgreementStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("recoverableBonusAmt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recoverableBonusStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("noticePeriodRecoveryAmt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noticePeriodRecoveryStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("leavesMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDaysMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDateMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leavesMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDaysMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDateMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leavesMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDaysMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDateMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDaysMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDateMonth1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDaysMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDateMonth2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDaysMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lopDateMonth3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("earnedLeaveBalance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_HrForm (id_ LONG not null primary key,exitId LONG,foodOption LONG,foodOptionRemark VARCHAR(200) null,inductionFeedbackStatus INTEGER,inductionFeedbackRemark VARCHAR(200) null,inductionQuizStatus INTEGER,inductionQuizRemark VARCHAR(200) null,trainingFeedbackStatus INTEGER,trainingFeedbackRemark VARCHAR(200) null,exitInterviewStatus INTEGER,exitInterviewRemark VARCHAR(200) null,employeeDirectoryStatus INTEGER,employeeDirectoryRemark VARCHAR(200) null,lmsStatus INTEGER,lmsRemark VARCHAR(200) null,vantageCircleStatus INTEGER,vantageCircleRemark VARCHAR(200) null,birthdaySynergyStatus INTEGER,birthdaySynergyRemark VARCHAR(200) null,experienceLetterStatus INTEGER,experienceLetterRemark VARCHAR(200) null,ndaFormStatus INTEGER,ndaFormRemark VARCHAR(200) null,separationDocumentStatus INTEGER,separationDocumentRemark VARCHAR(200) null,trainingAgreementAmt VARCHAR(75) null,trainingAgreementStatus INTEGER,recoverableBonusAmt VARCHAR(75) null,recoverableBonusStatus INTEGER,noticePeriodRecoveryAmt VARCHAR(75) null,noticePeriodRecoveryStatus INTEGER,leavesMonth1 VARCHAR(75) null,leaveDaysMonth1 VARCHAR(75) null,leaveDateMonth1 VARCHAR(75) null,leavesMonth2 VARCHAR(75) null,leaveDaysMonth2 VARCHAR(75) null,leaveDateMonth2 VARCHAR(75) null,leavesMonth3 VARCHAR(75) null,leaveDaysMonth3 VARCHAR(75) null,leaveDateMonth3 VARCHAR(75) null,lopMonth1 VARCHAR(75) null,lopDaysMonth1 VARCHAR(75) null,lopDateMonth1 VARCHAR(75) null,lopMonth2 VARCHAR(75) null,lopDaysMonth2 VARCHAR(75) null,lopDateMonth2 VARCHAR(75) null,lopMonth3 VARCHAR(75) null,lopDaysMonth3 VARCHAR(75) null,lopDateMonth3 VARCHAR(75) null,earnedLeaveBalance VARCHAR(75) null,hrRemark VARCHAR(500) null,updatedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table NOTICE_HrForm";

	public static final String ORDER_BY_JPQL = " ORDER BY hrForm.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY NOTICE_HrForm.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HrFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HrForm.class;
	}

	@Override
	public String getModelClassName() {
		return HrForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HrForm, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HrForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HrForm, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((HrForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HrForm, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HrForm, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HrForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HrForm, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HrForm, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<HrForm, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HrForm, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HrForm, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HrForm, Object>>();
		Map<String, BiConsumer<HrForm, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HrForm, ?>>();

		attributeGetterFunctions.put("id", HrForm::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<HrForm, Long>)HrForm::setId);
		attributeGetterFunctions.put("exitId", HrForm::getExitId);
		attributeSetterBiConsumers.put(
			"exitId", (BiConsumer<HrForm, Long>)HrForm::setExitId);
		attributeGetterFunctions.put("foodOption", HrForm::getFoodOption);
		attributeSetterBiConsumers.put(
			"foodOption", (BiConsumer<HrForm, Long>)HrForm::setFoodOption);
		attributeGetterFunctions.put(
			"foodOptionRemark", HrForm::getFoodOptionRemark);
		attributeSetterBiConsumers.put(
			"foodOptionRemark",
			(BiConsumer<HrForm, String>)HrForm::setFoodOptionRemark);
		attributeGetterFunctions.put(
			"inductionFeedbackStatus", HrForm::getInductionFeedbackStatus);
		attributeSetterBiConsumers.put(
			"inductionFeedbackStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setInductionFeedbackStatus);
		attributeGetterFunctions.put(
			"inductionFeedbackRemark", HrForm::getInductionFeedbackRemark);
		attributeSetterBiConsumers.put(
			"inductionFeedbackRemark",
			(BiConsumer<HrForm, String>)HrForm::setInductionFeedbackRemark);
		attributeGetterFunctions.put(
			"inductionQuizStatus", HrForm::getInductionQuizStatus);
		attributeSetterBiConsumers.put(
			"inductionQuizStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setInductionQuizStatus);
		attributeGetterFunctions.put(
			"inductionQuizRemark", HrForm::getInductionQuizRemark);
		attributeSetterBiConsumers.put(
			"inductionQuizRemark",
			(BiConsumer<HrForm, String>)HrForm::setInductionQuizRemark);
		attributeGetterFunctions.put(
			"trainingFeedbackStatus", HrForm::getTrainingFeedbackStatus);
		attributeSetterBiConsumers.put(
			"trainingFeedbackStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setTrainingFeedbackStatus);
		attributeGetterFunctions.put(
			"trainingFeedbackRemark", HrForm::getTrainingFeedbackRemark);
		attributeSetterBiConsumers.put(
			"trainingFeedbackRemark",
			(BiConsumer<HrForm, String>)HrForm::setTrainingFeedbackRemark);
		attributeGetterFunctions.put(
			"exitInterviewStatus", HrForm::getExitInterviewStatus);
		attributeSetterBiConsumers.put(
			"exitInterviewStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setExitInterviewStatus);
		attributeGetterFunctions.put(
			"exitInterviewRemark", HrForm::getExitInterviewRemark);
		attributeSetterBiConsumers.put(
			"exitInterviewRemark",
			(BiConsumer<HrForm, String>)HrForm::setExitInterviewRemark);
		attributeGetterFunctions.put(
			"employeeDirectoryStatus", HrForm::getEmployeeDirectoryStatus);
		attributeSetterBiConsumers.put(
			"employeeDirectoryStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setEmployeeDirectoryStatus);
		attributeGetterFunctions.put(
			"employeeDirectoryRemark", HrForm::getEmployeeDirectoryRemark);
		attributeSetterBiConsumers.put(
			"employeeDirectoryRemark",
			(BiConsumer<HrForm, String>)HrForm::setEmployeeDirectoryRemark);
		attributeGetterFunctions.put("lmsStatus", HrForm::getLmsStatus);
		attributeSetterBiConsumers.put(
			"lmsStatus", (BiConsumer<HrForm, Integer>)HrForm::setLmsStatus);
		attributeGetterFunctions.put("lmsRemark", HrForm::getLmsRemark);
		attributeSetterBiConsumers.put(
			"lmsRemark", (BiConsumer<HrForm, String>)HrForm::setLmsRemark);
		attributeGetterFunctions.put(
			"vantageCircleStatus", HrForm::getVantageCircleStatus);
		attributeSetterBiConsumers.put(
			"vantageCircleStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setVantageCircleStatus);
		attributeGetterFunctions.put(
			"vantageCircleRemark", HrForm::getVantageCircleRemark);
		attributeSetterBiConsumers.put(
			"vantageCircleRemark",
			(BiConsumer<HrForm, String>)HrForm::setVantageCircleRemark);
		attributeGetterFunctions.put(
			"birthdaySynergyStatus", HrForm::getBirthdaySynergyStatus);
		attributeSetterBiConsumers.put(
			"birthdaySynergyStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setBirthdaySynergyStatus);
		attributeGetterFunctions.put(
			"birthdaySynergyRemark", HrForm::getBirthdaySynergyRemark);
		attributeSetterBiConsumers.put(
			"birthdaySynergyRemark",
			(BiConsumer<HrForm, String>)HrForm::setBirthdaySynergyRemark);
		attributeGetterFunctions.put(
			"experienceLetterStatus", HrForm::getExperienceLetterStatus);
		attributeSetterBiConsumers.put(
			"experienceLetterStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setExperienceLetterStatus);
		attributeGetterFunctions.put(
			"experienceLetterRemark", HrForm::getExperienceLetterRemark);
		attributeSetterBiConsumers.put(
			"experienceLetterRemark",
			(BiConsumer<HrForm, String>)HrForm::setExperienceLetterRemark);
		attributeGetterFunctions.put("ndaFormStatus", HrForm::getNdaFormStatus);
		attributeSetterBiConsumers.put(
			"ndaFormStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setNdaFormStatus);
		attributeGetterFunctions.put("ndaFormRemark", HrForm::getNdaFormRemark);
		attributeSetterBiConsumers.put(
			"ndaFormRemark",
			(BiConsumer<HrForm, String>)HrForm::setNdaFormRemark);
		attributeGetterFunctions.put(
			"separationDocumentStatus", HrForm::getSeparationDocumentStatus);
		attributeSetterBiConsumers.put(
			"separationDocumentStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setSeparationDocumentStatus);
		attributeGetterFunctions.put(
			"separationDocumentRemark", HrForm::getSeparationDocumentRemark);
		attributeSetterBiConsumers.put(
			"separationDocumentRemark",
			(BiConsumer<HrForm, String>)HrForm::setSeparationDocumentRemark);
		attributeGetterFunctions.put(
			"trainingAgreementAmt", HrForm::getTrainingAgreementAmt);
		attributeSetterBiConsumers.put(
			"trainingAgreementAmt",
			(BiConsumer<HrForm, String>)HrForm::setTrainingAgreementAmt);
		attributeGetterFunctions.put(
			"trainingAgreementStatus", HrForm::getTrainingAgreementStatus);
		attributeSetterBiConsumers.put(
			"trainingAgreementStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setTrainingAgreementStatus);
		attributeGetterFunctions.put(
			"recoverableBonusAmt", HrForm::getRecoverableBonusAmt);
		attributeSetterBiConsumers.put(
			"recoverableBonusAmt",
			(BiConsumer<HrForm, String>)HrForm::setRecoverableBonusAmt);
		attributeGetterFunctions.put(
			"recoverableBonusStatus", HrForm::getRecoverableBonusStatus);
		attributeSetterBiConsumers.put(
			"recoverableBonusStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setRecoverableBonusStatus);
		attributeGetterFunctions.put(
			"noticePeriodRecoveryAmt", HrForm::getNoticePeriodRecoveryAmt);
		attributeSetterBiConsumers.put(
			"noticePeriodRecoveryAmt",
			(BiConsumer<HrForm, String>)HrForm::setNoticePeriodRecoveryAmt);
		attributeGetterFunctions.put(
			"noticePeriodRecoveryStatus",
			HrForm::getNoticePeriodRecoveryStatus);
		attributeSetterBiConsumers.put(
			"noticePeriodRecoveryStatus",
			(BiConsumer<HrForm, Integer>)HrForm::setNoticePeriodRecoveryStatus);
		attributeGetterFunctions.put("leavesMonth1", HrForm::getLeavesMonth1);
		attributeSetterBiConsumers.put(
			"leavesMonth1",
			(BiConsumer<HrForm, String>)HrForm::setLeavesMonth1);
		attributeGetterFunctions.put(
			"leaveDaysMonth1", HrForm::getLeaveDaysMonth1);
		attributeSetterBiConsumers.put(
			"leaveDaysMonth1",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDaysMonth1);
		attributeGetterFunctions.put(
			"leaveDateMonth1", HrForm::getLeaveDateMonth1);
		attributeSetterBiConsumers.put(
			"leaveDateMonth1",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDateMonth1);
		attributeGetterFunctions.put("leavesMonth2", HrForm::getLeavesMonth2);
		attributeSetterBiConsumers.put(
			"leavesMonth2",
			(BiConsumer<HrForm, String>)HrForm::setLeavesMonth2);
		attributeGetterFunctions.put(
			"leaveDaysMonth2", HrForm::getLeaveDaysMonth2);
		attributeSetterBiConsumers.put(
			"leaveDaysMonth2",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDaysMonth2);
		attributeGetterFunctions.put(
			"leaveDateMonth2", HrForm::getLeaveDateMonth2);
		attributeSetterBiConsumers.put(
			"leaveDateMonth2",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDateMonth2);
		attributeGetterFunctions.put("leavesMonth3", HrForm::getLeavesMonth3);
		attributeSetterBiConsumers.put(
			"leavesMonth3",
			(BiConsumer<HrForm, String>)HrForm::setLeavesMonth3);
		attributeGetterFunctions.put(
			"leaveDaysMonth3", HrForm::getLeaveDaysMonth3);
		attributeSetterBiConsumers.put(
			"leaveDaysMonth3",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDaysMonth3);
		attributeGetterFunctions.put(
			"leaveDateMonth3", HrForm::getLeaveDateMonth3);
		attributeSetterBiConsumers.put(
			"leaveDateMonth3",
			(BiConsumer<HrForm, String>)HrForm::setLeaveDateMonth3);
		attributeGetterFunctions.put("lopMonth1", HrForm::getLopMonth1);
		attributeSetterBiConsumers.put(
			"lopMonth1", (BiConsumer<HrForm, String>)HrForm::setLopMonth1);
		attributeGetterFunctions.put("lopDaysMonth1", HrForm::getLopDaysMonth1);
		attributeSetterBiConsumers.put(
			"lopDaysMonth1",
			(BiConsumer<HrForm, String>)HrForm::setLopDaysMonth1);
		attributeGetterFunctions.put("lopDateMonth1", HrForm::getLopDateMonth1);
		attributeSetterBiConsumers.put(
			"lopDateMonth1",
			(BiConsumer<HrForm, String>)HrForm::setLopDateMonth1);
		attributeGetterFunctions.put("lopMonth2", HrForm::getLopMonth2);
		attributeSetterBiConsumers.put(
			"lopMonth2", (BiConsumer<HrForm, String>)HrForm::setLopMonth2);
		attributeGetterFunctions.put("lopDaysMonth2", HrForm::getLopDaysMonth2);
		attributeSetterBiConsumers.put(
			"lopDaysMonth2",
			(BiConsumer<HrForm, String>)HrForm::setLopDaysMonth2);
		attributeGetterFunctions.put("lopDateMonth2", HrForm::getLopDateMonth2);
		attributeSetterBiConsumers.put(
			"lopDateMonth2",
			(BiConsumer<HrForm, String>)HrForm::setLopDateMonth2);
		attributeGetterFunctions.put("lopMonth3", HrForm::getLopMonth3);
		attributeSetterBiConsumers.put(
			"lopMonth3", (BiConsumer<HrForm, String>)HrForm::setLopMonth3);
		attributeGetterFunctions.put("lopDaysMonth3", HrForm::getLopDaysMonth3);
		attributeSetterBiConsumers.put(
			"lopDaysMonth3",
			(BiConsumer<HrForm, String>)HrForm::setLopDaysMonth3);
		attributeGetterFunctions.put("lopDateMonth3", HrForm::getLopDateMonth3);
		attributeSetterBiConsumers.put(
			"lopDateMonth3",
			(BiConsumer<HrForm, String>)HrForm::setLopDateMonth3);
		attributeGetterFunctions.put(
			"earnedLeaveBalance", HrForm::getEarnedLeaveBalance);
		attributeSetterBiConsumers.put(
			"earnedLeaveBalance",
			(BiConsumer<HrForm, String>)HrForm::setEarnedLeaveBalance);
		attributeGetterFunctions.put("hrRemark", HrForm::getHrRemark);
		attributeSetterBiConsumers.put(
			"hrRemark", (BiConsumer<HrForm, String>)HrForm::setHrRemark);
		attributeGetterFunctions.put("updatedDate", HrForm::getUpdatedDate);
		attributeSetterBiConsumers.put(
			"updatedDate", (BiConsumer<HrForm, Date>)HrForm::setUpdatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getExitId() {
		return _exitId;
	}

	@Override
	public void setExitId(long exitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitId = exitId;
	}

	@Override
	public long getFoodOption() {
		return _foodOption;
	}

	@Override
	public void setFoodOption(long foodOption) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodOption = foodOption;
	}

	@Override
	public String getFoodOptionRemark() {
		if (_foodOptionRemark == null) {
			return "";
		}
		else {
			return _foodOptionRemark;
		}
	}

	@Override
	public void setFoodOptionRemark(String foodOptionRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodOptionRemark = foodOptionRemark;
	}

	@Override
	public int getInductionFeedbackStatus() {
		return _inductionFeedbackStatus;
	}

	@Override
	public void setInductionFeedbackStatus(int inductionFeedbackStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inductionFeedbackStatus = inductionFeedbackStatus;
	}

	@Override
	public String getInductionFeedbackRemark() {
		if (_inductionFeedbackRemark == null) {
			return "";
		}
		else {
			return _inductionFeedbackRemark;
		}
	}

	@Override
	public void setInductionFeedbackRemark(String inductionFeedbackRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inductionFeedbackRemark = inductionFeedbackRemark;
	}

	@Override
	public int getInductionQuizStatus() {
		return _inductionQuizStatus;
	}

	@Override
	public void setInductionQuizStatus(int inductionQuizStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inductionQuizStatus = inductionQuizStatus;
	}

	@Override
	public String getInductionQuizRemark() {
		if (_inductionQuizRemark == null) {
			return "";
		}
		else {
			return _inductionQuizRemark;
		}
	}

	@Override
	public void setInductionQuizRemark(String inductionQuizRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inductionQuizRemark = inductionQuizRemark;
	}

	@Override
	public int getTrainingFeedbackStatus() {
		return _trainingFeedbackStatus;
	}

	@Override
	public void setTrainingFeedbackStatus(int trainingFeedbackStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingFeedbackStatus = trainingFeedbackStatus;
	}

	@Override
	public String getTrainingFeedbackRemark() {
		if (_trainingFeedbackRemark == null) {
			return "";
		}
		else {
			return _trainingFeedbackRemark;
		}
	}

	@Override
	public void setTrainingFeedbackRemark(String trainingFeedbackRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingFeedbackRemark = trainingFeedbackRemark;
	}

	@Override
	public int getExitInterviewStatus() {
		return _exitInterviewStatus;
	}

	@Override
	public void setExitInterviewStatus(int exitInterviewStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitInterviewStatus = exitInterviewStatus;
	}

	@Override
	public String getExitInterviewRemark() {
		if (_exitInterviewRemark == null) {
			return "";
		}
		else {
			return _exitInterviewRemark;
		}
	}

	@Override
	public void setExitInterviewRemark(String exitInterviewRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitInterviewRemark = exitInterviewRemark;
	}

	@Override
	public int getEmployeeDirectoryStatus() {
		return _employeeDirectoryStatus;
	}

	@Override
	public void setEmployeeDirectoryStatus(int employeeDirectoryStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeDirectoryStatus = employeeDirectoryStatus;
	}

	@Override
	public String getEmployeeDirectoryRemark() {
		if (_employeeDirectoryRemark == null) {
			return "";
		}
		else {
			return _employeeDirectoryRemark;
		}
	}

	@Override
	public void setEmployeeDirectoryRemark(String employeeDirectoryRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeDirectoryRemark = employeeDirectoryRemark;
	}

	@Override
	public int getLmsStatus() {
		return _lmsStatus;
	}

	@Override
	public void setLmsStatus(int lmsStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lmsStatus = lmsStatus;
	}

	@Override
	public String getLmsRemark() {
		if (_lmsRemark == null) {
			return "";
		}
		else {
			return _lmsRemark;
		}
	}

	@Override
	public void setLmsRemark(String lmsRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lmsRemark = lmsRemark;
	}

	@Override
	public int getVantageCircleStatus() {
		return _vantageCircleStatus;
	}

	@Override
	public void setVantageCircleStatus(int vantageCircleStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vantageCircleStatus = vantageCircleStatus;
	}

	@Override
	public String getVantageCircleRemark() {
		if (_vantageCircleRemark == null) {
			return "";
		}
		else {
			return _vantageCircleRemark;
		}
	}

	@Override
	public void setVantageCircleRemark(String vantageCircleRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vantageCircleRemark = vantageCircleRemark;
	}

	@Override
	public int getBirthdaySynergyStatus() {
		return _birthdaySynergyStatus;
	}

	@Override
	public void setBirthdaySynergyStatus(int birthdaySynergyStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthdaySynergyStatus = birthdaySynergyStatus;
	}

	@Override
	public String getBirthdaySynergyRemark() {
		if (_birthdaySynergyRemark == null) {
			return "";
		}
		else {
			return _birthdaySynergyRemark;
		}
	}

	@Override
	public void setBirthdaySynergyRemark(String birthdaySynergyRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthdaySynergyRemark = birthdaySynergyRemark;
	}

	@Override
	public int getExperienceLetterStatus() {
		return _experienceLetterStatus;
	}

	@Override
	public void setExperienceLetterStatus(int experienceLetterStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experienceLetterStatus = experienceLetterStatus;
	}

	@Override
	public String getExperienceLetterRemark() {
		if (_experienceLetterRemark == null) {
			return "";
		}
		else {
			return _experienceLetterRemark;
		}
	}

	@Override
	public void setExperienceLetterRemark(String experienceLetterRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experienceLetterRemark = experienceLetterRemark;
	}

	@Override
	public int getNdaFormStatus() {
		return _ndaFormStatus;
	}

	@Override
	public void setNdaFormStatus(int ndaFormStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ndaFormStatus = ndaFormStatus;
	}

	@Override
	public String getNdaFormRemark() {
		if (_ndaFormRemark == null) {
			return "";
		}
		else {
			return _ndaFormRemark;
		}
	}

	@Override
	public void setNdaFormRemark(String ndaFormRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ndaFormRemark = ndaFormRemark;
	}

	@Override
	public int getSeparationDocumentStatus() {
		return _separationDocumentStatus;
	}

	@Override
	public void setSeparationDocumentStatus(int separationDocumentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationDocumentStatus = separationDocumentStatus;
	}

	@Override
	public String getSeparationDocumentRemark() {
		if (_separationDocumentRemark == null) {
			return "";
		}
		else {
			return _separationDocumentRemark;
		}
	}

	@Override
	public void setSeparationDocumentRemark(String separationDocumentRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationDocumentRemark = separationDocumentRemark;
	}

	@Override
	public String getTrainingAgreementAmt() {
		if (_trainingAgreementAmt == null) {
			return "";
		}
		else {
			return _trainingAgreementAmt;
		}
	}

	@Override
	public void setTrainingAgreementAmt(String trainingAgreementAmt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingAgreementAmt = trainingAgreementAmt;
	}

	@Override
	public int getTrainingAgreementStatus() {
		return _trainingAgreementStatus;
	}

	@Override
	public void setTrainingAgreementStatus(int trainingAgreementStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingAgreementStatus = trainingAgreementStatus;
	}

	@Override
	public String getRecoverableBonusAmt() {
		if (_recoverableBonusAmt == null) {
			return "";
		}
		else {
			return _recoverableBonusAmt;
		}
	}

	@Override
	public void setRecoverableBonusAmt(String recoverableBonusAmt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoverableBonusAmt = recoverableBonusAmt;
	}

	@Override
	public int getRecoverableBonusStatus() {
		return _recoverableBonusStatus;
	}

	@Override
	public void setRecoverableBonusStatus(int recoverableBonusStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoverableBonusStatus = recoverableBonusStatus;
	}

	@Override
	public String getNoticePeriodRecoveryAmt() {
		if (_noticePeriodRecoveryAmt == null) {
			return "";
		}
		else {
			return _noticePeriodRecoveryAmt;
		}
	}

	@Override
	public void setNoticePeriodRecoveryAmt(String noticePeriodRecoveryAmt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noticePeriodRecoveryAmt = noticePeriodRecoveryAmt;
	}

	@Override
	public int getNoticePeriodRecoveryStatus() {
		return _noticePeriodRecoveryStatus;
	}

	@Override
	public void setNoticePeriodRecoveryStatus(int noticePeriodRecoveryStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noticePeriodRecoveryStatus = noticePeriodRecoveryStatus;
	}

	@Override
	public String getLeavesMonth1() {
		if (_leavesMonth1 == null) {
			return "";
		}
		else {
			return _leavesMonth1;
		}
	}

	@Override
	public void setLeavesMonth1(String leavesMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leavesMonth1 = leavesMonth1;
	}

	@Override
	public String getLeaveDaysMonth1() {
		if (_leaveDaysMonth1 == null) {
			return "";
		}
		else {
			return _leaveDaysMonth1;
		}
	}

	@Override
	public void setLeaveDaysMonth1(String leaveDaysMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDaysMonth1 = leaveDaysMonth1;
	}

	@Override
	public String getLeaveDateMonth1() {
		if (_leaveDateMonth1 == null) {
			return "";
		}
		else {
			return _leaveDateMonth1;
		}
	}

	@Override
	public void setLeaveDateMonth1(String leaveDateMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDateMonth1 = leaveDateMonth1;
	}

	@Override
	public String getLeavesMonth2() {
		if (_leavesMonth2 == null) {
			return "";
		}
		else {
			return _leavesMonth2;
		}
	}

	@Override
	public void setLeavesMonth2(String leavesMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leavesMonth2 = leavesMonth2;
	}

	@Override
	public String getLeaveDaysMonth2() {
		if (_leaveDaysMonth2 == null) {
			return "";
		}
		else {
			return _leaveDaysMonth2;
		}
	}

	@Override
	public void setLeaveDaysMonth2(String leaveDaysMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDaysMonth2 = leaveDaysMonth2;
	}

	@Override
	public String getLeaveDateMonth2() {
		if (_leaveDateMonth2 == null) {
			return "";
		}
		else {
			return _leaveDateMonth2;
		}
	}

	@Override
	public void setLeaveDateMonth2(String leaveDateMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDateMonth2 = leaveDateMonth2;
	}

	@Override
	public String getLeavesMonth3() {
		if (_leavesMonth3 == null) {
			return "";
		}
		else {
			return _leavesMonth3;
		}
	}

	@Override
	public void setLeavesMonth3(String leavesMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leavesMonth3 = leavesMonth3;
	}

	@Override
	public String getLeaveDaysMonth3() {
		if (_leaveDaysMonth3 == null) {
			return "";
		}
		else {
			return _leaveDaysMonth3;
		}
	}

	@Override
	public void setLeaveDaysMonth3(String leaveDaysMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDaysMonth3 = leaveDaysMonth3;
	}

	@Override
	public String getLeaveDateMonth3() {
		if (_leaveDateMonth3 == null) {
			return "";
		}
		else {
			return _leaveDateMonth3;
		}
	}

	@Override
	public void setLeaveDateMonth3(String leaveDateMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveDateMonth3 = leaveDateMonth3;
	}

	@Override
	public String getLopMonth1() {
		if (_lopMonth1 == null) {
			return "";
		}
		else {
			return _lopMonth1;
		}
	}

	@Override
	public void setLopMonth1(String lopMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopMonth1 = lopMonth1;
	}

	@Override
	public String getLopDaysMonth1() {
		if (_lopDaysMonth1 == null) {
			return "";
		}
		else {
			return _lopDaysMonth1;
		}
	}

	@Override
	public void setLopDaysMonth1(String lopDaysMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDaysMonth1 = lopDaysMonth1;
	}

	@Override
	public String getLopDateMonth1() {
		if (_lopDateMonth1 == null) {
			return "";
		}
		else {
			return _lopDateMonth1;
		}
	}

	@Override
	public void setLopDateMonth1(String lopDateMonth1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDateMonth1 = lopDateMonth1;
	}

	@Override
	public String getLopMonth2() {
		if (_lopMonth2 == null) {
			return "";
		}
		else {
			return _lopMonth2;
		}
	}

	@Override
	public void setLopMonth2(String lopMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopMonth2 = lopMonth2;
	}

	@Override
	public String getLopDaysMonth2() {
		if (_lopDaysMonth2 == null) {
			return "";
		}
		else {
			return _lopDaysMonth2;
		}
	}

	@Override
	public void setLopDaysMonth2(String lopDaysMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDaysMonth2 = lopDaysMonth2;
	}

	@Override
	public String getLopDateMonth2() {
		if (_lopDateMonth2 == null) {
			return "";
		}
		else {
			return _lopDateMonth2;
		}
	}

	@Override
	public void setLopDateMonth2(String lopDateMonth2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDateMonth2 = lopDateMonth2;
	}

	@Override
	public String getLopMonth3() {
		if (_lopMonth3 == null) {
			return "";
		}
		else {
			return _lopMonth3;
		}
	}

	@Override
	public void setLopMonth3(String lopMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopMonth3 = lopMonth3;
	}

	@Override
	public String getLopDaysMonth3() {
		if (_lopDaysMonth3 == null) {
			return "";
		}
		else {
			return _lopDaysMonth3;
		}
	}

	@Override
	public void setLopDaysMonth3(String lopDaysMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDaysMonth3 = lopDaysMonth3;
	}

	@Override
	public String getLopDateMonth3() {
		if (_lopDateMonth3 == null) {
			return "";
		}
		else {
			return _lopDateMonth3;
		}
	}

	@Override
	public void setLopDateMonth3(String lopDateMonth3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lopDateMonth3 = lopDateMonth3;
	}

	@Override
	public String getEarnedLeaveBalance() {
		if (_earnedLeaveBalance == null) {
			return "";
		}
		else {
			return _earnedLeaveBalance;
		}
	}

	@Override
	public void setEarnedLeaveBalance(String earnedLeaveBalance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_earnedLeaveBalance = earnedLeaveBalance;
	}

	@Override
	public String getHrRemark() {
		if (_hrRemark == null) {
			return "";
		}
		else {
			return _hrRemark;
		}
	}

	@Override
	public void setHrRemark(String hrRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrRemark = hrRemark;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, HrForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HrForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HrForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HrFormImpl hrFormImpl = new HrFormImpl();

		hrFormImpl.setId(getId());
		hrFormImpl.setExitId(getExitId());
		hrFormImpl.setFoodOption(getFoodOption());
		hrFormImpl.setFoodOptionRemark(getFoodOptionRemark());
		hrFormImpl.setInductionFeedbackStatus(getInductionFeedbackStatus());
		hrFormImpl.setInductionFeedbackRemark(getInductionFeedbackRemark());
		hrFormImpl.setInductionQuizStatus(getInductionQuizStatus());
		hrFormImpl.setInductionQuizRemark(getInductionQuizRemark());
		hrFormImpl.setTrainingFeedbackStatus(getTrainingFeedbackStatus());
		hrFormImpl.setTrainingFeedbackRemark(getTrainingFeedbackRemark());
		hrFormImpl.setExitInterviewStatus(getExitInterviewStatus());
		hrFormImpl.setExitInterviewRemark(getExitInterviewRemark());
		hrFormImpl.setEmployeeDirectoryStatus(getEmployeeDirectoryStatus());
		hrFormImpl.setEmployeeDirectoryRemark(getEmployeeDirectoryRemark());
		hrFormImpl.setLmsStatus(getLmsStatus());
		hrFormImpl.setLmsRemark(getLmsRemark());
		hrFormImpl.setVantageCircleStatus(getVantageCircleStatus());
		hrFormImpl.setVantageCircleRemark(getVantageCircleRemark());
		hrFormImpl.setBirthdaySynergyStatus(getBirthdaySynergyStatus());
		hrFormImpl.setBirthdaySynergyRemark(getBirthdaySynergyRemark());
		hrFormImpl.setExperienceLetterStatus(getExperienceLetterStatus());
		hrFormImpl.setExperienceLetterRemark(getExperienceLetterRemark());
		hrFormImpl.setNdaFormStatus(getNdaFormStatus());
		hrFormImpl.setNdaFormRemark(getNdaFormRemark());
		hrFormImpl.setSeparationDocumentStatus(getSeparationDocumentStatus());
		hrFormImpl.setSeparationDocumentRemark(getSeparationDocumentRemark());
		hrFormImpl.setTrainingAgreementAmt(getTrainingAgreementAmt());
		hrFormImpl.setTrainingAgreementStatus(getTrainingAgreementStatus());
		hrFormImpl.setRecoverableBonusAmt(getRecoverableBonusAmt());
		hrFormImpl.setRecoverableBonusStatus(getRecoverableBonusStatus());
		hrFormImpl.setNoticePeriodRecoveryAmt(getNoticePeriodRecoveryAmt());
		hrFormImpl.setNoticePeriodRecoveryStatus(
			getNoticePeriodRecoveryStatus());
		hrFormImpl.setLeavesMonth1(getLeavesMonth1());
		hrFormImpl.setLeaveDaysMonth1(getLeaveDaysMonth1());
		hrFormImpl.setLeaveDateMonth1(getLeaveDateMonth1());
		hrFormImpl.setLeavesMonth2(getLeavesMonth2());
		hrFormImpl.setLeaveDaysMonth2(getLeaveDaysMonth2());
		hrFormImpl.setLeaveDateMonth2(getLeaveDateMonth2());
		hrFormImpl.setLeavesMonth3(getLeavesMonth3());
		hrFormImpl.setLeaveDaysMonth3(getLeaveDaysMonth3());
		hrFormImpl.setLeaveDateMonth3(getLeaveDateMonth3());
		hrFormImpl.setLopMonth1(getLopMonth1());
		hrFormImpl.setLopDaysMonth1(getLopDaysMonth1());
		hrFormImpl.setLopDateMonth1(getLopDateMonth1());
		hrFormImpl.setLopMonth2(getLopMonth2());
		hrFormImpl.setLopDaysMonth2(getLopDaysMonth2());
		hrFormImpl.setLopDateMonth2(getLopDateMonth2());
		hrFormImpl.setLopMonth3(getLopMonth3());
		hrFormImpl.setLopDaysMonth3(getLopDaysMonth3());
		hrFormImpl.setLopDateMonth3(getLopDateMonth3());
		hrFormImpl.setEarnedLeaveBalance(getEarnedLeaveBalance());
		hrFormImpl.setHrRemark(getHrRemark());
		hrFormImpl.setUpdatedDate(getUpdatedDate());

		hrFormImpl.resetOriginalValues();

		return hrFormImpl;
	}

	@Override
	public HrForm cloneWithOriginalValues() {
		HrFormImpl hrFormImpl = new HrFormImpl();

		hrFormImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		hrFormImpl.setExitId(this.<Long>getColumnOriginalValue("exitId"));
		hrFormImpl.setFoodOption(
			this.<Long>getColumnOriginalValue("foodOption"));
		hrFormImpl.setFoodOptionRemark(
			this.<String>getColumnOriginalValue("foodOptionRemark"));
		hrFormImpl.setInductionFeedbackStatus(
			this.<Integer>getColumnOriginalValue("inductionFeedbackStatus"));
		hrFormImpl.setInductionFeedbackRemark(
			this.<String>getColumnOriginalValue("inductionFeedbackRemark"));
		hrFormImpl.setInductionQuizStatus(
			this.<Integer>getColumnOriginalValue("inductionQuizStatus"));
		hrFormImpl.setInductionQuizRemark(
			this.<String>getColumnOriginalValue("inductionQuizRemark"));
		hrFormImpl.setTrainingFeedbackStatus(
			this.<Integer>getColumnOriginalValue("trainingFeedbackStatus"));
		hrFormImpl.setTrainingFeedbackRemark(
			this.<String>getColumnOriginalValue("trainingFeedbackRemark"));
		hrFormImpl.setExitInterviewStatus(
			this.<Integer>getColumnOriginalValue("exitInterviewStatus"));
		hrFormImpl.setExitInterviewRemark(
			this.<String>getColumnOriginalValue("exitInterviewRemark"));
		hrFormImpl.setEmployeeDirectoryStatus(
			this.<Integer>getColumnOriginalValue("employeeDirectoryStatus"));
		hrFormImpl.setEmployeeDirectoryRemark(
			this.<String>getColumnOriginalValue("employeeDirectoryRemark"));
		hrFormImpl.setLmsStatus(
			this.<Integer>getColumnOriginalValue("lmsStatus"));
		hrFormImpl.setLmsRemark(
			this.<String>getColumnOriginalValue("lmsRemark"));
		hrFormImpl.setVantageCircleStatus(
			this.<Integer>getColumnOriginalValue("vantageCircleStatus"));
		hrFormImpl.setVantageCircleRemark(
			this.<String>getColumnOriginalValue("vantageCircleRemark"));
		hrFormImpl.setBirthdaySynergyStatus(
			this.<Integer>getColumnOriginalValue("birthdaySynergyStatus"));
		hrFormImpl.setBirthdaySynergyRemark(
			this.<String>getColumnOriginalValue("birthdaySynergyRemark"));
		hrFormImpl.setExperienceLetterStatus(
			this.<Integer>getColumnOriginalValue("experienceLetterStatus"));
		hrFormImpl.setExperienceLetterRemark(
			this.<String>getColumnOriginalValue("experienceLetterRemark"));
		hrFormImpl.setNdaFormStatus(
			this.<Integer>getColumnOriginalValue("ndaFormStatus"));
		hrFormImpl.setNdaFormRemark(
			this.<String>getColumnOriginalValue("ndaFormRemark"));
		hrFormImpl.setSeparationDocumentStatus(
			this.<Integer>getColumnOriginalValue("separationDocumentStatus"));
		hrFormImpl.setSeparationDocumentRemark(
			this.<String>getColumnOriginalValue("separationDocumentRemark"));
		hrFormImpl.setTrainingAgreementAmt(
			this.<String>getColumnOriginalValue("trainingAgreementAmt"));
		hrFormImpl.setTrainingAgreementStatus(
			this.<Integer>getColumnOriginalValue("trainingAgreementStatus"));
		hrFormImpl.setRecoverableBonusAmt(
			this.<String>getColumnOriginalValue("recoverableBonusAmt"));
		hrFormImpl.setRecoverableBonusStatus(
			this.<Integer>getColumnOriginalValue("recoverableBonusStatus"));
		hrFormImpl.setNoticePeriodRecoveryAmt(
			this.<String>getColumnOriginalValue("noticePeriodRecoveryAmt"));
		hrFormImpl.setNoticePeriodRecoveryStatus(
			this.<Integer>getColumnOriginalValue("noticePeriodRecoveryStatus"));
		hrFormImpl.setLeavesMonth1(
			this.<String>getColumnOriginalValue("leavesMonth1"));
		hrFormImpl.setLeaveDaysMonth1(
			this.<String>getColumnOriginalValue("leaveDaysMonth1"));
		hrFormImpl.setLeaveDateMonth1(
			this.<String>getColumnOriginalValue("leaveDateMonth1"));
		hrFormImpl.setLeavesMonth2(
			this.<String>getColumnOriginalValue("leavesMonth2"));
		hrFormImpl.setLeaveDaysMonth2(
			this.<String>getColumnOriginalValue("leaveDaysMonth2"));
		hrFormImpl.setLeaveDateMonth2(
			this.<String>getColumnOriginalValue("leaveDateMonth2"));
		hrFormImpl.setLeavesMonth3(
			this.<String>getColumnOriginalValue("leavesMonth3"));
		hrFormImpl.setLeaveDaysMonth3(
			this.<String>getColumnOriginalValue("leaveDaysMonth3"));
		hrFormImpl.setLeaveDateMonth3(
			this.<String>getColumnOriginalValue("leaveDateMonth3"));
		hrFormImpl.setLopMonth1(
			this.<String>getColumnOriginalValue("lopMonth1"));
		hrFormImpl.setLopDaysMonth1(
			this.<String>getColumnOriginalValue("lopDaysMonth1"));
		hrFormImpl.setLopDateMonth1(
			this.<String>getColumnOriginalValue("lopDateMonth1"));
		hrFormImpl.setLopMonth2(
			this.<String>getColumnOriginalValue("lopMonth2"));
		hrFormImpl.setLopDaysMonth2(
			this.<String>getColumnOriginalValue("lopDaysMonth2"));
		hrFormImpl.setLopDateMonth2(
			this.<String>getColumnOriginalValue("lopDateMonth2"));
		hrFormImpl.setLopMonth3(
			this.<String>getColumnOriginalValue("lopMonth3"));
		hrFormImpl.setLopDaysMonth3(
			this.<String>getColumnOriginalValue("lopDaysMonth3"));
		hrFormImpl.setLopDateMonth3(
			this.<String>getColumnOriginalValue("lopDateMonth3"));
		hrFormImpl.setEarnedLeaveBalance(
			this.<String>getColumnOriginalValue("earnedLeaveBalance"));
		hrFormImpl.setHrRemark(this.<String>getColumnOriginalValue("hrRemark"));
		hrFormImpl.setUpdatedDate(
			this.<Date>getColumnOriginalValue("updatedDate"));

		return hrFormImpl;
	}

	@Override
	public int compareTo(HrForm hrForm) {
		long primaryKey = hrForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HrForm)) {
			return false;
		}

		HrForm hrForm = (HrForm)object;

		long primaryKey = hrForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HrForm> toCacheModel() {
		HrFormCacheModel hrFormCacheModel = new HrFormCacheModel();

		hrFormCacheModel.id = getId();

		hrFormCacheModel.exitId = getExitId();

		hrFormCacheModel.foodOption = getFoodOption();

		hrFormCacheModel.foodOptionRemark = getFoodOptionRemark();

		String foodOptionRemark = hrFormCacheModel.foodOptionRemark;

		if ((foodOptionRemark != null) && (foodOptionRemark.length() == 0)) {
			hrFormCacheModel.foodOptionRemark = null;
		}

		hrFormCacheModel.inductionFeedbackStatus = getInductionFeedbackStatus();

		hrFormCacheModel.inductionFeedbackRemark = getInductionFeedbackRemark();

		String inductionFeedbackRemark =
			hrFormCacheModel.inductionFeedbackRemark;

		if ((inductionFeedbackRemark != null) &&
			(inductionFeedbackRemark.length() == 0)) {

			hrFormCacheModel.inductionFeedbackRemark = null;
		}

		hrFormCacheModel.inductionQuizStatus = getInductionQuizStatus();

		hrFormCacheModel.inductionQuizRemark = getInductionQuizRemark();

		String inductionQuizRemark = hrFormCacheModel.inductionQuizRemark;

		if ((inductionQuizRemark != null) &&
			(inductionQuizRemark.length() == 0)) {

			hrFormCacheModel.inductionQuizRemark = null;
		}

		hrFormCacheModel.trainingFeedbackStatus = getTrainingFeedbackStatus();

		hrFormCacheModel.trainingFeedbackRemark = getTrainingFeedbackRemark();

		String trainingFeedbackRemark = hrFormCacheModel.trainingFeedbackRemark;

		if ((trainingFeedbackRemark != null) &&
			(trainingFeedbackRemark.length() == 0)) {

			hrFormCacheModel.trainingFeedbackRemark = null;
		}

		hrFormCacheModel.exitInterviewStatus = getExitInterviewStatus();

		hrFormCacheModel.exitInterviewRemark = getExitInterviewRemark();

		String exitInterviewRemark = hrFormCacheModel.exitInterviewRemark;

		if ((exitInterviewRemark != null) &&
			(exitInterviewRemark.length() == 0)) {

			hrFormCacheModel.exitInterviewRemark = null;
		}

		hrFormCacheModel.employeeDirectoryStatus = getEmployeeDirectoryStatus();

		hrFormCacheModel.employeeDirectoryRemark = getEmployeeDirectoryRemark();

		String employeeDirectoryRemark =
			hrFormCacheModel.employeeDirectoryRemark;

		if ((employeeDirectoryRemark != null) &&
			(employeeDirectoryRemark.length() == 0)) {

			hrFormCacheModel.employeeDirectoryRemark = null;
		}

		hrFormCacheModel.lmsStatus = getLmsStatus();

		hrFormCacheModel.lmsRemark = getLmsRemark();

		String lmsRemark = hrFormCacheModel.lmsRemark;

		if ((lmsRemark != null) && (lmsRemark.length() == 0)) {
			hrFormCacheModel.lmsRemark = null;
		}

		hrFormCacheModel.vantageCircleStatus = getVantageCircleStatus();

		hrFormCacheModel.vantageCircleRemark = getVantageCircleRemark();

		String vantageCircleRemark = hrFormCacheModel.vantageCircleRemark;

		if ((vantageCircleRemark != null) &&
			(vantageCircleRemark.length() == 0)) {

			hrFormCacheModel.vantageCircleRemark = null;
		}

		hrFormCacheModel.birthdaySynergyStatus = getBirthdaySynergyStatus();

		hrFormCacheModel.birthdaySynergyRemark = getBirthdaySynergyRemark();

		String birthdaySynergyRemark = hrFormCacheModel.birthdaySynergyRemark;

		if ((birthdaySynergyRemark != null) &&
			(birthdaySynergyRemark.length() == 0)) {

			hrFormCacheModel.birthdaySynergyRemark = null;
		}

		hrFormCacheModel.experienceLetterStatus = getExperienceLetterStatus();

		hrFormCacheModel.experienceLetterRemark = getExperienceLetterRemark();

		String experienceLetterRemark = hrFormCacheModel.experienceLetterRemark;

		if ((experienceLetterRemark != null) &&
			(experienceLetterRemark.length() == 0)) {

			hrFormCacheModel.experienceLetterRemark = null;
		}

		hrFormCacheModel.ndaFormStatus = getNdaFormStatus();

		hrFormCacheModel.ndaFormRemark = getNdaFormRemark();

		String ndaFormRemark = hrFormCacheModel.ndaFormRemark;

		if ((ndaFormRemark != null) && (ndaFormRemark.length() == 0)) {
			hrFormCacheModel.ndaFormRemark = null;
		}

		hrFormCacheModel.separationDocumentStatus =
			getSeparationDocumentStatus();

		hrFormCacheModel.separationDocumentRemark =
			getSeparationDocumentRemark();

		String separationDocumentRemark =
			hrFormCacheModel.separationDocumentRemark;

		if ((separationDocumentRemark != null) &&
			(separationDocumentRemark.length() == 0)) {

			hrFormCacheModel.separationDocumentRemark = null;
		}

		hrFormCacheModel.trainingAgreementAmt = getTrainingAgreementAmt();

		String trainingAgreementAmt = hrFormCacheModel.trainingAgreementAmt;

		if ((trainingAgreementAmt != null) &&
			(trainingAgreementAmt.length() == 0)) {

			hrFormCacheModel.trainingAgreementAmt = null;
		}

		hrFormCacheModel.trainingAgreementStatus = getTrainingAgreementStatus();

		hrFormCacheModel.recoverableBonusAmt = getRecoverableBonusAmt();

		String recoverableBonusAmt = hrFormCacheModel.recoverableBonusAmt;

		if ((recoverableBonusAmt != null) &&
			(recoverableBonusAmt.length() == 0)) {

			hrFormCacheModel.recoverableBonusAmt = null;
		}

		hrFormCacheModel.recoverableBonusStatus = getRecoverableBonusStatus();

		hrFormCacheModel.noticePeriodRecoveryAmt = getNoticePeriodRecoveryAmt();

		String noticePeriodRecoveryAmt =
			hrFormCacheModel.noticePeriodRecoveryAmt;

		if ((noticePeriodRecoveryAmt != null) &&
			(noticePeriodRecoveryAmt.length() == 0)) {

			hrFormCacheModel.noticePeriodRecoveryAmt = null;
		}

		hrFormCacheModel.noticePeriodRecoveryStatus =
			getNoticePeriodRecoveryStatus();

		hrFormCacheModel.leavesMonth1 = getLeavesMonth1();

		String leavesMonth1 = hrFormCacheModel.leavesMonth1;

		if ((leavesMonth1 != null) && (leavesMonth1.length() == 0)) {
			hrFormCacheModel.leavesMonth1 = null;
		}

		hrFormCacheModel.leaveDaysMonth1 = getLeaveDaysMonth1();

		String leaveDaysMonth1 = hrFormCacheModel.leaveDaysMonth1;

		if ((leaveDaysMonth1 != null) && (leaveDaysMonth1.length() == 0)) {
			hrFormCacheModel.leaveDaysMonth1 = null;
		}

		hrFormCacheModel.leaveDateMonth1 = getLeaveDateMonth1();

		String leaveDateMonth1 = hrFormCacheModel.leaveDateMonth1;

		if ((leaveDateMonth1 != null) && (leaveDateMonth1.length() == 0)) {
			hrFormCacheModel.leaveDateMonth1 = null;
		}

		hrFormCacheModel.leavesMonth2 = getLeavesMonth2();

		String leavesMonth2 = hrFormCacheModel.leavesMonth2;

		if ((leavesMonth2 != null) && (leavesMonth2.length() == 0)) {
			hrFormCacheModel.leavesMonth2 = null;
		}

		hrFormCacheModel.leaveDaysMonth2 = getLeaveDaysMonth2();

		String leaveDaysMonth2 = hrFormCacheModel.leaveDaysMonth2;

		if ((leaveDaysMonth2 != null) && (leaveDaysMonth2.length() == 0)) {
			hrFormCacheModel.leaveDaysMonth2 = null;
		}

		hrFormCacheModel.leaveDateMonth2 = getLeaveDateMonth2();

		String leaveDateMonth2 = hrFormCacheModel.leaveDateMonth2;

		if ((leaveDateMonth2 != null) && (leaveDateMonth2.length() == 0)) {
			hrFormCacheModel.leaveDateMonth2 = null;
		}

		hrFormCacheModel.leavesMonth3 = getLeavesMonth3();

		String leavesMonth3 = hrFormCacheModel.leavesMonth3;

		if ((leavesMonth3 != null) && (leavesMonth3.length() == 0)) {
			hrFormCacheModel.leavesMonth3 = null;
		}

		hrFormCacheModel.leaveDaysMonth3 = getLeaveDaysMonth3();

		String leaveDaysMonth3 = hrFormCacheModel.leaveDaysMonth3;

		if ((leaveDaysMonth3 != null) && (leaveDaysMonth3.length() == 0)) {
			hrFormCacheModel.leaveDaysMonth3 = null;
		}

		hrFormCacheModel.leaveDateMonth3 = getLeaveDateMonth3();

		String leaveDateMonth3 = hrFormCacheModel.leaveDateMonth3;

		if ((leaveDateMonth3 != null) && (leaveDateMonth3.length() == 0)) {
			hrFormCacheModel.leaveDateMonth3 = null;
		}

		hrFormCacheModel.lopMonth1 = getLopMonth1();

		String lopMonth1 = hrFormCacheModel.lopMonth1;

		if ((lopMonth1 != null) && (lopMonth1.length() == 0)) {
			hrFormCacheModel.lopMonth1 = null;
		}

		hrFormCacheModel.lopDaysMonth1 = getLopDaysMonth1();

		String lopDaysMonth1 = hrFormCacheModel.lopDaysMonth1;

		if ((lopDaysMonth1 != null) && (lopDaysMonth1.length() == 0)) {
			hrFormCacheModel.lopDaysMonth1 = null;
		}

		hrFormCacheModel.lopDateMonth1 = getLopDateMonth1();

		String lopDateMonth1 = hrFormCacheModel.lopDateMonth1;

		if ((lopDateMonth1 != null) && (lopDateMonth1.length() == 0)) {
			hrFormCacheModel.lopDateMonth1 = null;
		}

		hrFormCacheModel.lopMonth2 = getLopMonth2();

		String lopMonth2 = hrFormCacheModel.lopMonth2;

		if ((lopMonth2 != null) && (lopMonth2.length() == 0)) {
			hrFormCacheModel.lopMonth2 = null;
		}

		hrFormCacheModel.lopDaysMonth2 = getLopDaysMonth2();

		String lopDaysMonth2 = hrFormCacheModel.lopDaysMonth2;

		if ((lopDaysMonth2 != null) && (lopDaysMonth2.length() == 0)) {
			hrFormCacheModel.lopDaysMonth2 = null;
		}

		hrFormCacheModel.lopDateMonth2 = getLopDateMonth2();

		String lopDateMonth2 = hrFormCacheModel.lopDateMonth2;

		if ((lopDateMonth2 != null) && (lopDateMonth2.length() == 0)) {
			hrFormCacheModel.lopDateMonth2 = null;
		}

		hrFormCacheModel.lopMonth3 = getLopMonth3();

		String lopMonth3 = hrFormCacheModel.lopMonth3;

		if ((lopMonth3 != null) && (lopMonth3.length() == 0)) {
			hrFormCacheModel.lopMonth3 = null;
		}

		hrFormCacheModel.lopDaysMonth3 = getLopDaysMonth3();

		String lopDaysMonth3 = hrFormCacheModel.lopDaysMonth3;

		if ((lopDaysMonth3 != null) && (lopDaysMonth3.length() == 0)) {
			hrFormCacheModel.lopDaysMonth3 = null;
		}

		hrFormCacheModel.lopDateMonth3 = getLopDateMonth3();

		String lopDateMonth3 = hrFormCacheModel.lopDateMonth3;

		if ((lopDateMonth3 != null) && (lopDateMonth3.length() == 0)) {
			hrFormCacheModel.lopDateMonth3 = null;
		}

		hrFormCacheModel.earnedLeaveBalance = getEarnedLeaveBalance();

		String earnedLeaveBalance = hrFormCacheModel.earnedLeaveBalance;

		if ((earnedLeaveBalance != null) &&
			(earnedLeaveBalance.length() == 0)) {

			hrFormCacheModel.earnedLeaveBalance = null;
		}

		hrFormCacheModel.hrRemark = getHrRemark();

		String hrRemark = hrFormCacheModel.hrRemark;

		if ((hrRemark != null) && (hrRemark.length() == 0)) {
			hrFormCacheModel.hrRemark = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			hrFormCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			hrFormCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return hrFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HrForm, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HrForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HrForm, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((HrForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HrForm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HrForm.class, ModelWrapper.class);

	}

	private long _id;
	private long _exitId;
	private long _foodOption;
	private String _foodOptionRemark;
	private int _inductionFeedbackStatus;
	private String _inductionFeedbackRemark;
	private int _inductionQuizStatus;
	private String _inductionQuizRemark;
	private int _trainingFeedbackStatus;
	private String _trainingFeedbackRemark;
	private int _exitInterviewStatus;
	private String _exitInterviewRemark;
	private int _employeeDirectoryStatus;
	private String _employeeDirectoryRemark;
	private int _lmsStatus;
	private String _lmsRemark;
	private int _vantageCircleStatus;
	private String _vantageCircleRemark;
	private int _birthdaySynergyStatus;
	private String _birthdaySynergyRemark;
	private int _experienceLetterStatus;
	private String _experienceLetterRemark;
	private int _ndaFormStatus;
	private String _ndaFormRemark;
	private int _separationDocumentStatus;
	private String _separationDocumentRemark;
	private String _trainingAgreementAmt;
	private int _trainingAgreementStatus;
	private String _recoverableBonusAmt;
	private int _recoverableBonusStatus;
	private String _noticePeriodRecoveryAmt;
	private int _noticePeriodRecoveryStatus;
	private String _leavesMonth1;
	private String _leaveDaysMonth1;
	private String _leaveDateMonth1;
	private String _leavesMonth2;
	private String _leaveDaysMonth2;
	private String _leaveDateMonth2;
	private String _leavesMonth3;
	private String _leaveDaysMonth3;
	private String _leaveDateMonth3;
	private String _lopMonth1;
	private String _lopDaysMonth1;
	private String _lopDateMonth1;
	private String _lopMonth2;
	private String _lopDaysMonth2;
	private String _lopDateMonth2;
	private String _lopMonth3;
	private String _lopDaysMonth3;
	private String _lopDateMonth3;
	private String _earnedLeaveBalance;
	private String _hrRemark;
	private Date _updatedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<HrForm, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HrForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("exitId", _exitId);
		_columnOriginalValues.put("foodOption", _foodOption);
		_columnOriginalValues.put("foodOptionRemark", _foodOptionRemark);
		_columnOriginalValues.put(
			"inductionFeedbackStatus", _inductionFeedbackStatus);
		_columnOriginalValues.put(
			"inductionFeedbackRemark", _inductionFeedbackRemark);
		_columnOriginalValues.put("inductionQuizStatus", _inductionQuizStatus);
		_columnOriginalValues.put("inductionQuizRemark", _inductionQuizRemark);
		_columnOriginalValues.put(
			"trainingFeedbackStatus", _trainingFeedbackStatus);
		_columnOriginalValues.put(
			"trainingFeedbackRemark", _trainingFeedbackRemark);
		_columnOriginalValues.put("exitInterviewStatus", _exitInterviewStatus);
		_columnOriginalValues.put("exitInterviewRemark", _exitInterviewRemark);
		_columnOriginalValues.put(
			"employeeDirectoryStatus", _employeeDirectoryStatus);
		_columnOriginalValues.put(
			"employeeDirectoryRemark", _employeeDirectoryRemark);
		_columnOriginalValues.put("lmsStatus", _lmsStatus);
		_columnOriginalValues.put("lmsRemark", _lmsRemark);
		_columnOriginalValues.put("vantageCircleStatus", _vantageCircleStatus);
		_columnOriginalValues.put("vantageCircleRemark", _vantageCircleRemark);
		_columnOriginalValues.put(
			"birthdaySynergyStatus", _birthdaySynergyStatus);
		_columnOriginalValues.put(
			"birthdaySynergyRemark", _birthdaySynergyRemark);
		_columnOriginalValues.put(
			"experienceLetterStatus", _experienceLetterStatus);
		_columnOriginalValues.put(
			"experienceLetterRemark", _experienceLetterRemark);
		_columnOriginalValues.put("ndaFormStatus", _ndaFormStatus);
		_columnOriginalValues.put("ndaFormRemark", _ndaFormRemark);
		_columnOriginalValues.put(
			"separationDocumentStatus", _separationDocumentStatus);
		_columnOriginalValues.put(
			"separationDocumentRemark", _separationDocumentRemark);
		_columnOriginalValues.put(
			"trainingAgreementAmt", _trainingAgreementAmt);
		_columnOriginalValues.put(
			"trainingAgreementStatus", _trainingAgreementStatus);
		_columnOriginalValues.put("recoverableBonusAmt", _recoverableBonusAmt);
		_columnOriginalValues.put(
			"recoverableBonusStatus", _recoverableBonusStatus);
		_columnOriginalValues.put(
			"noticePeriodRecoveryAmt", _noticePeriodRecoveryAmt);
		_columnOriginalValues.put(
			"noticePeriodRecoveryStatus", _noticePeriodRecoveryStatus);
		_columnOriginalValues.put("leavesMonth1", _leavesMonth1);
		_columnOriginalValues.put("leaveDaysMonth1", _leaveDaysMonth1);
		_columnOriginalValues.put("leaveDateMonth1", _leaveDateMonth1);
		_columnOriginalValues.put("leavesMonth2", _leavesMonth2);
		_columnOriginalValues.put("leaveDaysMonth2", _leaveDaysMonth2);
		_columnOriginalValues.put("leaveDateMonth2", _leaveDateMonth2);
		_columnOriginalValues.put("leavesMonth3", _leavesMonth3);
		_columnOriginalValues.put("leaveDaysMonth3", _leaveDaysMonth3);
		_columnOriginalValues.put("leaveDateMonth3", _leaveDateMonth3);
		_columnOriginalValues.put("lopMonth1", _lopMonth1);
		_columnOriginalValues.put("lopDaysMonth1", _lopDaysMonth1);
		_columnOriginalValues.put("lopDateMonth1", _lopDateMonth1);
		_columnOriginalValues.put("lopMonth2", _lopMonth2);
		_columnOriginalValues.put("lopDaysMonth2", _lopDaysMonth2);
		_columnOriginalValues.put("lopDateMonth2", _lopDateMonth2);
		_columnOriginalValues.put("lopMonth3", _lopMonth3);
		_columnOriginalValues.put("lopDaysMonth3", _lopDaysMonth3);
		_columnOriginalValues.put("lopDateMonth3", _lopDateMonth3);
		_columnOriginalValues.put("earnedLeaveBalance", _earnedLeaveBalance);
		_columnOriginalValues.put("hrRemark", _hrRemark);
		_columnOriginalValues.put("updatedDate", _updatedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("exitId", 2L);

		columnBitmasks.put("foodOption", 4L);

		columnBitmasks.put("foodOptionRemark", 8L);

		columnBitmasks.put("inductionFeedbackStatus", 16L);

		columnBitmasks.put("inductionFeedbackRemark", 32L);

		columnBitmasks.put("inductionQuizStatus", 64L);

		columnBitmasks.put("inductionQuizRemark", 128L);

		columnBitmasks.put("trainingFeedbackStatus", 256L);

		columnBitmasks.put("trainingFeedbackRemark", 512L);

		columnBitmasks.put("exitInterviewStatus", 1024L);

		columnBitmasks.put("exitInterviewRemark", 2048L);

		columnBitmasks.put("employeeDirectoryStatus", 4096L);

		columnBitmasks.put("employeeDirectoryRemark", 8192L);

		columnBitmasks.put("lmsStatus", 16384L);

		columnBitmasks.put("lmsRemark", 32768L);

		columnBitmasks.put("vantageCircleStatus", 65536L);

		columnBitmasks.put("vantageCircleRemark", 131072L);

		columnBitmasks.put("birthdaySynergyStatus", 262144L);

		columnBitmasks.put("birthdaySynergyRemark", 524288L);

		columnBitmasks.put("experienceLetterStatus", 1048576L);

		columnBitmasks.put("experienceLetterRemark", 2097152L);

		columnBitmasks.put("ndaFormStatus", 4194304L);

		columnBitmasks.put("ndaFormRemark", 8388608L);

		columnBitmasks.put("separationDocumentStatus", 16777216L);

		columnBitmasks.put("separationDocumentRemark", 33554432L);

		columnBitmasks.put("trainingAgreementAmt", 67108864L);

		columnBitmasks.put("trainingAgreementStatus", 134217728L);

		columnBitmasks.put("recoverableBonusAmt", 268435456L);

		columnBitmasks.put("recoverableBonusStatus", 536870912L);

		columnBitmasks.put("noticePeriodRecoveryAmt", 1073741824L);

		columnBitmasks.put("noticePeriodRecoveryStatus", 2147483648L);

		columnBitmasks.put("leavesMonth1", 4294967296L);

		columnBitmasks.put("leaveDaysMonth1", 8589934592L);

		columnBitmasks.put("leaveDateMonth1", 17179869184L);

		columnBitmasks.put("leavesMonth2", 34359738368L);

		columnBitmasks.put("leaveDaysMonth2", 68719476736L);

		columnBitmasks.put("leaveDateMonth2", 137438953472L);

		columnBitmasks.put("leavesMonth3", 274877906944L);

		columnBitmasks.put("leaveDaysMonth3", 549755813888L);

		columnBitmasks.put("leaveDateMonth3", 1099511627776L);

		columnBitmasks.put("lopMonth1", 2199023255552L);

		columnBitmasks.put("lopDaysMonth1", 4398046511104L);

		columnBitmasks.put("lopDateMonth1", 8796093022208L);

		columnBitmasks.put("lopMonth2", 17592186044416L);

		columnBitmasks.put("lopDaysMonth2", 35184372088832L);

		columnBitmasks.put("lopDateMonth2", 70368744177664L);

		columnBitmasks.put("lopMonth3", 140737488355328L);

		columnBitmasks.put("lopDaysMonth3", 281474976710656L);

		columnBitmasks.put("lopDateMonth3", 562949953421312L);

		columnBitmasks.put("earnedLeaveBalance", 1125899906842624L);

		columnBitmasks.put("hrRemark", 2251799813685248L);

		columnBitmasks.put("updatedDate", 4503599627370496L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HrForm _escapedModel;

}