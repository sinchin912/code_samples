/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.RecoveryReimbursement;
import com.trantorinc.synergy.notice.core.model.RecoveryReimbursementModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RecoveryReimbursement service. Represents a row in the &quot;NOTICE_RecoveryReimbursement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RecoveryReimbursementModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecoveryReimbursementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RecoveryReimbursementImpl
 * @generated
 */
public class RecoveryReimbursementModelImpl
	extends BaseModelImpl<RecoveryReimbursement>
	implements RecoveryReimbursementModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a recovery reimbursement model instance should use the <code>RecoveryReimbursement</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_RecoveryReimbursement";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"departmentFormId", Types.BIGINT},
		{"department", Types.INTEGER}, {"recoveryType", Types.BOOLEAN},
		{"recoveryItem", Types.VARCHAR}, {"recoveryAmount", Types.VARCHAR},
		{"recoveryStatus", Types.INTEGER}, {"reimbursementItem", Types.VARCHAR},
		{"reimbursementAmount", Types.VARCHAR},
		{"reimbursementStatus", Types.INTEGER}, {"approved", Types.BOOLEAN},
		{"comment_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("departmentFormId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("department", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("recoveryType", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("recoveryItem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recoveryAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recoveryStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reimbursementItem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reimbursementAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reimbursementStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_RecoveryReimbursement (id_ LONG not null primary key,departmentFormId LONG,department INTEGER,recoveryType BOOLEAN,recoveryItem VARCHAR(500) null,recoveryAmount VARCHAR(75) null,recoveryStatus INTEGER,reimbursementItem VARCHAR(500) null,reimbursementAmount VARCHAR(75) null,reimbursementStatus INTEGER,approved BOOLEAN,comment_ VARCHAR(500) null)";

	public static final String TABLE_SQL_DROP =
		"drop table NOTICE_RecoveryReimbursement";

	public static final String ORDER_BY_JPQL =
		" ORDER BY recoveryReimbursement.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NOTICE_RecoveryReimbursement.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RecoveryReimbursementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RecoveryReimbursement.class;
	}

	@Override
	public String getModelClassName() {
		return RecoveryReimbursement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RecoveryReimbursement, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RecoveryReimbursement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RecoveryReimbursement, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RecoveryReimbursement)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RecoveryReimbursement, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RecoveryReimbursement, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RecoveryReimbursement)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RecoveryReimbursement, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RecoveryReimbursement, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RecoveryReimbursement, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RecoveryReimbursement, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RecoveryReimbursement, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RecoveryReimbursement, Object>>();
		Map<String, BiConsumer<RecoveryReimbursement, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<RecoveryReimbursement, ?>>();

		attributeGetterFunctions.put("id", RecoveryReimbursement::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<RecoveryReimbursement, Long>)
				RecoveryReimbursement::setId);
		attributeGetterFunctions.put(
			"departmentFormId", RecoveryReimbursement::getDepartmentFormId);
		attributeSetterBiConsumers.put(
			"departmentFormId",
			(BiConsumer<RecoveryReimbursement, Long>)
				RecoveryReimbursement::setDepartmentFormId);
		attributeGetterFunctions.put(
			"department", RecoveryReimbursement::getDepartment);
		attributeSetterBiConsumers.put(
			"department",
			(BiConsumer<RecoveryReimbursement, Integer>)
				RecoveryReimbursement::setDepartment);
		attributeGetterFunctions.put(
			"recoveryType", RecoveryReimbursement::getRecoveryType);
		attributeSetterBiConsumers.put(
			"recoveryType",
			(BiConsumer<RecoveryReimbursement, Boolean>)
				RecoveryReimbursement::setRecoveryType);
		attributeGetterFunctions.put(
			"recoveryItem", RecoveryReimbursement::getRecoveryItem);
		attributeSetterBiConsumers.put(
			"recoveryItem",
			(BiConsumer<RecoveryReimbursement, String>)
				RecoveryReimbursement::setRecoveryItem);
		attributeGetterFunctions.put(
			"recoveryAmount", RecoveryReimbursement::getRecoveryAmount);
		attributeSetterBiConsumers.put(
			"recoveryAmount",
			(BiConsumer<RecoveryReimbursement, String>)
				RecoveryReimbursement::setRecoveryAmount);
		attributeGetterFunctions.put(
			"recoveryStatus", RecoveryReimbursement::getRecoveryStatus);
		attributeSetterBiConsumers.put(
			"recoveryStatus",
			(BiConsumer<RecoveryReimbursement, Integer>)
				RecoveryReimbursement::setRecoveryStatus);
		attributeGetterFunctions.put(
			"reimbursementItem", RecoveryReimbursement::getReimbursementItem);
		attributeSetterBiConsumers.put(
			"reimbursementItem",
			(BiConsumer<RecoveryReimbursement, String>)
				RecoveryReimbursement::setReimbursementItem);
		attributeGetterFunctions.put(
			"reimbursementAmount",
			RecoveryReimbursement::getReimbursementAmount);
		attributeSetterBiConsumers.put(
			"reimbursementAmount",
			(BiConsumer<RecoveryReimbursement, String>)
				RecoveryReimbursement::setReimbursementAmount);
		attributeGetterFunctions.put(
			"reimbursementStatus",
			RecoveryReimbursement::getReimbursementStatus);
		attributeSetterBiConsumers.put(
			"reimbursementStatus",
			(BiConsumer<RecoveryReimbursement, Integer>)
				RecoveryReimbursement::setReimbursementStatus);
		attributeGetterFunctions.put(
			"approved", RecoveryReimbursement::getApproved);
		attributeSetterBiConsumers.put(
			"approved",
			(BiConsumer<RecoveryReimbursement, Boolean>)
				RecoveryReimbursement::setApproved);
		attributeGetterFunctions.put(
			"comment", RecoveryReimbursement::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<RecoveryReimbursement, String>)
				RecoveryReimbursement::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getDepartmentFormId() {
		return _departmentFormId;
	}

	@Override
	public void setDepartmentFormId(long departmentFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_departmentFormId = departmentFormId;
	}

	@Override
	public int getDepartment() {
		return _department;
	}

	@Override
	public void setDepartment(int department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	@Override
	public boolean getRecoveryType() {
		return _recoveryType;
	}

	@Override
	public boolean isRecoveryType() {
		return _recoveryType;
	}

	@Override
	public void setRecoveryType(boolean recoveryType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoveryType = recoveryType;
	}

	@Override
	public String getRecoveryItem() {
		if (_recoveryItem == null) {
			return "";
		}
		else {
			return _recoveryItem;
		}
	}

	@Override
	public void setRecoveryItem(String recoveryItem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoveryItem = recoveryItem;
	}

	@Override
	public String getRecoveryAmount() {
		if (_recoveryAmount == null) {
			return "";
		}
		else {
			return _recoveryAmount;
		}
	}

	@Override
	public void setRecoveryAmount(String recoveryAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoveryAmount = recoveryAmount;
	}

	@Override
	public int getRecoveryStatus() {
		return _recoveryStatus;
	}

	@Override
	public void setRecoveryStatus(int recoveryStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recoveryStatus = recoveryStatus;
	}

	@Override
	public String getReimbursementItem() {
		if (_reimbursementItem == null) {
			return "";
		}
		else {
			return _reimbursementItem;
		}
	}

	@Override
	public void setReimbursementItem(String reimbursementItem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reimbursementItem = reimbursementItem;
	}

	@Override
	public String getReimbursementAmount() {
		if (_reimbursementAmount == null) {
			return "";
		}
		else {
			return _reimbursementAmount;
		}
	}

	@Override
	public void setReimbursementAmount(String reimbursementAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reimbursementAmount = reimbursementAmount;
	}

	@Override
	public int getReimbursementStatus() {
		return _reimbursementStatus;
	}

	@Override
	public void setReimbursementStatus(int reimbursementStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reimbursementStatus = reimbursementStatus;
	}

	@Override
	public boolean getApproved() {
		return _approved;
	}

	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approved = approved;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RecoveryReimbursement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RecoveryReimbursement toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RecoveryReimbursement>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecoveryReimbursementImpl recoveryReimbursementImpl =
			new RecoveryReimbursementImpl();

		recoveryReimbursementImpl.setId(getId());
		recoveryReimbursementImpl.setDepartmentFormId(getDepartmentFormId());
		recoveryReimbursementImpl.setDepartment(getDepartment());
		recoveryReimbursementImpl.setRecoveryType(isRecoveryType());
		recoveryReimbursementImpl.setRecoveryItem(getRecoveryItem());
		recoveryReimbursementImpl.setRecoveryAmount(getRecoveryAmount());
		recoveryReimbursementImpl.setRecoveryStatus(getRecoveryStatus());
		recoveryReimbursementImpl.setReimbursementItem(getReimbursementItem());
		recoveryReimbursementImpl.setReimbursementAmount(
			getReimbursementAmount());
		recoveryReimbursementImpl.setReimbursementStatus(
			getReimbursementStatus());
		recoveryReimbursementImpl.setApproved(isApproved());
		recoveryReimbursementImpl.setComment(getComment());

		recoveryReimbursementImpl.resetOriginalValues();

		return recoveryReimbursementImpl;
	}

	@Override
	public RecoveryReimbursement cloneWithOriginalValues() {
		RecoveryReimbursementImpl recoveryReimbursementImpl =
			new RecoveryReimbursementImpl();

		recoveryReimbursementImpl.setId(
			this.<Long>getColumnOriginalValue("id_"));
		recoveryReimbursementImpl.setDepartmentFormId(
			this.<Long>getColumnOriginalValue("departmentFormId"));
		recoveryReimbursementImpl.setDepartment(
			this.<Integer>getColumnOriginalValue("department"));
		recoveryReimbursementImpl.setRecoveryType(
			this.<Boolean>getColumnOriginalValue("recoveryType"));
		recoveryReimbursementImpl.setRecoveryItem(
			this.<String>getColumnOriginalValue("recoveryItem"));
		recoveryReimbursementImpl.setRecoveryAmount(
			this.<String>getColumnOriginalValue("recoveryAmount"));
		recoveryReimbursementImpl.setRecoveryStatus(
			this.<Integer>getColumnOriginalValue("recoveryStatus"));
		recoveryReimbursementImpl.setReimbursementItem(
			this.<String>getColumnOriginalValue("reimbursementItem"));
		recoveryReimbursementImpl.setReimbursementAmount(
			this.<String>getColumnOriginalValue("reimbursementAmount"));
		recoveryReimbursementImpl.setReimbursementStatus(
			this.<Integer>getColumnOriginalValue("reimbursementStatus"));
		recoveryReimbursementImpl.setApproved(
			this.<Boolean>getColumnOriginalValue("approved"));
		recoveryReimbursementImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));

		return recoveryReimbursementImpl;
	}

	@Override
	public int compareTo(RecoveryReimbursement recoveryReimbursement) {
		long primaryKey = recoveryReimbursement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RecoveryReimbursement)) {
			return false;
		}

		RecoveryReimbursement recoveryReimbursement =
			(RecoveryReimbursement)object;

		long primaryKey = recoveryReimbursement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RecoveryReimbursement> toCacheModel() {
		RecoveryReimbursementCacheModel recoveryReimbursementCacheModel =
			new RecoveryReimbursementCacheModel();

		recoveryReimbursementCacheModel.id = getId();

		recoveryReimbursementCacheModel.departmentFormId =
			getDepartmentFormId();

		recoveryReimbursementCacheModel.department = getDepartment();

		recoveryReimbursementCacheModel.recoveryType = isRecoveryType();

		recoveryReimbursementCacheModel.recoveryItem = getRecoveryItem();

		String recoveryItem = recoveryReimbursementCacheModel.recoveryItem;

		if ((recoveryItem != null) && (recoveryItem.length() == 0)) {
			recoveryReimbursementCacheModel.recoveryItem = null;
		}

		recoveryReimbursementCacheModel.recoveryAmount = getRecoveryAmount();

		String recoveryAmount = recoveryReimbursementCacheModel.recoveryAmount;

		if ((recoveryAmount != null) && (recoveryAmount.length() == 0)) {
			recoveryReimbursementCacheModel.recoveryAmount = null;
		}

		recoveryReimbursementCacheModel.recoveryStatus = getRecoveryStatus();

		recoveryReimbursementCacheModel.reimbursementItem =
			getReimbursementItem();

		String reimbursementItem =
			recoveryReimbursementCacheModel.reimbursementItem;

		if ((reimbursementItem != null) && (reimbursementItem.length() == 0)) {
			recoveryReimbursementCacheModel.reimbursementItem = null;
		}

		recoveryReimbursementCacheModel.reimbursementAmount =
			getReimbursementAmount();

		String reimbursementAmount =
			recoveryReimbursementCacheModel.reimbursementAmount;

		if ((reimbursementAmount != null) &&
			(reimbursementAmount.length() == 0)) {

			recoveryReimbursementCacheModel.reimbursementAmount = null;
		}

		recoveryReimbursementCacheModel.reimbursementStatus =
			getReimbursementStatus();

		recoveryReimbursementCacheModel.approved = isApproved();

		recoveryReimbursementCacheModel.comment = getComment();

		String comment = recoveryReimbursementCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			recoveryReimbursementCacheModel.comment = null;
		}

		return recoveryReimbursementCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RecoveryReimbursement, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RecoveryReimbursement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RecoveryReimbursement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RecoveryReimbursement)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RecoveryReimbursement>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RecoveryReimbursement.class, ModelWrapper.class);

	}

	private long _id;
	private long _departmentFormId;
	private int _department;
	private boolean _recoveryType;
	private String _recoveryItem;
	private String _recoveryAmount;
	private int _recoveryStatus;
	private String _reimbursementItem;
	private String _reimbursementAmount;
	private int _reimbursementStatus;
	private boolean _approved;
	private String _comment;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RecoveryReimbursement, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RecoveryReimbursement)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("departmentFormId", _departmentFormId);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("recoveryType", _recoveryType);
		_columnOriginalValues.put("recoveryItem", _recoveryItem);
		_columnOriginalValues.put("recoveryAmount", _recoveryAmount);
		_columnOriginalValues.put("recoveryStatus", _recoveryStatus);
		_columnOriginalValues.put("reimbursementItem", _reimbursementItem);
		_columnOriginalValues.put("reimbursementAmount", _reimbursementAmount);
		_columnOriginalValues.put("reimbursementStatus", _reimbursementStatus);
		_columnOriginalValues.put("approved", _approved);
		_columnOriginalValues.put("comment_", _comment);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");
		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("departmentFormId", 2L);

		columnBitmasks.put("department", 4L);

		columnBitmasks.put("recoveryType", 8L);

		columnBitmasks.put("recoveryItem", 16L);

		columnBitmasks.put("recoveryAmount", 32L);

		columnBitmasks.put("recoveryStatus", 64L);

		columnBitmasks.put("reimbursementItem", 128L);

		columnBitmasks.put("reimbursementAmount", 256L);

		columnBitmasks.put("reimbursementStatus", 512L);

		columnBitmasks.put("approved", 1024L);

		columnBitmasks.put("comment_", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RecoveryReimbursement _escapedModel;

}