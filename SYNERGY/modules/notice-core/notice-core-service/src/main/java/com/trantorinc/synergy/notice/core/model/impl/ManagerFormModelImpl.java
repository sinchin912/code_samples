/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.ManagerForm;
import com.trantorinc.synergy.notice.core.model.ManagerFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManagerForm service. Represents a row in the &quot;NOTICE_ManagerForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManagerFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManagerFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManagerFormImpl
 * @generated
 */
public class ManagerFormModelImpl
	extends BaseModelImpl<ManagerForm> implements ManagerFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manager form model instance should use the <code>ManagerForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_ManagerForm";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"exitId", Types.BIGINT},
		{"ticketNo", Types.INTEGER}, {"ticketNoRemark", Types.VARCHAR},
		{"separationDocument", Types.INTEGER},
		{"separationDocumentRemark", Types.VARCHAR},
		{"updatedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("exitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ticketNoRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("separationDocument", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("separationDocumentRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_ManagerForm (id_ LONG not null primary key,exitId LONG,ticketNo INTEGER,ticketNoRemark VARCHAR(200) null,separationDocument INTEGER,separationDocumentRemark VARCHAR(200) null,updatedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table NOTICE_ManagerForm";

	public static final String ORDER_BY_JPQL = " ORDER BY managerForm.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NOTICE_ManagerForm.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManagerFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManagerForm.class;
	}

	@Override
	public String getModelClassName() {
		return ManagerForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManagerForm, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ManagerForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManagerForm, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ManagerForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManagerForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManagerForm, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManagerForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManagerForm, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManagerForm, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ManagerForm, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ManagerForm, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ManagerForm, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ManagerForm, Object>>();
		Map<String, BiConsumer<ManagerForm, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ManagerForm, ?>>();

		attributeGetterFunctions.put("id", ManagerForm::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<ManagerForm, Long>)ManagerForm::setId);
		attributeGetterFunctions.put("exitId", ManagerForm::getExitId);
		attributeSetterBiConsumers.put(
			"exitId", (BiConsumer<ManagerForm, Long>)ManagerForm::setExitId);
		attributeGetterFunctions.put("ticketNo", ManagerForm::getTicketNo);
		attributeSetterBiConsumers.put(
			"ticketNo",
			(BiConsumer<ManagerForm, Integer>)ManagerForm::setTicketNo);
		attributeGetterFunctions.put(
			"ticketNoRemark", ManagerForm::getTicketNoRemark);
		attributeSetterBiConsumers.put(
			"ticketNoRemark",
			(BiConsumer<ManagerForm, String>)ManagerForm::setTicketNoRemark);
		attributeGetterFunctions.put(
			"separationDocument", ManagerForm::getSeparationDocument);
		attributeSetterBiConsumers.put(
			"separationDocument",
			(BiConsumer<ManagerForm, Integer>)
				ManagerForm::setSeparationDocument);
		attributeGetterFunctions.put(
			"separationDocumentRemark",
			ManagerForm::getSeparationDocumentRemark);
		attributeSetterBiConsumers.put(
			"separationDocumentRemark",
			(BiConsumer<ManagerForm, String>)
				ManagerForm::setSeparationDocumentRemark);
		attributeGetterFunctions.put(
			"updatedDate", ManagerForm::getUpdatedDate);
		attributeSetterBiConsumers.put(
			"updatedDate",
			(BiConsumer<ManagerForm, Date>)ManagerForm::setUpdatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getExitId() {
		return _exitId;
	}

	@Override
	public void setExitId(long exitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitId = exitId;
	}

	@Override
	public int getTicketNo() {
		return _ticketNo;
	}

	@Override
	public void setTicketNo(int ticketNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ticketNo = ticketNo;
	}

	@Override
	public String getTicketNoRemark() {
		if (_ticketNoRemark == null) {
			return "";
		}
		else {
			return _ticketNoRemark;
		}
	}

	@Override
	public void setTicketNoRemark(String ticketNoRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ticketNoRemark = ticketNoRemark;
	}

	@Override
	public int getSeparationDocument() {
		return _separationDocument;
	}

	@Override
	public void setSeparationDocument(int separationDocument) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationDocument = separationDocument;
	}

	@Override
	public String getSeparationDocumentRemark() {
		if (_separationDocumentRemark == null) {
			return "";
		}
		else {
			return _separationDocumentRemark;
		}
	}

	@Override
	public void setSeparationDocumentRemark(String separationDocumentRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationDocumentRemark = separationDocumentRemark;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ManagerForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManagerForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManagerForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManagerFormImpl managerFormImpl = new ManagerFormImpl();

		managerFormImpl.setId(getId());
		managerFormImpl.setExitId(getExitId());
		managerFormImpl.setTicketNo(getTicketNo());
		managerFormImpl.setTicketNoRemark(getTicketNoRemark());
		managerFormImpl.setSeparationDocument(getSeparationDocument());
		managerFormImpl.setSeparationDocumentRemark(
			getSeparationDocumentRemark());
		managerFormImpl.setUpdatedDate(getUpdatedDate());

		managerFormImpl.resetOriginalValues();

		return managerFormImpl;
	}

	@Override
	public ManagerForm cloneWithOriginalValues() {
		ManagerFormImpl managerFormImpl = new ManagerFormImpl();

		managerFormImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		managerFormImpl.setExitId(this.<Long>getColumnOriginalValue("exitId"));
		managerFormImpl.setTicketNo(
			this.<Integer>getColumnOriginalValue("ticketNo"));
		managerFormImpl.setTicketNoRemark(
			this.<String>getColumnOriginalValue("ticketNoRemark"));
		managerFormImpl.setSeparationDocument(
			this.<Integer>getColumnOriginalValue("separationDocument"));
		managerFormImpl.setSeparationDocumentRemark(
			this.<String>getColumnOriginalValue("separationDocumentRemark"));
		managerFormImpl.setUpdatedDate(
			this.<Date>getColumnOriginalValue("updatedDate"));

		return managerFormImpl;
	}

	@Override
	public int compareTo(ManagerForm managerForm) {
		long primaryKey = managerForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManagerForm)) {
			return false;
		}

		ManagerForm managerForm = (ManagerForm)object;

		long primaryKey = managerForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManagerForm> toCacheModel() {
		ManagerFormCacheModel managerFormCacheModel =
			new ManagerFormCacheModel();

		managerFormCacheModel.id = getId();

		managerFormCacheModel.exitId = getExitId();

		managerFormCacheModel.ticketNo = getTicketNo();

		managerFormCacheModel.ticketNoRemark = getTicketNoRemark();

		String ticketNoRemark = managerFormCacheModel.ticketNoRemark;

		if ((ticketNoRemark != null) && (ticketNoRemark.length() == 0)) {
			managerFormCacheModel.ticketNoRemark = null;
		}

		managerFormCacheModel.separationDocument = getSeparationDocument();

		managerFormCacheModel.separationDocumentRemark =
			getSeparationDocumentRemark();

		String separationDocumentRemark =
			managerFormCacheModel.separationDocumentRemark;

		if ((separationDocumentRemark != null) &&
			(separationDocumentRemark.length() == 0)) {

			managerFormCacheModel.separationDocumentRemark = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			managerFormCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			managerFormCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return managerFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManagerForm, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ManagerForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManagerForm, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ManagerForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ManagerForm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ManagerForm.class, ModelWrapper.class);

	}

	private long _id;
	private long _exitId;
	private int _ticketNo;
	private String _ticketNoRemark;
	private int _separationDocument;
	private String _separationDocumentRemark;
	private Date _updatedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ManagerForm, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManagerForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("exitId", _exitId);
		_columnOriginalValues.put("ticketNo", _ticketNo);
		_columnOriginalValues.put("ticketNoRemark", _ticketNoRemark);
		_columnOriginalValues.put("separationDocument", _separationDocument);
		_columnOriginalValues.put(
			"separationDocumentRemark", _separationDocumentRemark);
		_columnOriginalValues.put("updatedDate", _updatedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("exitId", 2L);

		columnBitmasks.put("ticketNo", 4L);

		columnBitmasks.put("ticketNoRemark", 8L);

		columnBitmasks.put("separationDocument", 16L);

		columnBitmasks.put("separationDocumentRemark", 32L);

		columnBitmasks.put("updatedDate", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManagerForm _escapedModel;

}