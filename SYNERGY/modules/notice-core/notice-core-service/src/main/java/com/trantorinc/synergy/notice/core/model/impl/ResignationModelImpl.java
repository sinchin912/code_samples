/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.Resignation;
import com.trantorinc.synergy.notice.core.model.ResignationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Resignation service. Represents a row in the &quot;NOTICE_Resignation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ResignationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResignationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ResignationImpl
 * @generated
 */
public class ResignationModelImpl
	extends BaseModelImpl<Resignation> implements ResignationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a resignation model instance should use the <code>Resignation</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_Resignation";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"ecode", Types.VARCHAR},
		{"account", Types.VARCHAR}, {"managerEmail", Types.VARCHAR},
		{"assigneeEmail", Types.VARCHAR}, {"assigneeTo", Types.BOOLEAN},
		{"alternateEmail", Types.VARCHAR}, {"stateName", Types.VARCHAR},
		{"cityName", Types.VARCHAR}, {"pincode", Types.VARCHAR},
		{"postalAddress", Types.VARCHAR}, {"reason", Types.VARCHAR},
		{"lastWorkingDate", Types.TIMESTAMP},
		{"managerSubmissionDate", Types.TIMESTAMP},
		{"hrSubmissionDate", Types.TIMESTAMP},
		{"withdrawInitiatedDate", Types.TIMESTAMP},
		{"abscondTerminateDate", Types.TIMESTAMP},
		{"separationType", Types.VARCHAR}, {"keyToCompany", Types.VARCHAR},
		{"keyToProject", Types.VARCHAR}, {"rating", Types.VARCHAR},
		{"clientImpact", Types.VARCHAR}, {"keyToRetention", Types.VARCHAR},
		{"reasonNonRetention", Types.VARCHAR},
		{"employeeComment", Types.VARCHAR}, {"hrComment", Types.VARCHAR},
		{"managerComment", Types.VARCHAR},
		{"empWithdrawComment", Types.VARCHAR},
		{"hrWithdrawComment", Types.VARCHAR},
		{"reasonForLeaving", Types.VARCHAR},
		{"reasonForLeavingByHr", Types.VARCHAR},
		{"eligibleForRehire", Types.VARCHAR}, {"otherIssue", Types.VARCHAR},
		{"replacementPlan", Types.VARCHAR},
		{"replacementDetail", Types.VARCHAR}, {"status", Types.INTEGER},
		{"terminationType", Types.VARCHAR}, {"creationDate", Types.TIMESTAMP},
		{"initiatedDate", Types.TIMESTAMP}, {"mobile", Types.VARCHAR},
		{"noticePeriod", Types.VARCHAR},
		{"itAssetsSubmissionDate", Types.TIMESTAMP},
		{"retainEmployeeDate", Types.TIMESTAMP}, {"hasLaptop", Types.VARCHAR},
		{"hasMouse", Types.VARCHAR}, {"hasCharger", Types.VARCHAR},
		{"hasHeadSet", Types.VARCHAR}, {"hasLaptopBag", Types.VARCHAR},
		{"hasHomeDesktop", Types.VARCHAR}, {"hasHomeMonitor", Types.VARCHAR},
		{"otherAssetsList", Types.VARCHAR},
		{"exitQuestionnaire", Types.BOOLEAN}, {"withdrawCount", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("account", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assigneeEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assigneeTo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("alternateEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pincode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastWorkingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("managerSubmissionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hrSubmissionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("withdrawInitiatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("abscondTerminateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("separationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keyToCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keyToProject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rating", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientImpact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keyToRetention", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonNonRetention", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empWithdrawComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrWithdrawComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForLeaving", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForLeavingByHr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eligibleForRehire", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherIssue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("replacementPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("replacementDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("terminationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("initiatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noticePeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itAssetsSubmissionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("retainEmployeeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hasLaptop", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasMouse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasCharger", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasHeadSet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasLaptopBag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasHomeDesktop", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasHomeMonitor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherAssetsList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exitQuestionnaire", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("withdrawCount", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_Resignation (id_ LONG not null primary key,ecode VARCHAR(75) null,account VARCHAR(75) null,managerEmail VARCHAR(75) null,assigneeEmail VARCHAR(75) null,assigneeTo BOOLEAN,alternateEmail VARCHAR(75) null,stateName VARCHAR(75) null,cityName VARCHAR(75) null,pincode VARCHAR(75) null,postalAddress VARCHAR(500) null,reason VARCHAR(75) null,lastWorkingDate DATE null,managerSubmissionDate DATE null,hrSubmissionDate DATE null,withdrawInitiatedDate DATE null,abscondTerminateDate DATE null,separationType VARCHAR(75) null,keyToCompany VARCHAR(75) null,keyToProject VARCHAR(75) null,rating VARCHAR(75) null,clientImpact VARCHAR(75) null,keyToRetention VARCHAR(75) null,reasonNonRetention VARCHAR(75) null,employeeComment VARCHAR(500) null,hrComment VARCHAR(500) null,managerComment VARCHAR(500) null,empWithdrawComment VARCHAR(500) null,hrWithdrawComment VARCHAR(500) null,reasonForLeaving VARCHAR(75) null,reasonForLeavingByHr VARCHAR(75) null,eligibleForRehire VARCHAR(75) null,otherIssue VARCHAR(75) null,replacementPlan VARCHAR(75) null,replacementDetail VARCHAR(75) null,status INTEGER,terminationType VARCHAR(75) null,creationDate DATE null,initiatedDate DATE null,mobile VARCHAR(75) null,noticePeriod VARCHAR(75) null,itAssetsSubmissionDate DATE null,retainEmployeeDate DATE null,hasLaptop VARCHAR(75) null,hasMouse VARCHAR(75) null,hasCharger VARCHAR(75) null,hasHeadSet VARCHAR(75) null,hasLaptopBag VARCHAR(75) null,hasHomeDesktop VARCHAR(75) null,hasHomeMonitor VARCHAR(75) null,otherAssetsList VARCHAR(500) null,exitQuestionnaire BOOLEAN,withdrawCount INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table NOTICE_Resignation";

	public static final String ORDER_BY_JPQL = " ORDER BY resignation.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NOTICE_Resignation.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ResignationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Resignation.class;
	}

	@Override
	public String getModelClassName() {
		return Resignation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Resignation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Resignation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Resignation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Resignation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Resignation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Resignation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Resignation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Resignation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Resignation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Resignation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Resignation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Resignation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Resignation, Object>>();
		Map<String, BiConsumer<Resignation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Resignation, ?>>();

		attributeGetterFunctions.put("id", Resignation::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Resignation, Long>)Resignation::setId);
		attributeGetterFunctions.put("ecode", Resignation::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Resignation, String>)Resignation::setEcode);
		attributeGetterFunctions.put("account", Resignation::getAccount);
		attributeSetterBiConsumers.put(
			"account",
			(BiConsumer<Resignation, String>)Resignation::setAccount);
		attributeGetterFunctions.put(
			"managerEmail", Resignation::getManagerEmail);
		attributeSetterBiConsumers.put(
			"managerEmail",
			(BiConsumer<Resignation, String>)Resignation::setManagerEmail);
		attributeGetterFunctions.put(
			"assigneeEmail", Resignation::getAssigneeEmail);
		attributeSetterBiConsumers.put(
			"assigneeEmail",
			(BiConsumer<Resignation, String>)Resignation::setAssigneeEmail);
		attributeGetterFunctions.put("assigneeTo", Resignation::getAssigneeTo);
		attributeSetterBiConsumers.put(
			"assigneeTo",
			(BiConsumer<Resignation, Boolean>)Resignation::setAssigneeTo);
		attributeGetterFunctions.put(
			"alternateEmail", Resignation::getAlternateEmail);
		attributeSetterBiConsumers.put(
			"alternateEmail",
			(BiConsumer<Resignation, String>)Resignation::setAlternateEmail);
		attributeGetterFunctions.put("stateName", Resignation::getStateName);
		attributeSetterBiConsumers.put(
			"stateName",
			(BiConsumer<Resignation, String>)Resignation::setStateName);
		attributeGetterFunctions.put("cityName", Resignation::getCityName);
		attributeSetterBiConsumers.put(
			"cityName",
			(BiConsumer<Resignation, String>)Resignation::setCityName);
		attributeGetterFunctions.put("pincode", Resignation::getPincode);
		attributeSetterBiConsumers.put(
			"pincode",
			(BiConsumer<Resignation, String>)Resignation::setPincode);
		attributeGetterFunctions.put(
			"postalAddress", Resignation::getPostalAddress);
		attributeSetterBiConsumers.put(
			"postalAddress",
			(BiConsumer<Resignation, String>)Resignation::setPostalAddress);
		attributeGetterFunctions.put("reason", Resignation::getReason);
		attributeSetterBiConsumers.put(
			"reason", (BiConsumer<Resignation, String>)Resignation::setReason);
		attributeGetterFunctions.put(
			"lastWorkingDate", Resignation::getLastWorkingDate);
		attributeSetterBiConsumers.put(
			"lastWorkingDate",
			(BiConsumer<Resignation, Date>)Resignation::setLastWorkingDate);
		attributeGetterFunctions.put(
			"managerSubmissionDate", Resignation::getManagerSubmissionDate);
		attributeSetterBiConsumers.put(
			"managerSubmissionDate",
			(BiConsumer<Resignation, Date>)
				Resignation::setManagerSubmissionDate);
		attributeGetterFunctions.put(
			"hrSubmissionDate", Resignation::getHrSubmissionDate);
		attributeSetterBiConsumers.put(
			"hrSubmissionDate",
			(BiConsumer<Resignation, Date>)Resignation::setHrSubmissionDate);
		attributeGetterFunctions.put(
			"withdrawInitiatedDate", Resignation::getWithdrawInitiatedDate);
		attributeSetterBiConsumers.put(
			"withdrawInitiatedDate",
			(BiConsumer<Resignation, Date>)
				Resignation::setWithdrawInitiatedDate);
		attributeGetterFunctions.put(
			"abscondTerminateDate", Resignation::getAbscondTerminateDate);
		attributeSetterBiConsumers.put(
			"abscondTerminateDate",
			(BiConsumer<Resignation, Date>)
				Resignation::setAbscondTerminateDate);
		attributeGetterFunctions.put(
			"separationType", Resignation::getSeparationType);
		attributeSetterBiConsumers.put(
			"separationType",
			(BiConsumer<Resignation, String>)Resignation::setSeparationType);
		attributeGetterFunctions.put(
			"keyToCompany", Resignation::getKeyToCompany);
		attributeSetterBiConsumers.put(
			"keyToCompany",
			(BiConsumer<Resignation, String>)Resignation::setKeyToCompany);
		attributeGetterFunctions.put(
			"keyToProject", Resignation::getKeyToProject);
		attributeSetterBiConsumers.put(
			"keyToProject",
			(BiConsumer<Resignation, String>)Resignation::setKeyToProject);
		attributeGetterFunctions.put("rating", Resignation::getRating);
		attributeSetterBiConsumers.put(
			"rating", (BiConsumer<Resignation, String>)Resignation::setRating);
		attributeGetterFunctions.put(
			"clientImpact", Resignation::getClientImpact);
		attributeSetterBiConsumers.put(
			"clientImpact",
			(BiConsumer<Resignation, String>)Resignation::setClientImpact);
		attributeGetterFunctions.put(
			"keyToRetention", Resignation::getKeyToRetention);
		attributeSetterBiConsumers.put(
			"keyToRetention",
			(BiConsumer<Resignation, String>)Resignation::setKeyToRetention);
		attributeGetterFunctions.put(
			"reasonNonRetention", Resignation::getReasonNonRetention);
		attributeSetterBiConsumers.put(
			"reasonNonRetention",
			(BiConsumer<Resignation, String>)
				Resignation::setReasonNonRetention);
		attributeGetterFunctions.put(
			"employeeComment", Resignation::getEmployeeComment);
		attributeSetterBiConsumers.put(
			"employeeComment",
			(BiConsumer<Resignation, String>)Resignation::setEmployeeComment);
		attributeGetterFunctions.put("hrComment", Resignation::getHrComment);
		attributeSetterBiConsumers.put(
			"hrComment",
			(BiConsumer<Resignation, String>)Resignation::setHrComment);
		attributeGetterFunctions.put(
			"managerComment", Resignation::getManagerComment);
		attributeSetterBiConsumers.put(
			"managerComment",
			(BiConsumer<Resignation, String>)Resignation::setManagerComment);
		attributeGetterFunctions.put(
			"empWithdrawComment", Resignation::getEmpWithdrawComment);
		attributeSetterBiConsumers.put(
			"empWithdrawComment",
			(BiConsumer<Resignation, String>)
				Resignation::setEmpWithdrawComment);
		attributeGetterFunctions.put(
			"hrWithdrawComment", Resignation::getHrWithdrawComment);
		attributeSetterBiConsumers.put(
			"hrWithdrawComment",
			(BiConsumer<Resignation, String>)Resignation::setHrWithdrawComment);
		attributeGetterFunctions.put(
			"reasonForLeaving", Resignation::getReasonForLeaving);
		attributeSetterBiConsumers.put(
			"reasonForLeaving",
			(BiConsumer<Resignation, String>)Resignation::setReasonForLeaving);
		attributeGetterFunctions.put(
			"reasonForLeavingByHr", Resignation::getReasonForLeavingByHr);
		attributeSetterBiConsumers.put(
			"reasonForLeavingByHr",
			(BiConsumer<Resignation, String>)
				Resignation::setReasonForLeavingByHr);
		attributeGetterFunctions.put(
			"eligibleForRehire", Resignation::getEligibleForRehire);
		attributeSetterBiConsumers.put(
			"eligibleForRehire",
			(BiConsumer<Resignation, String>)Resignation::setEligibleForRehire);
		attributeGetterFunctions.put("otherIssue", Resignation::getOtherIssue);
		attributeSetterBiConsumers.put(
			"otherIssue",
			(BiConsumer<Resignation, String>)Resignation::setOtherIssue);
		attributeGetterFunctions.put(
			"replacementPlan", Resignation::getReplacementPlan);
		attributeSetterBiConsumers.put(
			"replacementPlan",
			(BiConsumer<Resignation, String>)Resignation::setReplacementPlan);
		attributeGetterFunctions.put(
			"replacementDetail", Resignation::getReplacementDetail);
		attributeSetterBiConsumers.put(
			"replacementDetail",
			(BiConsumer<Resignation, String>)Resignation::setReplacementDetail);
		attributeGetterFunctions.put("status", Resignation::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Resignation, Integer>)Resignation::setStatus);
		attributeGetterFunctions.put(
			"terminationType", Resignation::getTerminationType);
		attributeSetterBiConsumers.put(
			"terminationType",
			(BiConsumer<Resignation, String>)Resignation::setTerminationType);
		attributeGetterFunctions.put(
			"creationDate", Resignation::getCreationDate);
		attributeSetterBiConsumers.put(
			"creationDate",
			(BiConsumer<Resignation, Date>)Resignation::setCreationDate);
		attributeGetterFunctions.put(
			"initiatedDate", Resignation::getInitiatedDate);
		attributeSetterBiConsumers.put(
			"initiatedDate",
			(BiConsumer<Resignation, Date>)Resignation::setInitiatedDate);
		attributeGetterFunctions.put("mobile", Resignation::getMobile);
		attributeSetterBiConsumers.put(
			"mobile", (BiConsumer<Resignation, String>)Resignation::setMobile);
		attributeGetterFunctions.put(
			"noticePeriod", Resignation::getNoticePeriod);
		attributeSetterBiConsumers.put(
			"noticePeriod",
			(BiConsumer<Resignation, String>)Resignation::setNoticePeriod);
		attributeGetterFunctions.put(
			"itAssetsSubmissionDate", Resignation::getItAssetsSubmissionDate);
		attributeSetterBiConsumers.put(
			"itAssetsSubmissionDate",
			(BiConsumer<Resignation, Date>)
				Resignation::setItAssetsSubmissionDate);
		attributeGetterFunctions.put(
			"retainEmployeeDate", Resignation::getRetainEmployeeDate);
		attributeSetterBiConsumers.put(
			"retainEmployeeDate",
			(BiConsumer<Resignation, Date>)Resignation::setRetainEmployeeDate);
		attributeGetterFunctions.put("hasLaptop", Resignation::getHasLaptop);
		attributeSetterBiConsumers.put(
			"hasLaptop",
			(BiConsumer<Resignation, String>)Resignation::setHasLaptop);
		attributeGetterFunctions.put("hasMouse", Resignation::getHasMouse);
		attributeSetterBiConsumers.put(
			"hasMouse",
			(BiConsumer<Resignation, String>)Resignation::setHasMouse);
		attributeGetterFunctions.put("hasCharger", Resignation::getHasCharger);
		attributeSetterBiConsumers.put(
			"hasCharger",
			(BiConsumer<Resignation, String>)Resignation::setHasCharger);
		attributeGetterFunctions.put("hasHeadSet", Resignation::getHasHeadSet);
		attributeSetterBiConsumers.put(
			"hasHeadSet",
			(BiConsumer<Resignation, String>)Resignation::setHasHeadSet);
		attributeGetterFunctions.put(
			"hasLaptopBag", Resignation::getHasLaptopBag);
		attributeSetterBiConsumers.put(
			"hasLaptopBag",
			(BiConsumer<Resignation, String>)Resignation::setHasLaptopBag);
		attributeGetterFunctions.put(
			"hasHomeDesktop", Resignation::getHasHomeDesktop);
		attributeSetterBiConsumers.put(
			"hasHomeDesktop",
			(BiConsumer<Resignation, String>)Resignation::setHasHomeDesktop);
		attributeGetterFunctions.put(
			"hasHomeMonitor", Resignation::getHasHomeMonitor);
		attributeSetterBiConsumers.put(
			"hasHomeMonitor",
			(BiConsumer<Resignation, String>)Resignation::setHasHomeMonitor);
		attributeGetterFunctions.put(
			"otherAssetsList", Resignation::getOtherAssetsList);
		attributeSetterBiConsumers.put(
			"otherAssetsList",
			(BiConsumer<Resignation, String>)Resignation::setOtherAssetsList);
		attributeGetterFunctions.put(
			"exitQuestionnaire", Resignation::getExitQuestionnaire);
		attributeSetterBiConsumers.put(
			"exitQuestionnaire",
			(BiConsumer<Resignation, Boolean>)
				Resignation::setExitQuestionnaire);
		attributeGetterFunctions.put(
			"withdrawCount", Resignation::getWithdrawCount);
		attributeSetterBiConsumers.put(
			"withdrawCount",
			(BiConsumer<Resignation, Integer>)Resignation::setWithdrawCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getAccount() {
		if (_account == null) {
			return "";
		}
		else {
			return _account;
		}
	}

	@Override
	public void setAccount(String account) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_account = account;
	}

	@Override
	public String getManagerEmail() {
		if (_managerEmail == null) {
			return "";
		}
		else {
			return _managerEmail;
		}
	}

	@Override
	public void setManagerEmail(String managerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerEmail = managerEmail;
	}

	@Override
	public String getAssigneeEmail() {
		if (_assigneeEmail == null) {
			return "";
		}
		else {
			return _assigneeEmail;
		}
	}

	@Override
	public void setAssigneeEmail(String assigneeEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assigneeEmail = assigneeEmail;
	}

	@Override
	public boolean getAssigneeTo() {
		return _assigneeTo;
	}

	@Override
	public boolean isAssigneeTo() {
		return _assigneeTo;
	}

	@Override
	public void setAssigneeTo(boolean assigneeTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assigneeTo = assigneeTo;
	}

	@Override
	public String getAlternateEmail() {
		if (_alternateEmail == null) {
			return "";
		}
		else {
			return _alternateEmail;
		}
	}

	@Override
	public void setAlternateEmail(String alternateEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alternateEmail = alternateEmail;
	}

	@Override
	public String getStateName() {
		if (_stateName == null) {
			return "";
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateName = stateName;
	}

	@Override
	public String getCityName() {
		if (_cityName == null) {
			return "";
		}
		else {
			return _cityName;
		}
	}

	@Override
	public void setCityName(String cityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityName = cityName;
	}

	@Override
	public String getPincode() {
		if (_pincode == null) {
			return "";
		}
		else {
			return _pincode;
		}
	}

	@Override
	public void setPincode(String pincode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pincode = pincode;
	}

	@Override
	public String getPostalAddress() {
		if (_postalAddress == null) {
			return "";
		}
		else {
			return _postalAddress;
		}
	}

	@Override
	public void setPostalAddress(String postalAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalAddress = postalAddress;
	}

	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reason = reason;
	}

	@Override
	public Date getLastWorkingDate() {
		return _lastWorkingDate;
	}

	@Override
	public void setLastWorkingDate(Date lastWorkingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastWorkingDate = lastWorkingDate;
	}

	@Override
	public Date getManagerSubmissionDate() {
		return _managerSubmissionDate;
	}

	@Override
	public void setManagerSubmissionDate(Date managerSubmissionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerSubmissionDate = managerSubmissionDate;
	}

	@Override
	public Date getHrSubmissionDate() {
		return _hrSubmissionDate;
	}

	@Override
	public void setHrSubmissionDate(Date hrSubmissionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrSubmissionDate = hrSubmissionDate;
	}

	@Override
	public Date getWithdrawInitiatedDate() {
		return _withdrawInitiatedDate;
	}

	@Override
	public void setWithdrawInitiatedDate(Date withdrawInitiatedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_withdrawInitiatedDate = withdrawInitiatedDate;
	}

	@Override
	public Date getAbscondTerminateDate() {
		return _abscondTerminateDate;
	}

	@Override
	public void setAbscondTerminateDate(Date abscondTerminateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_abscondTerminateDate = abscondTerminateDate;
	}

	@Override
	public String getSeparationType() {
		if (_separationType == null) {
			return "";
		}
		else {
			return _separationType;
		}
	}

	@Override
	public void setSeparationType(String separationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separationType = separationType;
	}

	@Override
	public String getKeyToCompany() {
		if (_keyToCompany == null) {
			return "";
		}
		else {
			return _keyToCompany;
		}
	}

	@Override
	public void setKeyToCompany(String keyToCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_keyToCompany = keyToCompany;
	}

	@Override
	public String getKeyToProject() {
		if (_keyToProject == null) {
			return "";
		}
		else {
			return _keyToProject;
		}
	}

	@Override
	public void setKeyToProject(String keyToProject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_keyToProject = keyToProject;
	}

	@Override
	public String getRating() {
		if (_rating == null) {
			return "";
		}
		else {
			return _rating;
		}
	}

	@Override
	public void setRating(String rating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rating = rating;
	}

	@Override
	public String getClientImpact() {
		if (_clientImpact == null) {
			return "";
		}
		else {
			return _clientImpact;
		}
	}

	@Override
	public void setClientImpact(String clientImpact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_clientImpact = clientImpact;
	}

	@Override
	public String getKeyToRetention() {
		if (_keyToRetention == null) {
			return "";
		}
		else {
			return _keyToRetention;
		}
	}

	@Override
	public void setKeyToRetention(String keyToRetention) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_keyToRetention = keyToRetention;
	}

	@Override
	public String getReasonNonRetention() {
		if (_reasonNonRetention == null) {
			return "";
		}
		else {
			return _reasonNonRetention;
		}
	}

	@Override
	public void setReasonNonRetention(String reasonNonRetention) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonNonRetention = reasonNonRetention;
	}

	@Override
	public String getEmployeeComment() {
		if (_employeeComment == null) {
			return "";
		}
		else {
			return _employeeComment;
		}
	}

	@Override
	public void setEmployeeComment(String employeeComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeComment = employeeComment;
	}

	@Override
	public String getHrComment() {
		if (_hrComment == null) {
			return "";
		}
		else {
			return _hrComment;
		}
	}

	@Override
	public void setHrComment(String hrComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrComment = hrComment;
	}

	@Override
	public String getManagerComment() {
		if (_managerComment == null) {
			return "";
		}
		else {
			return _managerComment;
		}
	}

	@Override
	public void setManagerComment(String managerComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerComment = managerComment;
	}

	@Override
	public String getEmpWithdrawComment() {
		if (_empWithdrawComment == null) {
			return "";
		}
		else {
			return _empWithdrawComment;
		}
	}

	@Override
	public void setEmpWithdrawComment(String empWithdrawComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empWithdrawComment = empWithdrawComment;
	}

	@Override
	public String getHrWithdrawComment() {
		if (_hrWithdrawComment == null) {
			return "";
		}
		else {
			return _hrWithdrawComment;
		}
	}

	@Override
	public void setHrWithdrawComment(String hrWithdrawComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrWithdrawComment = hrWithdrawComment;
	}

	@Override
	public String getReasonForLeaving() {
		if (_reasonForLeaving == null) {
			return "";
		}
		else {
			return _reasonForLeaving;
		}
	}

	@Override
	public void setReasonForLeaving(String reasonForLeaving) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForLeaving = reasonForLeaving;
	}

	@Override
	public String getReasonForLeavingByHr() {
		if (_reasonForLeavingByHr == null) {
			return "";
		}
		else {
			return _reasonForLeavingByHr;
		}
	}

	@Override
	public void setReasonForLeavingByHr(String reasonForLeavingByHr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForLeavingByHr = reasonForLeavingByHr;
	}

	@Override
	public String getEligibleForRehire() {
		if (_eligibleForRehire == null) {
			return "";
		}
		else {
			return _eligibleForRehire;
		}
	}

	@Override
	public void setEligibleForRehire(String eligibleForRehire) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eligibleForRehire = eligibleForRehire;
	}

	@Override
	public String getOtherIssue() {
		if (_otherIssue == null) {
			return "";
		}
		else {
			return _otherIssue;
		}
	}

	@Override
	public void setOtherIssue(String otherIssue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherIssue = otherIssue;
	}

	@Override
	public String getReplacementPlan() {
		if (_replacementPlan == null) {
			return "";
		}
		else {
			return _replacementPlan;
		}
	}

	@Override
	public void setReplacementPlan(String replacementPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacementPlan = replacementPlan;
	}

	@Override
	public String getReplacementDetail() {
		if (_replacementDetail == null) {
			return "";
		}
		else {
			return _replacementDetail;
		}
	}

	@Override
	public void setReplacementDetail(String replacementDetail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacementDetail = replacementDetail;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getTerminationType() {
		if (_terminationType == null) {
			return "";
		}
		else {
			return _terminationType;
		}
	}

	@Override
	public void setTerminationType(String terminationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_terminationType = terminationType;
	}

	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creationDate = creationDate;
	}

	@Override
	public Date getInitiatedDate() {
		return _initiatedDate;
	}

	@Override
	public void setInitiatedDate(Date initiatedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initiatedDate = initiatedDate;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile = mobile;
	}

	@Override
	public String getNoticePeriod() {
		if (_noticePeriod == null) {
			return "";
		}
		else {
			return _noticePeriod;
		}
	}

	@Override
	public void setNoticePeriod(String noticePeriod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noticePeriod = noticePeriod;
	}

	@Override
	public Date getItAssetsSubmissionDate() {
		return _itAssetsSubmissionDate;
	}

	@Override
	public void setItAssetsSubmissionDate(Date itAssetsSubmissionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itAssetsSubmissionDate = itAssetsSubmissionDate;
	}

	@Override
	public Date getRetainEmployeeDate() {
		return _retainEmployeeDate;
	}

	@Override
	public void setRetainEmployeeDate(Date retainEmployeeDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_retainEmployeeDate = retainEmployeeDate;
	}

	@Override
	public String getHasLaptop() {
		if (_hasLaptop == null) {
			return "";
		}
		else {
			return _hasLaptop;
		}
	}

	@Override
	public void setHasLaptop(String hasLaptop) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasLaptop = hasLaptop;
	}

	@Override
	public String getHasMouse() {
		if (_hasMouse == null) {
			return "";
		}
		else {
			return _hasMouse;
		}
	}

	@Override
	public void setHasMouse(String hasMouse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasMouse = hasMouse;
	}

	@Override
	public String getHasCharger() {
		if (_hasCharger == null) {
			return "";
		}
		else {
			return _hasCharger;
		}
	}

	@Override
	public void setHasCharger(String hasCharger) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasCharger = hasCharger;
	}

	@Override
	public String getHasHeadSet() {
		if (_hasHeadSet == null) {
			return "";
		}
		else {
			return _hasHeadSet;
		}
	}

	@Override
	public void setHasHeadSet(String hasHeadSet) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasHeadSet = hasHeadSet;
	}

	@Override
	public String getHasLaptopBag() {
		if (_hasLaptopBag == null) {
			return "";
		}
		else {
			return _hasLaptopBag;
		}
	}

	@Override
	public void setHasLaptopBag(String hasLaptopBag) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasLaptopBag = hasLaptopBag;
	}

	@Override
	public String getHasHomeDesktop() {
		if (_hasHomeDesktop == null) {
			return "";
		}
		else {
			return _hasHomeDesktop;
		}
	}

	@Override
	public void setHasHomeDesktop(String hasHomeDesktop) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasHomeDesktop = hasHomeDesktop;
	}

	@Override
	public String getHasHomeMonitor() {
		if (_hasHomeMonitor == null) {
			return "";
		}
		else {
			return _hasHomeMonitor;
		}
	}

	@Override
	public void setHasHomeMonitor(String hasHomeMonitor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasHomeMonitor = hasHomeMonitor;
	}

	@Override
	public String getOtherAssetsList() {
		if (_otherAssetsList == null) {
			return "";
		}
		else {
			return _otherAssetsList;
		}
	}

	@Override
	public void setOtherAssetsList(String otherAssetsList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherAssetsList = otherAssetsList;
	}

	@Override
	public boolean getExitQuestionnaire() {
		return _exitQuestionnaire;
	}

	@Override
	public boolean isExitQuestionnaire() {
		return _exitQuestionnaire;
	}

	@Override
	public void setExitQuestionnaire(boolean exitQuestionnaire) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitQuestionnaire = exitQuestionnaire;
	}

	@Override
	public int getWithdrawCount() {
		return _withdrawCount;
	}

	@Override
	public void setWithdrawCount(int withdrawCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_withdrawCount = withdrawCount;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Resignation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Resignation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Resignation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResignationImpl resignationImpl = new ResignationImpl();

		resignationImpl.setId(getId());
		resignationImpl.setEcode(getEcode());
		resignationImpl.setAccount(getAccount());
		resignationImpl.setManagerEmail(getManagerEmail());
		resignationImpl.setAssigneeEmail(getAssigneeEmail());
		resignationImpl.setAssigneeTo(isAssigneeTo());
		resignationImpl.setAlternateEmail(getAlternateEmail());
		resignationImpl.setStateName(getStateName());
		resignationImpl.setCityName(getCityName());
		resignationImpl.setPincode(getPincode());
		resignationImpl.setPostalAddress(getPostalAddress());
		resignationImpl.setReason(getReason());
		resignationImpl.setLastWorkingDate(getLastWorkingDate());
		resignationImpl.setManagerSubmissionDate(getManagerSubmissionDate());
		resignationImpl.setHrSubmissionDate(getHrSubmissionDate());
		resignationImpl.setWithdrawInitiatedDate(getWithdrawInitiatedDate());
		resignationImpl.setAbscondTerminateDate(getAbscondTerminateDate());
		resignationImpl.setSeparationType(getSeparationType());
		resignationImpl.setKeyToCompany(getKeyToCompany());
		resignationImpl.setKeyToProject(getKeyToProject());
		resignationImpl.setRating(getRating());
		resignationImpl.setClientImpact(getClientImpact());
		resignationImpl.setKeyToRetention(getKeyToRetention());
		resignationImpl.setReasonNonRetention(getReasonNonRetention());
		resignationImpl.setEmployeeComment(getEmployeeComment());
		resignationImpl.setHrComment(getHrComment());
		resignationImpl.setManagerComment(getManagerComment());
		resignationImpl.setEmpWithdrawComment(getEmpWithdrawComment());
		resignationImpl.setHrWithdrawComment(getHrWithdrawComment());
		resignationImpl.setReasonForLeaving(getReasonForLeaving());
		resignationImpl.setReasonForLeavingByHr(getReasonForLeavingByHr());
		resignationImpl.setEligibleForRehire(getEligibleForRehire());
		resignationImpl.setOtherIssue(getOtherIssue());
		resignationImpl.setReplacementPlan(getReplacementPlan());
		resignationImpl.setReplacementDetail(getReplacementDetail());
		resignationImpl.setStatus(getStatus());
		resignationImpl.setTerminationType(getTerminationType());
		resignationImpl.setCreationDate(getCreationDate());
		resignationImpl.setInitiatedDate(getInitiatedDate());
		resignationImpl.setMobile(getMobile());
		resignationImpl.setNoticePeriod(getNoticePeriod());
		resignationImpl.setItAssetsSubmissionDate(getItAssetsSubmissionDate());
		resignationImpl.setRetainEmployeeDate(getRetainEmployeeDate());
		resignationImpl.setHasLaptop(getHasLaptop());
		resignationImpl.setHasMouse(getHasMouse());
		resignationImpl.setHasCharger(getHasCharger());
		resignationImpl.setHasHeadSet(getHasHeadSet());
		resignationImpl.setHasLaptopBag(getHasLaptopBag());
		resignationImpl.setHasHomeDesktop(getHasHomeDesktop());
		resignationImpl.setHasHomeMonitor(getHasHomeMonitor());
		resignationImpl.setOtherAssetsList(getOtherAssetsList());
		resignationImpl.setExitQuestionnaire(isExitQuestionnaire());
		resignationImpl.setWithdrawCount(getWithdrawCount());

		resignationImpl.resetOriginalValues();

		return resignationImpl;
	}

	@Override
	public Resignation cloneWithOriginalValues() {
		ResignationImpl resignationImpl = new ResignationImpl();

		resignationImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		resignationImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		resignationImpl.setAccount(
			this.<String>getColumnOriginalValue("account"));
		resignationImpl.setManagerEmail(
			this.<String>getColumnOriginalValue("managerEmail"));
		resignationImpl.setAssigneeEmail(
			this.<String>getColumnOriginalValue("assigneeEmail"));
		resignationImpl.setAssigneeTo(
			this.<Boolean>getColumnOriginalValue("assigneeTo"));
		resignationImpl.setAlternateEmail(
			this.<String>getColumnOriginalValue("alternateEmail"));
		resignationImpl.setStateName(
			this.<String>getColumnOriginalValue("stateName"));
		resignationImpl.setCityName(
			this.<String>getColumnOriginalValue("cityName"));
		resignationImpl.setPincode(
			this.<String>getColumnOriginalValue("pincode"));
		resignationImpl.setPostalAddress(
			this.<String>getColumnOriginalValue("postalAddress"));
		resignationImpl.setReason(
			this.<String>getColumnOriginalValue("reason"));
		resignationImpl.setLastWorkingDate(
			this.<Date>getColumnOriginalValue("lastWorkingDate"));
		resignationImpl.setManagerSubmissionDate(
			this.<Date>getColumnOriginalValue("managerSubmissionDate"));
		resignationImpl.setHrSubmissionDate(
			this.<Date>getColumnOriginalValue("hrSubmissionDate"));
		resignationImpl.setWithdrawInitiatedDate(
			this.<Date>getColumnOriginalValue("withdrawInitiatedDate"));
		resignationImpl.setAbscondTerminateDate(
			this.<Date>getColumnOriginalValue("abscondTerminateDate"));
		resignationImpl.setSeparationType(
			this.<String>getColumnOriginalValue("separationType"));
		resignationImpl.setKeyToCompany(
			this.<String>getColumnOriginalValue("keyToCompany"));
		resignationImpl.setKeyToProject(
			this.<String>getColumnOriginalValue("keyToProject"));
		resignationImpl.setRating(
			this.<String>getColumnOriginalValue("rating"));
		resignationImpl.setClientImpact(
			this.<String>getColumnOriginalValue("clientImpact"));
		resignationImpl.setKeyToRetention(
			this.<String>getColumnOriginalValue("keyToRetention"));
		resignationImpl.setReasonNonRetention(
			this.<String>getColumnOriginalValue("reasonNonRetention"));
		resignationImpl.setEmployeeComment(
			this.<String>getColumnOriginalValue("employeeComment"));
		resignationImpl.setHrComment(
			this.<String>getColumnOriginalValue("hrComment"));
		resignationImpl.setManagerComment(
			this.<String>getColumnOriginalValue("managerComment"));
		resignationImpl.setEmpWithdrawComment(
			this.<String>getColumnOriginalValue("empWithdrawComment"));
		resignationImpl.setHrWithdrawComment(
			this.<String>getColumnOriginalValue("hrWithdrawComment"));
		resignationImpl.setReasonForLeaving(
			this.<String>getColumnOriginalValue("reasonForLeaving"));
		resignationImpl.setReasonForLeavingByHr(
			this.<String>getColumnOriginalValue("reasonForLeavingByHr"));
		resignationImpl.setEligibleForRehire(
			this.<String>getColumnOriginalValue("eligibleForRehire"));
		resignationImpl.setOtherIssue(
			this.<String>getColumnOriginalValue("otherIssue"));
		resignationImpl.setReplacementPlan(
			this.<String>getColumnOriginalValue("replacementPlan"));
		resignationImpl.setReplacementDetail(
			this.<String>getColumnOriginalValue("replacementDetail"));
		resignationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		resignationImpl.setTerminationType(
			this.<String>getColumnOriginalValue("terminationType"));
		resignationImpl.setCreationDate(
			this.<Date>getColumnOriginalValue("creationDate"));
		resignationImpl.setInitiatedDate(
			this.<Date>getColumnOriginalValue("initiatedDate"));
		resignationImpl.setMobile(
			this.<String>getColumnOriginalValue("mobile"));
		resignationImpl.setNoticePeriod(
			this.<String>getColumnOriginalValue("noticePeriod"));
		resignationImpl.setItAssetsSubmissionDate(
			this.<Date>getColumnOriginalValue("itAssetsSubmissionDate"));
		resignationImpl.setRetainEmployeeDate(
			this.<Date>getColumnOriginalValue("retainEmployeeDate"));
		resignationImpl.setHasLaptop(
			this.<String>getColumnOriginalValue("hasLaptop"));
		resignationImpl.setHasMouse(
			this.<String>getColumnOriginalValue("hasMouse"));
		resignationImpl.setHasCharger(
			this.<String>getColumnOriginalValue("hasCharger"));
		resignationImpl.setHasHeadSet(
			this.<String>getColumnOriginalValue("hasHeadSet"));
		resignationImpl.setHasLaptopBag(
			this.<String>getColumnOriginalValue("hasLaptopBag"));
		resignationImpl.setHasHomeDesktop(
			this.<String>getColumnOriginalValue("hasHomeDesktop"));
		resignationImpl.setHasHomeMonitor(
			this.<String>getColumnOriginalValue("hasHomeMonitor"));
		resignationImpl.setOtherAssetsList(
			this.<String>getColumnOriginalValue("otherAssetsList"));
		resignationImpl.setExitQuestionnaire(
			this.<Boolean>getColumnOriginalValue("exitQuestionnaire"));
		resignationImpl.setWithdrawCount(
			this.<Integer>getColumnOriginalValue("withdrawCount"));

		return resignationImpl;
	}

	@Override
	public int compareTo(Resignation resignation) {
		long primaryKey = resignation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Resignation)) {
			return false;
		}

		Resignation resignation = (Resignation)object;

		long primaryKey = resignation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Resignation> toCacheModel() {
		ResignationCacheModel resignationCacheModel =
			new ResignationCacheModel();

		resignationCacheModel.id = getId();

		resignationCacheModel.ecode = getEcode();

		String ecode = resignationCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			resignationCacheModel.ecode = null;
		}

		resignationCacheModel.account = getAccount();

		String account = resignationCacheModel.account;

		if ((account != null) && (account.length() == 0)) {
			resignationCacheModel.account = null;
		}

		resignationCacheModel.managerEmail = getManagerEmail();

		String managerEmail = resignationCacheModel.managerEmail;

		if ((managerEmail != null) && (managerEmail.length() == 0)) {
			resignationCacheModel.managerEmail = null;
		}

		resignationCacheModel.assigneeEmail = getAssigneeEmail();

		String assigneeEmail = resignationCacheModel.assigneeEmail;

		if ((assigneeEmail != null) && (assigneeEmail.length() == 0)) {
			resignationCacheModel.assigneeEmail = null;
		}

		resignationCacheModel.assigneeTo = isAssigneeTo();

		resignationCacheModel.alternateEmail = getAlternateEmail();

		String alternateEmail = resignationCacheModel.alternateEmail;

		if ((alternateEmail != null) && (alternateEmail.length() == 0)) {
			resignationCacheModel.alternateEmail = null;
		}

		resignationCacheModel.stateName = getStateName();

		String stateName = resignationCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			resignationCacheModel.stateName = null;
		}

		resignationCacheModel.cityName = getCityName();

		String cityName = resignationCacheModel.cityName;

		if ((cityName != null) && (cityName.length() == 0)) {
			resignationCacheModel.cityName = null;
		}

		resignationCacheModel.pincode = getPincode();

		String pincode = resignationCacheModel.pincode;

		if ((pincode != null) && (pincode.length() == 0)) {
			resignationCacheModel.pincode = null;
		}

		resignationCacheModel.postalAddress = getPostalAddress();

		String postalAddress = resignationCacheModel.postalAddress;

		if ((postalAddress != null) && (postalAddress.length() == 0)) {
			resignationCacheModel.postalAddress = null;
		}

		resignationCacheModel.reason = getReason();

		String reason = resignationCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			resignationCacheModel.reason = null;
		}

		Date lastWorkingDate = getLastWorkingDate();

		if (lastWorkingDate != null) {
			resignationCacheModel.lastWorkingDate = lastWorkingDate.getTime();
		}
		else {
			resignationCacheModel.lastWorkingDate = Long.MIN_VALUE;
		}

		Date managerSubmissionDate = getManagerSubmissionDate();

		if (managerSubmissionDate != null) {
			resignationCacheModel.managerSubmissionDate =
				managerSubmissionDate.getTime();
		}
		else {
			resignationCacheModel.managerSubmissionDate = Long.MIN_VALUE;
		}

		Date hrSubmissionDate = getHrSubmissionDate();

		if (hrSubmissionDate != null) {
			resignationCacheModel.hrSubmissionDate = hrSubmissionDate.getTime();
		}
		else {
			resignationCacheModel.hrSubmissionDate = Long.MIN_VALUE;
		}

		Date withdrawInitiatedDate = getWithdrawInitiatedDate();

		if (withdrawInitiatedDate != null) {
			resignationCacheModel.withdrawInitiatedDate =
				withdrawInitiatedDate.getTime();
		}
		else {
			resignationCacheModel.withdrawInitiatedDate = Long.MIN_VALUE;
		}

		Date abscondTerminateDate = getAbscondTerminateDate();

		if (abscondTerminateDate != null) {
			resignationCacheModel.abscondTerminateDate =
				abscondTerminateDate.getTime();
		}
		else {
			resignationCacheModel.abscondTerminateDate = Long.MIN_VALUE;
		}

		resignationCacheModel.separationType = getSeparationType();

		String separationType = resignationCacheModel.separationType;

		if ((separationType != null) && (separationType.length() == 0)) {
			resignationCacheModel.separationType = null;
		}

		resignationCacheModel.keyToCompany = getKeyToCompany();

		String keyToCompany = resignationCacheModel.keyToCompany;

		if ((keyToCompany != null) && (keyToCompany.length() == 0)) {
			resignationCacheModel.keyToCompany = null;
		}

		resignationCacheModel.keyToProject = getKeyToProject();

		String keyToProject = resignationCacheModel.keyToProject;

		if ((keyToProject != null) && (keyToProject.length() == 0)) {
			resignationCacheModel.keyToProject = null;
		}

		resignationCacheModel.rating = getRating();

		String rating = resignationCacheModel.rating;

		if ((rating != null) && (rating.length() == 0)) {
			resignationCacheModel.rating = null;
		}

		resignationCacheModel.clientImpact = getClientImpact();

		String clientImpact = resignationCacheModel.clientImpact;

		if ((clientImpact != null) && (clientImpact.length() == 0)) {
			resignationCacheModel.clientImpact = null;
		}

		resignationCacheModel.keyToRetention = getKeyToRetention();

		String keyToRetention = resignationCacheModel.keyToRetention;

		if ((keyToRetention != null) && (keyToRetention.length() == 0)) {
			resignationCacheModel.keyToRetention = null;
		}

		resignationCacheModel.reasonNonRetention = getReasonNonRetention();

		String reasonNonRetention = resignationCacheModel.reasonNonRetention;

		if ((reasonNonRetention != null) &&
			(reasonNonRetention.length() == 0)) {

			resignationCacheModel.reasonNonRetention = null;
		}

		resignationCacheModel.employeeComment = getEmployeeComment();

		String employeeComment = resignationCacheModel.employeeComment;

		if ((employeeComment != null) && (employeeComment.length() == 0)) {
			resignationCacheModel.employeeComment = null;
		}

		resignationCacheModel.hrComment = getHrComment();

		String hrComment = resignationCacheModel.hrComment;

		if ((hrComment != null) && (hrComment.length() == 0)) {
			resignationCacheModel.hrComment = null;
		}

		resignationCacheModel.managerComment = getManagerComment();

		String managerComment = resignationCacheModel.managerComment;

		if ((managerComment != null) && (managerComment.length() == 0)) {
			resignationCacheModel.managerComment = null;
		}

		resignationCacheModel.empWithdrawComment = getEmpWithdrawComment();

		String empWithdrawComment = resignationCacheModel.empWithdrawComment;

		if ((empWithdrawComment != null) &&
			(empWithdrawComment.length() == 0)) {

			resignationCacheModel.empWithdrawComment = null;
		}

		resignationCacheModel.hrWithdrawComment = getHrWithdrawComment();

		String hrWithdrawComment = resignationCacheModel.hrWithdrawComment;

		if ((hrWithdrawComment != null) && (hrWithdrawComment.length() == 0)) {
			resignationCacheModel.hrWithdrawComment = null;
		}

		resignationCacheModel.reasonForLeaving = getReasonForLeaving();

		String reasonForLeaving = resignationCacheModel.reasonForLeaving;

		if ((reasonForLeaving != null) && (reasonForLeaving.length() == 0)) {
			resignationCacheModel.reasonForLeaving = null;
		}

		resignationCacheModel.reasonForLeavingByHr = getReasonForLeavingByHr();

		String reasonForLeavingByHr =
			resignationCacheModel.reasonForLeavingByHr;

		if ((reasonForLeavingByHr != null) &&
			(reasonForLeavingByHr.length() == 0)) {

			resignationCacheModel.reasonForLeavingByHr = null;
		}

		resignationCacheModel.eligibleForRehire = getEligibleForRehire();

		String eligibleForRehire = resignationCacheModel.eligibleForRehire;

		if ((eligibleForRehire != null) && (eligibleForRehire.length() == 0)) {
			resignationCacheModel.eligibleForRehire = null;
		}

		resignationCacheModel.otherIssue = getOtherIssue();

		String otherIssue = resignationCacheModel.otherIssue;

		if ((otherIssue != null) && (otherIssue.length() == 0)) {
			resignationCacheModel.otherIssue = null;
		}

		resignationCacheModel.replacementPlan = getReplacementPlan();

		String replacementPlan = resignationCacheModel.replacementPlan;

		if ((replacementPlan != null) && (replacementPlan.length() == 0)) {
			resignationCacheModel.replacementPlan = null;
		}

		resignationCacheModel.replacementDetail = getReplacementDetail();

		String replacementDetail = resignationCacheModel.replacementDetail;

		if ((replacementDetail != null) && (replacementDetail.length() == 0)) {
			resignationCacheModel.replacementDetail = null;
		}

		resignationCacheModel.status = getStatus();

		resignationCacheModel.terminationType = getTerminationType();

		String terminationType = resignationCacheModel.terminationType;

		if ((terminationType != null) && (terminationType.length() == 0)) {
			resignationCacheModel.terminationType = null;
		}

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			resignationCacheModel.creationDate = creationDate.getTime();
		}
		else {
			resignationCacheModel.creationDate = Long.MIN_VALUE;
		}

		Date initiatedDate = getInitiatedDate();

		if (initiatedDate != null) {
			resignationCacheModel.initiatedDate = initiatedDate.getTime();
		}
		else {
			resignationCacheModel.initiatedDate = Long.MIN_VALUE;
		}

		resignationCacheModel.mobile = getMobile();

		String mobile = resignationCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			resignationCacheModel.mobile = null;
		}

		resignationCacheModel.noticePeriod = getNoticePeriod();

		String noticePeriod = resignationCacheModel.noticePeriod;

		if ((noticePeriod != null) && (noticePeriod.length() == 0)) {
			resignationCacheModel.noticePeriod = null;
		}

		Date itAssetsSubmissionDate = getItAssetsSubmissionDate();

		if (itAssetsSubmissionDate != null) {
			resignationCacheModel.itAssetsSubmissionDate =
				itAssetsSubmissionDate.getTime();
		}
		else {
			resignationCacheModel.itAssetsSubmissionDate = Long.MIN_VALUE;
		}

		Date retainEmployeeDate = getRetainEmployeeDate();

		if (retainEmployeeDate != null) {
			resignationCacheModel.retainEmployeeDate =
				retainEmployeeDate.getTime();
		}
		else {
			resignationCacheModel.retainEmployeeDate = Long.MIN_VALUE;
		}

		resignationCacheModel.hasLaptop = getHasLaptop();

		String hasLaptop = resignationCacheModel.hasLaptop;

		if ((hasLaptop != null) && (hasLaptop.length() == 0)) {
			resignationCacheModel.hasLaptop = null;
		}

		resignationCacheModel.hasMouse = getHasMouse();

		String hasMouse = resignationCacheModel.hasMouse;

		if ((hasMouse != null) && (hasMouse.length() == 0)) {
			resignationCacheModel.hasMouse = null;
		}

		resignationCacheModel.hasCharger = getHasCharger();

		String hasCharger = resignationCacheModel.hasCharger;

		if ((hasCharger != null) && (hasCharger.length() == 0)) {
			resignationCacheModel.hasCharger = null;
		}

		resignationCacheModel.hasHeadSet = getHasHeadSet();

		String hasHeadSet = resignationCacheModel.hasHeadSet;

		if ((hasHeadSet != null) && (hasHeadSet.length() == 0)) {
			resignationCacheModel.hasHeadSet = null;
		}

		resignationCacheModel.hasLaptopBag = getHasLaptopBag();

		String hasLaptopBag = resignationCacheModel.hasLaptopBag;

		if ((hasLaptopBag != null) && (hasLaptopBag.length() == 0)) {
			resignationCacheModel.hasLaptopBag = null;
		}

		resignationCacheModel.hasHomeDesktop = getHasHomeDesktop();

		String hasHomeDesktop = resignationCacheModel.hasHomeDesktop;

		if ((hasHomeDesktop != null) && (hasHomeDesktop.length() == 0)) {
			resignationCacheModel.hasHomeDesktop = null;
		}

		resignationCacheModel.hasHomeMonitor = getHasHomeMonitor();

		String hasHomeMonitor = resignationCacheModel.hasHomeMonitor;

		if ((hasHomeMonitor != null) && (hasHomeMonitor.length() == 0)) {
			resignationCacheModel.hasHomeMonitor = null;
		}

		resignationCacheModel.otherAssetsList = getOtherAssetsList();

		String otherAssetsList = resignationCacheModel.otherAssetsList;

		if ((otherAssetsList != null) && (otherAssetsList.length() == 0)) {
			resignationCacheModel.otherAssetsList = null;
		}

		resignationCacheModel.exitQuestionnaire = isExitQuestionnaire();

		resignationCacheModel.withdrawCount = getWithdrawCount();

		return resignationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Resignation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Resignation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Resignation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Resignation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Resignation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Resignation.class, ModelWrapper.class);

	}

	private long _id;
	private String _ecode;
	private String _account;
	private String _managerEmail;
	private String _assigneeEmail;
	private boolean _assigneeTo;
	private String _alternateEmail;
	private String _stateName;
	private String _cityName;
	private String _pincode;
	private String _postalAddress;
	private String _reason;
	private Date _lastWorkingDate;
	private Date _managerSubmissionDate;
	private Date _hrSubmissionDate;
	private Date _withdrawInitiatedDate;
	private Date _abscondTerminateDate;
	private String _separationType;
	private String _keyToCompany;
	private String _keyToProject;
	private String _rating;
	private String _clientImpact;
	private String _keyToRetention;
	private String _reasonNonRetention;
	private String _employeeComment;
	private String _hrComment;
	private String _managerComment;
	private String _empWithdrawComment;
	private String _hrWithdrawComment;
	private String _reasonForLeaving;
	private String _reasonForLeavingByHr;
	private String _eligibleForRehire;
	private String _otherIssue;
	private String _replacementPlan;
	private String _replacementDetail;
	private int _status;
	private String _terminationType;
	private Date _creationDate;
	private Date _initiatedDate;
	private String _mobile;
	private String _noticePeriod;
	private Date _itAssetsSubmissionDate;
	private Date _retainEmployeeDate;
	private String _hasLaptop;
	private String _hasMouse;
	private String _hasCharger;
	private String _hasHeadSet;
	private String _hasLaptopBag;
	private String _hasHomeDesktop;
	private String _hasHomeMonitor;
	private String _otherAssetsList;
	private boolean _exitQuestionnaire;
	private int _withdrawCount;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Resignation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Resignation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("account", _account);
		_columnOriginalValues.put("managerEmail", _managerEmail);
		_columnOriginalValues.put("assigneeEmail", _assigneeEmail);
		_columnOriginalValues.put("assigneeTo", _assigneeTo);
		_columnOriginalValues.put("alternateEmail", _alternateEmail);
		_columnOriginalValues.put("stateName", _stateName);
		_columnOriginalValues.put("cityName", _cityName);
		_columnOriginalValues.put("pincode", _pincode);
		_columnOriginalValues.put("postalAddress", _postalAddress);
		_columnOriginalValues.put("reason", _reason);
		_columnOriginalValues.put("lastWorkingDate", _lastWorkingDate);
		_columnOriginalValues.put(
			"managerSubmissionDate", _managerSubmissionDate);
		_columnOriginalValues.put("hrSubmissionDate", _hrSubmissionDate);
		_columnOriginalValues.put(
			"withdrawInitiatedDate", _withdrawInitiatedDate);
		_columnOriginalValues.put(
			"abscondTerminateDate", _abscondTerminateDate);
		_columnOriginalValues.put("separationType", _separationType);
		_columnOriginalValues.put("keyToCompany", _keyToCompany);
		_columnOriginalValues.put("keyToProject", _keyToProject);
		_columnOriginalValues.put("rating", _rating);
		_columnOriginalValues.put("clientImpact", _clientImpact);
		_columnOriginalValues.put("keyToRetention", _keyToRetention);
		_columnOriginalValues.put("reasonNonRetention", _reasonNonRetention);
		_columnOriginalValues.put("employeeComment", _employeeComment);
		_columnOriginalValues.put("hrComment", _hrComment);
		_columnOriginalValues.put("managerComment", _managerComment);
		_columnOriginalValues.put("empWithdrawComment", _empWithdrawComment);
		_columnOriginalValues.put("hrWithdrawComment", _hrWithdrawComment);
		_columnOriginalValues.put("reasonForLeaving", _reasonForLeaving);
		_columnOriginalValues.put(
			"reasonForLeavingByHr", _reasonForLeavingByHr);
		_columnOriginalValues.put("eligibleForRehire", _eligibleForRehire);
		_columnOriginalValues.put("otherIssue", _otherIssue);
		_columnOriginalValues.put("replacementPlan", _replacementPlan);
		_columnOriginalValues.put("replacementDetail", _replacementDetail);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("terminationType", _terminationType);
		_columnOriginalValues.put("creationDate", _creationDate);
		_columnOriginalValues.put("initiatedDate", _initiatedDate);
		_columnOriginalValues.put("mobile", _mobile);
		_columnOriginalValues.put("noticePeriod", _noticePeriod);
		_columnOriginalValues.put(
			"itAssetsSubmissionDate", _itAssetsSubmissionDate);
		_columnOriginalValues.put("retainEmployeeDate", _retainEmployeeDate);
		_columnOriginalValues.put("hasLaptop", _hasLaptop);
		_columnOriginalValues.put("hasMouse", _hasMouse);
		_columnOriginalValues.put("hasCharger", _hasCharger);
		_columnOriginalValues.put("hasHeadSet", _hasHeadSet);
		_columnOriginalValues.put("hasLaptopBag", _hasLaptopBag);
		_columnOriginalValues.put("hasHomeDesktop", _hasHomeDesktop);
		_columnOriginalValues.put("hasHomeMonitor", _hasHomeMonitor);
		_columnOriginalValues.put("otherAssetsList", _otherAssetsList);
		_columnOriginalValues.put("exitQuestionnaire", _exitQuestionnaire);
		_columnOriginalValues.put("withdrawCount", _withdrawCount);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("ecode", 2L);

		columnBitmasks.put("account", 4L);

		columnBitmasks.put("managerEmail", 8L);

		columnBitmasks.put("assigneeEmail", 16L);

		columnBitmasks.put("assigneeTo", 32L);

		columnBitmasks.put("alternateEmail", 64L);

		columnBitmasks.put("stateName", 128L);

		columnBitmasks.put("cityName", 256L);

		columnBitmasks.put("pincode", 512L);

		columnBitmasks.put("postalAddress", 1024L);

		columnBitmasks.put("reason", 2048L);

		columnBitmasks.put("lastWorkingDate", 4096L);

		columnBitmasks.put("managerSubmissionDate", 8192L);

		columnBitmasks.put("hrSubmissionDate", 16384L);

		columnBitmasks.put("withdrawInitiatedDate", 32768L);

		columnBitmasks.put("abscondTerminateDate", 65536L);

		columnBitmasks.put("separationType", 131072L);

		columnBitmasks.put("keyToCompany", 262144L);

		columnBitmasks.put("keyToProject", 524288L);

		columnBitmasks.put("rating", 1048576L);

		columnBitmasks.put("clientImpact", 2097152L);

		columnBitmasks.put("keyToRetention", 4194304L);

		columnBitmasks.put("reasonNonRetention", 8388608L);

		columnBitmasks.put("employeeComment", 16777216L);

		columnBitmasks.put("hrComment", 33554432L);

		columnBitmasks.put("managerComment", 67108864L);

		columnBitmasks.put("empWithdrawComment", 134217728L);

		columnBitmasks.put("hrWithdrawComment", 268435456L);

		columnBitmasks.put("reasonForLeaving", 536870912L);

		columnBitmasks.put("reasonForLeavingByHr", 1073741824L);

		columnBitmasks.put("eligibleForRehire", 2147483648L);

		columnBitmasks.put("otherIssue", 4294967296L);

		columnBitmasks.put("replacementPlan", 8589934592L);

		columnBitmasks.put("replacementDetail", 17179869184L);

		columnBitmasks.put("status", 34359738368L);

		columnBitmasks.put("terminationType", 68719476736L);

		columnBitmasks.put("creationDate", 137438953472L);

		columnBitmasks.put("initiatedDate", 274877906944L);

		columnBitmasks.put("mobile", 549755813888L);

		columnBitmasks.put("noticePeriod", 1099511627776L);

		columnBitmasks.put("itAssetsSubmissionDate", 2199023255552L);

		columnBitmasks.put("retainEmployeeDate", 4398046511104L);

		columnBitmasks.put("hasLaptop", 8796093022208L);

		columnBitmasks.put("hasMouse", 17592186044416L);

		columnBitmasks.put("hasCharger", 35184372088832L);

		columnBitmasks.put("hasHeadSet", 70368744177664L);

		columnBitmasks.put("hasLaptopBag", 140737488355328L);

		columnBitmasks.put("hasHomeDesktop", 281474976710656L);

		columnBitmasks.put("hasHomeMonitor", 562949953421312L);

		columnBitmasks.put("otherAssetsList", 1125899906842624L);

		columnBitmasks.put("exitQuestionnaire", 2251799813685248L);

		columnBitmasks.put("withdrawCount", 4503599627370496L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Resignation _escapedModel;

}