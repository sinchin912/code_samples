/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.notice.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.notice.core.model.ExitState;
import com.trantorinc.synergy.notice.core.model.ExitStateModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ExitState service. Represents a row in the &quot;NOTICE_ExitState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExitStateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExitStateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExitStateImpl
 * @generated
 */
public class ExitStateModelImpl
	extends BaseModelImpl<ExitState> implements ExitStateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a exit state model instance should use the <code>ExitState</code> interface instead.
	 */
	public static final String TABLE_NAME = "NOTICE_ExitState";

	public static final Object[][] TABLE_COLUMNS = {
		{"exitStateId", Types.BIGINT}, {"exitStateKey", Types.INTEGER},
		{"exitStateDescription", Types.VARCHAR},
		{"exitStateDisplay", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("exitStateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("exitStateKey", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("exitStateDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exitStateDisplay", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NOTICE_ExitState (exitStateId LONG not null primary key,exitStateKey INTEGER,exitStateDescription VARCHAR(75) null,exitStateDisplay VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table NOTICE_ExitState";

	public static final String ORDER_BY_JPQL =
		" ORDER BY exitState.exitStateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NOTICE_ExitState.exitStateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXITSTATEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ExitStateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _exitStateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExitStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _exitStateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExitState.class;
	}

	@Override
	public String getModelClassName() {
		return ExitState.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ExitState, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ExitState, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExitState, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ExitState)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ExitState, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ExitState, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ExitState)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ExitState, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ExitState, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ExitState, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ExitState, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ExitState, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ExitState, Object>>();
		Map<String, BiConsumer<ExitState, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ExitState, ?>>();

		attributeGetterFunctions.put("exitStateId", ExitState::getExitStateId);
		attributeSetterBiConsumers.put(
			"exitStateId",
			(BiConsumer<ExitState, Long>)ExitState::setExitStateId);
		attributeGetterFunctions.put(
			"exitStateKey", ExitState::getExitStateKey);
		attributeSetterBiConsumers.put(
			"exitStateKey",
			(BiConsumer<ExitState, Integer>)ExitState::setExitStateKey);
		attributeGetterFunctions.put(
			"exitStateDescription", ExitState::getExitStateDescription);
		attributeSetterBiConsumers.put(
			"exitStateDescription",
			(BiConsumer<ExitState, String>)ExitState::setExitStateDescription);
		attributeGetterFunctions.put(
			"exitStateDisplay", ExitState::getExitStateDisplay);
		attributeSetterBiConsumers.put(
			"exitStateDisplay",
			(BiConsumer<ExitState, String>)ExitState::setExitStateDisplay);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getExitStateId() {
		return _exitStateId;
	}

	@Override
	public void setExitStateId(long exitStateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitStateId = exitStateId;
	}

	@Override
	public int getExitStateKey() {
		return _exitStateKey;
	}

	@Override
	public void setExitStateKey(int exitStateKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitStateKey = exitStateKey;
	}

	@Override
	public String getExitStateDescription() {
		if (_exitStateDescription == null) {
			return "";
		}
		else {
			return _exitStateDescription;
		}
	}

	@Override
	public void setExitStateDescription(String exitStateDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitStateDescription = exitStateDescription;
	}

	@Override
	public String getExitStateDisplay() {
		if (_exitStateDisplay == null) {
			return "";
		}
		else {
			return _exitStateDisplay;
		}
	}

	@Override
	public void setExitStateDisplay(String exitStateDisplay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exitStateDisplay = exitStateDisplay;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ExitState.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExitState toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ExitState>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExitStateImpl exitStateImpl = new ExitStateImpl();

		exitStateImpl.setExitStateId(getExitStateId());
		exitStateImpl.setExitStateKey(getExitStateKey());
		exitStateImpl.setExitStateDescription(getExitStateDescription());
		exitStateImpl.setExitStateDisplay(getExitStateDisplay());

		exitStateImpl.resetOriginalValues();

		return exitStateImpl;
	}

	@Override
	public ExitState cloneWithOriginalValues() {
		ExitStateImpl exitStateImpl = new ExitStateImpl();

		exitStateImpl.setExitStateId(
			this.<Long>getColumnOriginalValue("exitStateId"));
		exitStateImpl.setExitStateKey(
			this.<Integer>getColumnOriginalValue("exitStateKey"));
		exitStateImpl.setExitStateDescription(
			this.<String>getColumnOriginalValue("exitStateDescription"));
		exitStateImpl.setExitStateDisplay(
			this.<String>getColumnOriginalValue("exitStateDisplay"));

		return exitStateImpl;
	}

	@Override
	public int compareTo(ExitState exitState) {
		long primaryKey = exitState.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ExitState)) {
			return false;
		}

		ExitState exitState = (ExitState)object;

		long primaryKey = exitState.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ExitState> toCacheModel() {
		ExitStateCacheModel exitStateCacheModel = new ExitStateCacheModel();

		exitStateCacheModel.exitStateId = getExitStateId();

		exitStateCacheModel.exitStateKey = getExitStateKey();

		exitStateCacheModel.exitStateDescription = getExitStateDescription();

		String exitStateDescription = exitStateCacheModel.exitStateDescription;

		if ((exitStateDescription != null) &&
			(exitStateDescription.length() == 0)) {

			exitStateCacheModel.exitStateDescription = null;
		}

		exitStateCacheModel.exitStateDisplay = getExitStateDisplay();

		String exitStateDisplay = exitStateCacheModel.exitStateDisplay;

		if ((exitStateDisplay != null) && (exitStateDisplay.length() == 0)) {
			exitStateCacheModel.exitStateDisplay = null;
		}

		return exitStateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ExitState, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ExitState, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExitState, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ExitState)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ExitState>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ExitState.class, ModelWrapper.class);

	}

	private long _exitStateId;
	private int _exitStateKey;
	private String _exitStateDescription;
	private String _exitStateDisplay;

	public <T> T getColumnValue(String columnName) {
		Function<ExitState, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ExitState)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("exitStateId", _exitStateId);
		_columnOriginalValues.put("exitStateKey", _exitStateKey);
		_columnOriginalValues.put(
			"exitStateDescription", _exitStateDescription);
		_columnOriginalValues.put("exitStateDisplay", _exitStateDisplay);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("exitStateId", 1L);

		columnBitmasks.put("exitStateKey", 2L);

		columnBitmasks.put("exitStateDescription", 4L);

		columnBitmasks.put("exitStateDisplay", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ExitState _escapedModel;

}