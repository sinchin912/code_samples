/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.game.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.game.core.model.Prize;
import com.trantorinc.synergy.game.core.model.PrizeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Prize service. Represents a row in the &quot;GAME_Prize&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PrizeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PrizeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PrizeImpl
 * @generated
 */
public class PrizeModelImpl extends BaseModelImpl<Prize> implements PrizeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a prize model instance should use the <code>Prize</code> interface instead.
	 */
	public static final String TABLE_NAME = "GAME_Prize";

	public static final Object[][] TABLE_COLUMNS = {
		{"prizeId", Types.BIGINT}, {"year", Types.INTEGER},
		{"sequence", Types.INTEGER}, {"description", Types.VARCHAR},
		{"winner", Types.VARCHAR}, {"ticketId", Types.BIGINT},
		{"surprise", Types.BOOLEAN}, {"fileId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("prizeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sequence", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("winner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ticketId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("surprise", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fileId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GAME_Prize (prizeId LONG not null primary key,year INTEGER,sequence INTEGER,description VARCHAR(75) null,winner VARCHAR(75) null,ticketId LONG,surprise BOOLEAN,fileId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table GAME_Prize";

	public static final String ORDER_BY_JPQL = " ORDER BY prize.prizeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GAME_Prize.prizeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRIZEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PrizeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _prizeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPrizeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _prizeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Prize.class;
	}

	@Override
	public String getModelClassName() {
		return Prize.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Prize, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Prize, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Prize, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Prize)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Prize, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Prize, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Prize)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Prize, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Prize, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Prize, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Prize, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Prize, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Prize, Object>>();
		Map<String, BiConsumer<Prize, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Prize, ?>>();

		attributeGetterFunctions.put("prizeId", Prize::getPrizeId);
		attributeSetterBiConsumers.put(
			"prizeId", (BiConsumer<Prize, Long>)Prize::setPrizeId);
		attributeGetterFunctions.put("year", Prize::getYear);
		attributeSetterBiConsumers.put(
			"year", (BiConsumer<Prize, Integer>)Prize::setYear);
		attributeGetterFunctions.put("sequence", Prize::getSequence);
		attributeSetterBiConsumers.put(
			"sequence", (BiConsumer<Prize, Integer>)Prize::setSequence);
		attributeGetterFunctions.put("description", Prize::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Prize, String>)Prize::setDescription);
		attributeGetterFunctions.put("winner", Prize::getWinner);
		attributeSetterBiConsumers.put(
			"winner", (BiConsumer<Prize, String>)Prize::setWinner);
		attributeGetterFunctions.put("ticketId", Prize::getTicketId);
		attributeSetterBiConsumers.put(
			"ticketId", (BiConsumer<Prize, Long>)Prize::setTicketId);
		attributeGetterFunctions.put("surprise", Prize::getSurprise);
		attributeSetterBiConsumers.put(
			"surprise", (BiConsumer<Prize, Boolean>)Prize::setSurprise);
		attributeGetterFunctions.put("fileId", Prize::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<Prize, String>)Prize::setFileId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getPrizeId() {
		return _prizeId;
	}

	@Override
	public void setPrizeId(long prizeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prizeId = prizeId;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@Override
	public int getSequence() {
		return _sequence;
	}

	@Override
	public void setSequence(int sequence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sequence = sequence;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public String getWinner() {
		if (_winner == null) {
			return "";
		}
		else {
			return _winner;
		}
	}

	@Override
	public void setWinner(String winner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_winner = winner;
	}

	@Override
	public long getTicketId() {
		return _ticketId;
	}

	@Override
	public void setTicketId(long ticketId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ticketId = ticketId;
	}

	@Override
	public boolean getSurprise() {
		return _surprise;
	}

	@Override
	public boolean isSurprise() {
		return _surprise;
	}

	@Override
	public void setSurprise(boolean surprise) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surprise = surprise;
	}

	@Override
	public String getFileId() {
		if (_fileId == null) {
			return "";
		}
		else {
			return _fileId;
		}
	}

	@Override
	public void setFileId(String fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Prize.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Prize toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Prize>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PrizeImpl prizeImpl = new PrizeImpl();

		prizeImpl.setPrizeId(getPrizeId());
		prizeImpl.setYear(getYear());
		prizeImpl.setSequence(getSequence());
		prizeImpl.setDescription(getDescription());
		prizeImpl.setWinner(getWinner());
		prizeImpl.setTicketId(getTicketId());
		prizeImpl.setSurprise(isSurprise());
		prizeImpl.setFileId(getFileId());

		prizeImpl.resetOriginalValues();

		return prizeImpl;
	}

	@Override
	public Prize cloneWithOriginalValues() {
		PrizeImpl prizeImpl = new PrizeImpl();

		prizeImpl.setPrizeId(this.<Long>getColumnOriginalValue("prizeId"));
		prizeImpl.setYear(this.<Integer>getColumnOriginalValue("year"));
		prizeImpl.setSequence(this.<Integer>getColumnOriginalValue("sequence"));
		prizeImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		prizeImpl.setWinner(this.<String>getColumnOriginalValue("winner"));
		prizeImpl.setTicketId(this.<Long>getColumnOriginalValue("ticketId"));
		prizeImpl.setSurprise(this.<Boolean>getColumnOriginalValue("surprise"));
		prizeImpl.setFileId(this.<String>getColumnOriginalValue("fileId"));

		return prizeImpl;
	}

	@Override
	public int compareTo(Prize prize) {
		int value = 0;

		if (getPrizeId() < prize.getPrizeId()) {
			value = -1;
		}
		else if (getPrizeId() > prize.getPrizeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Prize)) {
			return false;
		}

		Prize prize = (Prize)object;

		long primaryKey = prize.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Prize> toCacheModel() {
		PrizeCacheModel prizeCacheModel = new PrizeCacheModel();

		prizeCacheModel.prizeId = getPrizeId();

		prizeCacheModel.year = getYear();

		prizeCacheModel.sequence = getSequence();

		prizeCacheModel.description = getDescription();

		String description = prizeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			prizeCacheModel.description = null;
		}

		prizeCacheModel.winner = getWinner();

		String winner = prizeCacheModel.winner;

		if ((winner != null) && (winner.length() == 0)) {
			prizeCacheModel.winner = null;
		}

		prizeCacheModel.ticketId = getTicketId();

		prizeCacheModel.surprise = isSurprise();

		prizeCacheModel.fileId = getFileId();

		String fileId = prizeCacheModel.fileId;

		if ((fileId != null) && (fileId.length() == 0)) {
			prizeCacheModel.fileId = null;
		}

		return prizeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Prize, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Prize, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Prize, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Prize)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Prize>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Prize.class, ModelWrapper.class);

	}

	private long _prizeId;
	private int _year;
	private int _sequence;
	private String _description;
	private String _winner;
	private long _ticketId;
	private boolean _surprise;
	private String _fileId;

	public <T> T getColumnValue(String columnName) {
		Function<Prize, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Prize)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("prizeId", _prizeId);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("sequence", _sequence);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("winner", _winner);
		_columnOriginalValues.put("ticketId", _ticketId);
		_columnOriginalValues.put("surprise", _surprise);
		_columnOriginalValues.put("fileId", _fileId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("prizeId", 1L);

		columnBitmasks.put("year", 2L);

		columnBitmasks.put("sequence", 4L);

		columnBitmasks.put("description", 8L);

		columnBitmasks.put("winner", 16L);

		columnBitmasks.put("ticketId", 32L);

		columnBitmasks.put("surprise", 64L);

		columnBitmasks.put("fileId", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Prize _escapedModel;

}