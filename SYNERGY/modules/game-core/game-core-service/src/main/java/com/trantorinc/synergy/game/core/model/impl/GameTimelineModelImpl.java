/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.game.core.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.game.core.model.GameTimeline;
import com.trantorinc.synergy.game.core.model.GameTimelineModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GameTimeline service. Represents a row in the &quot;GAME_GameTimeline&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GameTimelineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GameTimelineImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GameTimelineImpl
 * @generated
 */
public class GameTimelineModelImpl
	extends BaseModelImpl<GameTimeline> implements GameTimelineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a game timeline model instance should use the <code>GameTimeline</code> interface instead.
	 */
	public static final String TABLE_NAME = "GAME_GameTimeline";

	public static final Object[][] TABLE_COLUMNS = {
		{"name", Types.VARCHAR}, {"openDate", Types.TIMESTAMP},
		{"freezeDate", Types.TIMESTAMP}, {"actionDate", Types.TIMESTAMP},
		{"closeDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("openDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("freezeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("closeDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GAME_GameTimeline (name VARCHAR(75) not null primary key,openDate DATE null,freezeDate DATE null,actionDate DATE null,closeDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table GAME_GameTimeline";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gameTimeline.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GAME_GameTimeline.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GameTimelineModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _name;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _name;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GameTimeline.class;
	}

	@Override
	public String getModelClassName() {
		return GameTimeline.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GameTimeline, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GameTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GameTimeline, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((GameTimeline)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GameTimeline, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GameTimeline, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GameTimeline)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GameTimeline, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GameTimeline, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GameTimeline, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GameTimeline, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GameTimeline, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GameTimeline, Object>>();
		Map<String, BiConsumer<GameTimeline, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GameTimeline, ?>>();

		attributeGetterFunctions.put("name", GameTimeline::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<GameTimeline, String>)GameTimeline::setName);
		attributeGetterFunctions.put("openDate", GameTimeline::getOpenDate);
		attributeSetterBiConsumers.put(
			"openDate",
			(BiConsumer<GameTimeline, Date>)GameTimeline::setOpenDate);
		attributeGetterFunctions.put("freezeDate", GameTimeline::getFreezeDate);
		attributeSetterBiConsumers.put(
			"freezeDate",
			(BiConsumer<GameTimeline, Date>)GameTimeline::setFreezeDate);
		attributeGetterFunctions.put("actionDate", GameTimeline::getActionDate);
		attributeSetterBiConsumers.put(
			"actionDate",
			(BiConsumer<GameTimeline, Date>)GameTimeline::setActionDate);
		attributeGetterFunctions.put("closeDate", GameTimeline::getCloseDate);
		attributeSetterBiConsumers.put(
			"closeDate",
			(BiConsumer<GameTimeline, Date>)GameTimeline::setCloseDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public Date getOpenDate() {
		return _openDate;
	}

	@Override
	public void setOpenDate(Date openDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_openDate = openDate;
	}

	@Override
	public Date getFreezeDate() {
		return _freezeDate;
	}

	@Override
	public void setFreezeDate(Date freezeDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_freezeDate = freezeDate;
	}

	@Override
	public Date getActionDate() {
		return _actionDate;
	}

	@Override
	public void setActionDate(Date actionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actionDate = actionDate;
	}

	@Override
	public Date getCloseDate() {
		return _closeDate;
	}

	@Override
	public void setCloseDate(Date closeDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_closeDate = closeDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public GameTimeline toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GameTimeline>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GameTimelineImpl gameTimelineImpl = new GameTimelineImpl();

		gameTimelineImpl.setName(getName());
		gameTimelineImpl.setOpenDate(getOpenDate());
		gameTimelineImpl.setFreezeDate(getFreezeDate());
		gameTimelineImpl.setActionDate(getActionDate());
		gameTimelineImpl.setCloseDate(getCloseDate());

		gameTimelineImpl.resetOriginalValues();

		return gameTimelineImpl;
	}

	@Override
	public GameTimeline cloneWithOriginalValues() {
		GameTimelineImpl gameTimelineImpl = new GameTimelineImpl();

		gameTimelineImpl.setName(this.<String>getColumnOriginalValue("name"));
		gameTimelineImpl.setOpenDate(
			this.<Date>getColumnOriginalValue("openDate"));
		gameTimelineImpl.setFreezeDate(
			this.<Date>getColumnOriginalValue("freezeDate"));
		gameTimelineImpl.setActionDate(
			this.<Date>getColumnOriginalValue("actionDate"));
		gameTimelineImpl.setCloseDate(
			this.<Date>getColumnOriginalValue("closeDate"));

		return gameTimelineImpl;
	}

	@Override
	public int compareTo(GameTimeline gameTimeline) {
		String primaryKey = gameTimeline.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof GameTimeline)) {
			return false;
		}

		GameTimeline gameTimeline = (GameTimeline)object;

		String primaryKey = gameTimeline.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<GameTimeline> toCacheModel() {
		GameTimelineCacheModel gameTimelineCacheModel =
			new GameTimelineCacheModel();

		gameTimelineCacheModel.name = getName();

		String name = gameTimelineCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			gameTimelineCacheModel.name = null;
		}

		Date openDate = getOpenDate();

		if (openDate != null) {
			gameTimelineCacheModel.openDate = openDate.getTime();
		}
		else {
			gameTimelineCacheModel.openDate = Long.MIN_VALUE;
		}

		Date freezeDate = getFreezeDate();

		if (freezeDate != null) {
			gameTimelineCacheModel.freezeDate = freezeDate.getTime();
		}
		else {
			gameTimelineCacheModel.freezeDate = Long.MIN_VALUE;
		}

		Date actionDate = getActionDate();

		if (actionDate != null) {
			gameTimelineCacheModel.actionDate = actionDate.getTime();
		}
		else {
			gameTimelineCacheModel.actionDate = Long.MIN_VALUE;
		}

		Date closeDate = getCloseDate();

		if (closeDate != null) {
			gameTimelineCacheModel.closeDate = closeDate.getTime();
		}
		else {
			gameTimelineCacheModel.closeDate = Long.MIN_VALUE;
		}

		return gameTimelineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GameTimeline, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GameTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GameTimeline, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((GameTimeline)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GameTimeline>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					GameTimeline.class, ModelWrapper.class);

	}

	private String _name;
	private Date _openDate;
	private Date _freezeDate;
	private Date _actionDate;
	private Date _closeDate;

	public <T> T getColumnValue(String columnName) {
		Function<GameTimeline, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((GameTimeline)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("openDate", _openDate);
		_columnOriginalValues.put("freezeDate", _freezeDate);
		_columnOriginalValues.put("actionDate", _actionDate);
		_columnOriginalValues.put("closeDate", _closeDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("name", 1L);

		columnBitmasks.put("openDate", 2L);

		columnBitmasks.put("freezeDate", 4L);

		columnBitmasks.put("actionDate", 8L);

		columnBitmasks.put("closeDate", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private GameTimeline _escapedModel;

}