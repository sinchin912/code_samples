/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.game.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.game.core.model.Ticket;
import com.trantorinc.synergy.game.core.model.TicketModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Ticket service. Represents a row in the &quot;GAME_Ticket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TicketModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketImpl
 * @generated
 */
public class TicketModelImpl
	extends BaseModelImpl<Ticket> implements TicketModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket model instance should use the <code>Ticket</code> interface instead.
	 */
	public static final String TABLE_NAME = "GAME_Ticket";

	public static final Object[][] TABLE_COLUMNS = {
		{"ticketId", Types.BIGINT}, {"year", Types.INTEGER},
		{"ecode", Types.VARCHAR}, {"ticketNumber", Types.VARCHAR},
		{"createDatetime", Types.TIMESTAMP}, {"draw", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ticketId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ticketNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDatetime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("draw", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GAME_Ticket (ticketId LONG not null primary key,year INTEGER,ecode VARCHAR(75) null,ticketNumber VARCHAR(75) null,createDatetime DATE null,draw BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table GAME_Ticket";

	public static final String ORDER_BY_JPQL = " ORDER BY ticket.ecode ASC";

	public static final String ORDER_BY_SQL = " ORDER BY GAME_Ticket.ecode ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ECODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TicketModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ticketId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTicketId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ticketId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ticket.class;
	}

	@Override
	public String getModelClassName() {
		return Ticket.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ticket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ticket, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Ticket)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ticket, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ticket, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Ticket)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ticket, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ticket, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Ticket, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Ticket, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Ticket, Object>>();
		Map<String, BiConsumer<Ticket, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Ticket, ?>>();

		attributeGetterFunctions.put("ticketId", Ticket::getTicketId);
		attributeSetterBiConsumers.put(
			"ticketId", (BiConsumer<Ticket, Long>)Ticket::setTicketId);
		attributeGetterFunctions.put("year", Ticket::getYear);
		attributeSetterBiConsumers.put(
			"year", (BiConsumer<Ticket, Integer>)Ticket::setYear);
		attributeGetterFunctions.put("ecode", Ticket::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Ticket, String>)Ticket::setEcode);
		attributeGetterFunctions.put("ticketNumber", Ticket::getTicketNumber);
		attributeSetterBiConsumers.put(
			"ticketNumber",
			(BiConsumer<Ticket, String>)Ticket::setTicketNumber);
		attributeGetterFunctions.put(
			"createDatetime", Ticket::getCreateDatetime);
		attributeSetterBiConsumers.put(
			"createDatetime",
			(BiConsumer<Ticket, Date>)Ticket::setCreateDatetime);
		attributeGetterFunctions.put("draw", Ticket::getDraw);
		attributeSetterBiConsumers.put(
			"draw", (BiConsumer<Ticket, Boolean>)Ticket::setDraw);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTicketId() {
		return _ticketId;
	}

	@Override
	public void setTicketId(long ticketId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ticketId = ticketId;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getTicketNumber() {
		if (_ticketNumber == null) {
			return "";
		}
		else {
			return _ticketNumber;
		}
	}

	@Override
	public void setTicketNumber(String ticketNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ticketNumber = ticketNumber;
	}

	@Override
	public Date getCreateDatetime() {
		return _createDatetime;
	}

	@Override
	public void setCreateDatetime(Date createDatetime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDatetime = createDatetime;
	}

	@Override
	public boolean getDraw() {
		return _draw;
	}

	@Override
	public boolean isDraw() {
		return _draw;
	}

	@Override
	public void setDraw(boolean draw) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_draw = draw;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Ticket.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Ticket toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Ticket>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketImpl ticketImpl = new TicketImpl();

		ticketImpl.setTicketId(getTicketId());
		ticketImpl.setYear(getYear());
		ticketImpl.setEcode(getEcode());
		ticketImpl.setTicketNumber(getTicketNumber());
		ticketImpl.setCreateDatetime(getCreateDatetime());
		ticketImpl.setDraw(isDraw());

		ticketImpl.resetOriginalValues();

		return ticketImpl;
	}

	@Override
	public Ticket cloneWithOriginalValues() {
		TicketImpl ticketImpl = new TicketImpl();

		ticketImpl.setTicketId(this.<Long>getColumnOriginalValue("ticketId"));
		ticketImpl.setYear(this.<Integer>getColumnOriginalValue("year"));
		ticketImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		ticketImpl.setTicketNumber(
			this.<String>getColumnOriginalValue("ticketNumber"));
		ticketImpl.setCreateDatetime(
			this.<Date>getColumnOriginalValue("createDatetime"));
		ticketImpl.setDraw(this.<Boolean>getColumnOriginalValue("draw"));

		return ticketImpl;
	}

	@Override
	public int compareTo(Ticket ticket) {
		int value = 0;

		value = getEcode().compareTo(ticket.getEcode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Ticket)) {
			return false;
		}

		Ticket ticket = (Ticket)object;

		long primaryKey = ticket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Ticket> toCacheModel() {
		TicketCacheModel ticketCacheModel = new TicketCacheModel();

		ticketCacheModel.ticketId = getTicketId();

		ticketCacheModel.year = getYear();

		ticketCacheModel.ecode = getEcode();

		String ecode = ticketCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			ticketCacheModel.ecode = null;
		}

		ticketCacheModel.ticketNumber = getTicketNumber();

		String ticketNumber = ticketCacheModel.ticketNumber;

		if ((ticketNumber != null) && (ticketNumber.length() == 0)) {
			ticketCacheModel.ticketNumber = null;
		}

		Date createDatetime = getCreateDatetime();

		if (createDatetime != null) {
			ticketCacheModel.createDatetime = createDatetime.getTime();
		}
		else {
			ticketCacheModel.createDatetime = Long.MIN_VALUE;
		}

		ticketCacheModel.draw = isDraw();

		return ticketCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ticket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ticket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ticket, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Ticket)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Ticket>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Ticket.class, ModelWrapper.class);

	}

	private long _ticketId;
	private int _year;
	private String _ecode;
	private String _ticketNumber;
	private Date _createDatetime;
	private boolean _draw;

	public <T> T getColumnValue(String columnName) {
		Function<Ticket, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Ticket)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ticketId", _ticketId);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("ticketNumber", _ticketNumber);
		_columnOriginalValues.put("createDatetime", _createDatetime);
		_columnOriginalValues.put("draw", _draw);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ticketId", 1L);

		columnBitmasks.put("year", 2L);

		columnBitmasks.put("ecode", 4L);

		columnBitmasks.put("ticketNumber", 8L);

		columnBitmasks.put("createDatetime", 16L);

		columnBitmasks.put("draw", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Ticket _escapedModel;

}