/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.game.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.game.core.model.Santa;
import com.trantorinc.synergy.game.core.model.SantaModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Santa service. Represents a row in the &quot;GAME_Santa&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SantaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SantaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SantaImpl
 * @generated
 */
public class SantaModelImpl extends BaseModelImpl<Santa> implements SantaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a santa model instance should use the <code>Santa</code> interface instead.
	 */
	public static final String TABLE_NAME = "GAME_Santa";

	public static final Object[][] TABLE_COLUMNS = {
		{"santaId", Types.BIGINT}, {"year", Types.INTEGER},
		{"ecode", Types.VARCHAR}, {"mobile", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"pincode", Types.VARCHAR}, {"postalAddress", Types.VARCHAR},
		{"santaEcode", Types.VARCHAR}, {"guessedEcode", Types.VARCHAR},
		{"giftSent", Types.BOOLEAN}, {"emailSent", Types.BOOLEAN},
		{"fileId", Types.VARCHAR}, {"createDatetime", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("santaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pincode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("santaEcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guessedEcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("giftSent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("emailSent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fileId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDatetime", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GAME_Santa (santaId LONG not null primary key,year INTEGER,ecode VARCHAR(75) null,mobile VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,pincode VARCHAR(75) null,postalAddress VARCHAR(2000) null,santaEcode VARCHAR(75) null,guessedEcode VARCHAR(75) null,giftSent BOOLEAN,emailSent BOOLEAN,fileId VARCHAR(75) null,createDatetime DATE null)";

	public static final String TABLE_SQL_DROP = "drop table GAME_Santa";

	public static final String ORDER_BY_JPQL = " ORDER BY santa.santaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GAME_Santa.santaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SANTAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SantaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _santaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSantaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _santaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Santa.class;
	}

	@Override
	public String getModelClassName() {
		return Santa.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Santa, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Santa, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Santa, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Santa)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Santa, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Santa, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Santa)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Santa, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Santa, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Santa, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Santa, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Santa, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Santa, Object>>();
		Map<String, BiConsumer<Santa, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Santa, ?>>();

		attributeGetterFunctions.put("santaId", Santa::getSantaId);
		attributeSetterBiConsumers.put(
			"santaId", (BiConsumer<Santa, Long>)Santa::setSantaId);
		attributeGetterFunctions.put("year", Santa::getYear);
		attributeSetterBiConsumers.put(
			"year", (BiConsumer<Santa, Integer>)Santa::setYear);
		attributeGetterFunctions.put("ecode", Santa::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Santa, String>)Santa::setEcode);
		attributeGetterFunctions.put("mobile", Santa::getMobile);
		attributeSetterBiConsumers.put(
			"mobile", (BiConsumer<Santa, String>)Santa::setMobile);
		attributeGetterFunctions.put("city", Santa::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Santa, String>)Santa::setCity);
		attributeGetterFunctions.put("state", Santa::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Santa, String>)Santa::setState);
		attributeGetterFunctions.put("pincode", Santa::getPincode);
		attributeSetterBiConsumers.put(
			"pincode", (BiConsumer<Santa, String>)Santa::setPincode);
		attributeGetterFunctions.put("postalAddress", Santa::getPostalAddress);
		attributeSetterBiConsumers.put(
			"postalAddress",
			(BiConsumer<Santa, String>)Santa::setPostalAddress);
		attributeGetterFunctions.put("santaEcode", Santa::getSantaEcode);
		attributeSetterBiConsumers.put(
			"santaEcode", (BiConsumer<Santa, String>)Santa::setSantaEcode);
		attributeGetterFunctions.put("guessedEcode", Santa::getGuessedEcode);
		attributeSetterBiConsumers.put(
			"guessedEcode", (BiConsumer<Santa, String>)Santa::setGuessedEcode);
		attributeGetterFunctions.put("giftSent", Santa::getGiftSent);
		attributeSetterBiConsumers.put(
			"giftSent", (BiConsumer<Santa, Boolean>)Santa::setGiftSent);
		attributeGetterFunctions.put("emailSent", Santa::getEmailSent);
		attributeSetterBiConsumers.put(
			"emailSent", (BiConsumer<Santa, Boolean>)Santa::setEmailSent);
		attributeGetterFunctions.put("fileId", Santa::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<Santa, String>)Santa::setFileId);
		attributeGetterFunctions.put(
			"createDatetime", Santa::getCreateDatetime);
		attributeSetterBiConsumers.put(
			"createDatetime",
			(BiConsumer<Santa, Date>)Santa::setCreateDatetime);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSantaId() {
		return _santaId;
	}

	@Override
	public void setSantaId(long santaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_santaId = santaId;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile = mobile;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@Override
	public String getPincode() {
		if (_pincode == null) {
			return "";
		}
		else {
			return _pincode;
		}
	}

	@Override
	public void setPincode(String pincode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pincode = pincode;
	}

	@Override
	public String getPostalAddress() {
		if (_postalAddress == null) {
			return "";
		}
		else {
			return _postalAddress;
		}
	}

	@Override
	public void setPostalAddress(String postalAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalAddress = postalAddress;
	}

	@Override
	public String getSantaEcode() {
		if (_santaEcode == null) {
			return "";
		}
		else {
			return _santaEcode;
		}
	}

	@Override
	public void setSantaEcode(String santaEcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_santaEcode = santaEcode;
	}

	@Override
	public String getGuessedEcode() {
		if (_guessedEcode == null) {
			return "";
		}
		else {
			return _guessedEcode;
		}
	}

	@Override
	public void setGuessedEcode(String guessedEcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_guessedEcode = guessedEcode;
	}

	@Override
	public boolean getGiftSent() {
		return _giftSent;
	}

	@Override
	public boolean isGiftSent() {
		return _giftSent;
	}

	@Override
	public void setGiftSent(boolean giftSent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_giftSent = giftSent;
	}

	@Override
	public boolean getEmailSent() {
		return _emailSent;
	}

	@Override
	public boolean isEmailSent() {
		return _emailSent;
	}

	@Override
	public void setEmailSent(boolean emailSent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailSent = emailSent;
	}

	@Override
	public String getFileId() {
		if (_fileId == null) {
			return "";
		}
		else {
			return _fileId;
		}
	}

	@Override
	public void setFileId(String fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	@Override
	public Date getCreateDatetime() {
		return _createDatetime;
	}

	@Override
	public void setCreateDatetime(Date createDatetime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDatetime = createDatetime;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Santa.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Santa toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Santa>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SantaImpl santaImpl = new SantaImpl();

		santaImpl.setSantaId(getSantaId());
		santaImpl.setYear(getYear());
		santaImpl.setEcode(getEcode());
		santaImpl.setMobile(getMobile());
		santaImpl.setCity(getCity());
		santaImpl.setState(getState());
		santaImpl.setPincode(getPincode());
		santaImpl.setPostalAddress(getPostalAddress());
		santaImpl.setSantaEcode(getSantaEcode());
		santaImpl.setGuessedEcode(getGuessedEcode());
		santaImpl.setGiftSent(isGiftSent());
		santaImpl.setEmailSent(isEmailSent());
		santaImpl.setFileId(getFileId());
		santaImpl.setCreateDatetime(getCreateDatetime());

		santaImpl.resetOriginalValues();

		return santaImpl;
	}

	@Override
	public Santa cloneWithOriginalValues() {
		SantaImpl santaImpl = new SantaImpl();

		santaImpl.setSantaId(this.<Long>getColumnOriginalValue("santaId"));
		santaImpl.setYear(this.<Integer>getColumnOriginalValue("year"));
		santaImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		santaImpl.setMobile(this.<String>getColumnOriginalValue("mobile"));
		santaImpl.setCity(this.<String>getColumnOriginalValue("city"));
		santaImpl.setState(this.<String>getColumnOriginalValue("state_"));
		santaImpl.setPincode(this.<String>getColumnOriginalValue("pincode"));
		santaImpl.setPostalAddress(
			this.<String>getColumnOriginalValue("postalAddress"));
		santaImpl.setSantaEcode(
			this.<String>getColumnOriginalValue("santaEcode"));
		santaImpl.setGuessedEcode(
			this.<String>getColumnOriginalValue("guessedEcode"));
		santaImpl.setGiftSent(this.<Boolean>getColumnOriginalValue("giftSent"));
		santaImpl.setEmailSent(
			this.<Boolean>getColumnOriginalValue("emailSent"));
		santaImpl.setFileId(this.<String>getColumnOriginalValue("fileId"));
		santaImpl.setCreateDatetime(
			this.<Date>getColumnOriginalValue("createDatetime"));

		return santaImpl;
	}

	@Override
	public int compareTo(Santa santa) {
		long primaryKey = santa.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Santa)) {
			return false;
		}

		Santa santa = (Santa)object;

		long primaryKey = santa.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Santa> toCacheModel() {
		SantaCacheModel santaCacheModel = new SantaCacheModel();

		santaCacheModel.santaId = getSantaId();

		santaCacheModel.year = getYear();

		santaCacheModel.ecode = getEcode();

		String ecode = santaCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			santaCacheModel.ecode = null;
		}

		santaCacheModel.mobile = getMobile();

		String mobile = santaCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			santaCacheModel.mobile = null;
		}

		santaCacheModel.city = getCity();

		String city = santaCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			santaCacheModel.city = null;
		}

		santaCacheModel.state = getState();

		String state = santaCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			santaCacheModel.state = null;
		}

		santaCacheModel.pincode = getPincode();

		String pincode = santaCacheModel.pincode;

		if ((pincode != null) && (pincode.length() == 0)) {
			santaCacheModel.pincode = null;
		}

		santaCacheModel.postalAddress = getPostalAddress();

		String postalAddress = santaCacheModel.postalAddress;

		if ((postalAddress != null) && (postalAddress.length() == 0)) {
			santaCacheModel.postalAddress = null;
		}

		santaCacheModel.santaEcode = getSantaEcode();

		String santaEcode = santaCacheModel.santaEcode;

		if ((santaEcode != null) && (santaEcode.length() == 0)) {
			santaCacheModel.santaEcode = null;
		}

		santaCacheModel.guessedEcode = getGuessedEcode();

		String guessedEcode = santaCacheModel.guessedEcode;

		if ((guessedEcode != null) && (guessedEcode.length() == 0)) {
			santaCacheModel.guessedEcode = null;
		}

		santaCacheModel.giftSent = isGiftSent();

		santaCacheModel.emailSent = isEmailSent();

		santaCacheModel.fileId = getFileId();

		String fileId = santaCacheModel.fileId;

		if ((fileId != null) && (fileId.length() == 0)) {
			santaCacheModel.fileId = null;
		}

		Date createDatetime = getCreateDatetime();

		if (createDatetime != null) {
			santaCacheModel.createDatetime = createDatetime.getTime();
		}
		else {
			santaCacheModel.createDatetime = Long.MIN_VALUE;
		}

		return santaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Santa, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Santa, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Santa, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Santa)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Santa>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Santa.class, ModelWrapper.class);

	}

	private long _santaId;
	private int _year;
	private String _ecode;
	private String _mobile;
	private String _city;
	private String _state;
	private String _pincode;
	private String _postalAddress;
	private String _santaEcode;
	private String _guessedEcode;
	private boolean _giftSent;
	private boolean _emailSent;
	private String _fileId;
	private Date _createDatetime;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Santa, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Santa)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("santaId", _santaId);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("mobile", _mobile);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("pincode", _pincode);
		_columnOriginalValues.put("postalAddress", _postalAddress);
		_columnOriginalValues.put("santaEcode", _santaEcode);
		_columnOriginalValues.put("guessedEcode", _guessedEcode);
		_columnOriginalValues.put("giftSent", _giftSent);
		_columnOriginalValues.put("emailSent", _emailSent);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("createDatetime", _createDatetime);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("santaId", 1L);

		columnBitmasks.put("year", 2L);

		columnBitmasks.put("ecode", 4L);

		columnBitmasks.put("mobile", 8L);

		columnBitmasks.put("city", 16L);

		columnBitmasks.put("state_", 32L);

		columnBitmasks.put("pincode", 64L);

		columnBitmasks.put("postalAddress", 128L);

		columnBitmasks.put("santaEcode", 256L);

		columnBitmasks.put("guessedEcode", 512L);

		columnBitmasks.put("giftSent", 1024L);

		columnBitmasks.put("emailSent", 2048L);

		columnBitmasks.put("fileId", 4096L);

		columnBitmasks.put("createDatetime", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Santa _escapedModel;

}