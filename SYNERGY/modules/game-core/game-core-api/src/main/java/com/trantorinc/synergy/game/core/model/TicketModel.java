/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.game.core.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Ticket service. Represents a row in the &quot;GAME_Ticket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.trantorinc.synergy.game.core.model.impl.TicketModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.trantorinc.synergy.game.core.model.impl.TicketImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Ticket
 * @generated
 */
@ProviderType
public interface TicketModel extends BaseModel<Ticket> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a ticket model instance should use the {@link Ticket} interface instead.
	 */

	/**
	 * Returns the primary key of this ticket.
	 *
	 * @return the primary key of this ticket
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this ticket.
	 *
	 * @param primaryKey the primary key of this ticket
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ticket ID of this ticket.
	 *
	 * @return the ticket ID of this ticket
	 */
	public long getTicketId();

	/**
	 * Sets the ticket ID of this ticket.
	 *
	 * @param ticketId the ticket ID of this ticket
	 */
	public void setTicketId(long ticketId);

	/**
	 * Returns the year of this ticket.
	 *
	 * @return the year of this ticket
	 */
	public int getYear();

	/**
	 * Sets the year of this ticket.
	 *
	 * @param year the year of this ticket
	 */
	public void setYear(int year);

	/**
	 * Returns the ecode of this ticket.
	 *
	 * @return the ecode of this ticket
	 */
	@AutoEscape
	public String getEcode();

	/**
	 * Sets the ecode of this ticket.
	 *
	 * @param ecode the ecode of this ticket
	 */
	public void setEcode(String ecode);

	/**
	 * Returns the ticket number of this ticket.
	 *
	 * @return the ticket number of this ticket
	 */
	@AutoEscape
	public String getTicketNumber();

	/**
	 * Sets the ticket number of this ticket.
	 *
	 * @param ticketNumber the ticket number of this ticket
	 */
	public void setTicketNumber(String ticketNumber);

	/**
	 * Returns the create datetime of this ticket.
	 *
	 * @return the create datetime of this ticket
	 */
	public Date getCreateDatetime();

	/**
	 * Sets the create datetime of this ticket.
	 *
	 * @param createDatetime the create datetime of this ticket
	 */
	public void setCreateDatetime(Date createDatetime);

	/**
	 * Returns the draw of this ticket.
	 *
	 * @return the draw of this ticket
	 */
	public boolean getDraw();

	/**
	 * Returns <code>true</code> if this ticket is draw.
	 *
	 * @return <code>true</code> if this ticket is draw; <code>false</code> otherwise
	 */
	public boolean isDraw();

	/**
	 * Sets whether this ticket is draw.
	 *
	 * @param draw the draw of this ticket
	 */
	public void setDraw(boolean draw);

	@Override
	public Ticket cloneWithOriginalValues();

}