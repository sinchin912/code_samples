/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.lms.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.lms.core.model.Drive;
import com.trantorinc.synergy.lms.core.model.DriveModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Drive service. Represents a row in the &quot;LMS_Drive&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DriveModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DriveImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DriveImpl
 * @generated
 */
public class DriveModelImpl extends BaseModelImpl<Drive> implements DriveModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a drive model instance should use the <code>Drive</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_Drive";

	public static final Object[][] TABLE_COLUMNS = {
		{"driveId", Types.BIGINT}, {"folderName", Types.VARCHAR},
		{"folderId", Types.VARCHAR}, {"filesCount", Types.INTEGER},
		{"updateDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("driveId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filesCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("updateDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_Drive (driveId LONG not null primary key,folderName VARCHAR(75) null,folderId VARCHAR(75) null,filesCount INTEGER,updateDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LMS_Drive";

	public static final String ORDER_BY_JPQL = " ORDER BY drive.driveId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY LMS_Drive.driveId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DRIVEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DriveModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _driveId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDriveId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _driveId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Drive.class;
	}

	@Override
	public String getModelClassName() {
		return Drive.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Drive, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Drive, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Drive, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Drive)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Drive, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Drive, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Drive)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Drive, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Drive, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Drive, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Drive, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Drive, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Drive, Object>>();
		Map<String, BiConsumer<Drive, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Drive, ?>>();

		attributeGetterFunctions.put("driveId", Drive::getDriveId);
		attributeSetterBiConsumers.put(
			"driveId", (BiConsumer<Drive, Long>)Drive::setDriveId);
		attributeGetterFunctions.put("folderName", Drive::getFolderName);
		attributeSetterBiConsumers.put(
			"folderName", (BiConsumer<Drive, String>)Drive::setFolderName);
		attributeGetterFunctions.put("folderId", Drive::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Drive, String>)Drive::setFolderId);
		attributeGetterFunctions.put("filesCount", Drive::getFilesCount);
		attributeSetterBiConsumers.put(
			"filesCount", (BiConsumer<Drive, Integer>)Drive::setFilesCount);
		attributeGetterFunctions.put("updateDate", Drive::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate", (BiConsumer<Drive, Date>)Drive::setUpdateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDriveId() {
		return _driveId;
	}

	@Override
	public void setDriveId(long driveId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driveId = driveId;
	}

	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return "";
		}
		else {
			return _folderName;
		}
	}

	@Override
	public void setFolderName(String folderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderName = folderName;
	}

	@Override
	public String getFolderId() {
		if (_folderId == null) {
			return "";
		}
		else {
			return _folderId;
		}
	}

	@Override
	public void setFolderId(String folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	@Override
	public int getFilesCount() {
		return _filesCount;
	}

	@Override
	public void setFilesCount(int filesCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filesCount = filesCount;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Drive.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Drive toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Drive>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DriveImpl driveImpl = new DriveImpl();

		driveImpl.setDriveId(getDriveId());
		driveImpl.setFolderName(getFolderName());
		driveImpl.setFolderId(getFolderId());
		driveImpl.setFilesCount(getFilesCount());
		driveImpl.setUpdateDate(getUpdateDate());

		driveImpl.resetOriginalValues();

		return driveImpl;
	}

	@Override
	public Drive cloneWithOriginalValues() {
		DriveImpl driveImpl = new DriveImpl();

		driveImpl.setDriveId(this.<Long>getColumnOriginalValue("driveId"));
		driveImpl.setFolderName(
			this.<String>getColumnOriginalValue("folderName"));
		driveImpl.setFolderId(this.<String>getColumnOriginalValue("folderId"));
		driveImpl.setFilesCount(
			this.<Integer>getColumnOriginalValue("filesCount"));
		driveImpl.setUpdateDate(
			this.<Date>getColumnOriginalValue("updateDate"));

		return driveImpl;
	}

	@Override
	public int compareTo(Drive drive) {
		long primaryKey = drive.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Drive)) {
			return false;
		}

		Drive drive = (Drive)object;

		long primaryKey = drive.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Drive> toCacheModel() {
		DriveCacheModel driveCacheModel = new DriveCacheModel();

		driveCacheModel.driveId = getDriveId();

		driveCacheModel.folderName = getFolderName();

		String folderName = driveCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			driveCacheModel.folderName = null;
		}

		driveCacheModel.folderId = getFolderId();

		String folderId = driveCacheModel.folderId;

		if ((folderId != null) && (folderId.length() == 0)) {
			driveCacheModel.folderId = null;
		}

		driveCacheModel.filesCount = getFilesCount();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			driveCacheModel.updateDate = updateDate.getTime();
		}
		else {
			driveCacheModel.updateDate = Long.MIN_VALUE;
		}

		return driveCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Drive, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Drive, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Drive, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Drive)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Drive>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Drive.class, ModelWrapper.class);

	}

	private long _driveId;
	private String _folderName;
	private String _folderId;
	private int _filesCount;
	private Date _updateDate;

	public <T> T getColumnValue(String columnName) {
		Function<Drive, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Drive)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("driveId", _driveId);
		_columnOriginalValues.put("folderName", _folderName);
		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("filesCount", _filesCount);
		_columnOriginalValues.put("updateDate", _updateDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("driveId", 1L);

		columnBitmasks.put("folderName", 2L);

		columnBitmasks.put("folderId", 4L);

		columnBitmasks.put("filesCount", 8L);

		columnBitmasks.put("updateDate", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Drive _escapedModel;

}