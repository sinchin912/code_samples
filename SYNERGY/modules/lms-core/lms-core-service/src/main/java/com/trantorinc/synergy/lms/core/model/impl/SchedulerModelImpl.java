/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.lms.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.lms.core.model.Scheduler;
import com.trantorinc.synergy.lms.core.model.SchedulerModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Scheduler service. Represents a row in the &quot;LMS_Scheduler&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SchedulerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchedulerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SchedulerImpl
 * @generated
 */
public class SchedulerModelImpl
	extends BaseModelImpl<Scheduler> implements SchedulerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scheduler model instance should use the <code>Scheduler</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_Scheduler";

	public static final Object[][] TABLE_COLUMNS = {
		{"schedulerId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"status", Types.BOOLEAN}, {"onDate", Types.TIMESTAMP},
		{"runDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("schedulerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("onDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("runDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_Scheduler (schedulerId LONG not null primary key,name VARCHAR(75) null,status BOOLEAN,onDate DATE null,runDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LMS_Scheduler";

	public static final String ORDER_BY_JPQL =
		" ORDER BY scheduler.schedulerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LMS_Scheduler.schedulerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SCHEDULERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SchedulerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schedulerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchedulerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schedulerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Scheduler.class;
	}

	@Override
	public String getModelClassName() {
		return Scheduler.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Scheduler, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Scheduler, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Scheduler, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Scheduler)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Scheduler, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Scheduler, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Scheduler)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Scheduler, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Scheduler, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Scheduler, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Scheduler, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Scheduler, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Scheduler, Object>>();
		Map<String, BiConsumer<Scheduler, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Scheduler, ?>>();

		attributeGetterFunctions.put("schedulerId", Scheduler::getSchedulerId);
		attributeSetterBiConsumers.put(
			"schedulerId",
			(BiConsumer<Scheduler, Long>)Scheduler::setSchedulerId);
		attributeGetterFunctions.put("name", Scheduler::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Scheduler, String>)Scheduler::setName);
		attributeGetterFunctions.put("status", Scheduler::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Scheduler, Boolean>)Scheduler::setStatus);
		attributeGetterFunctions.put("onDate", Scheduler::getOnDate);
		attributeSetterBiConsumers.put(
			"onDate", (BiConsumer<Scheduler, Date>)Scheduler::setOnDate);
		attributeGetterFunctions.put("runDate", Scheduler::getRunDate);
		attributeSetterBiConsumers.put(
			"runDate", (BiConsumer<Scheduler, Date>)Scheduler::setRunDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSchedulerId() {
		return _schedulerId;
	}

	@Override
	public void setSchedulerId(long schedulerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_schedulerId = schedulerId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public Date getOnDate() {
		return _onDate;
	}

	@Override
	public void setOnDate(Date onDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_onDate = onDate;
	}

	@Override
	public Date getRunDate() {
		return _runDate;
	}

	@Override
	public void setRunDate(Date runDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_runDate = runDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Scheduler.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Scheduler toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Scheduler>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SchedulerImpl schedulerImpl = new SchedulerImpl();

		schedulerImpl.setSchedulerId(getSchedulerId());
		schedulerImpl.setName(getName());
		schedulerImpl.setStatus(isStatus());
		schedulerImpl.setOnDate(getOnDate());
		schedulerImpl.setRunDate(getRunDate());

		schedulerImpl.resetOriginalValues();

		return schedulerImpl;
	}

	@Override
	public Scheduler cloneWithOriginalValues() {
		SchedulerImpl schedulerImpl = new SchedulerImpl();

		schedulerImpl.setSchedulerId(
			this.<Long>getColumnOriginalValue("schedulerId"));
		schedulerImpl.setName(this.<String>getColumnOriginalValue("name"));
		schedulerImpl.setStatus(this.<Boolean>getColumnOriginalValue("status"));
		schedulerImpl.setOnDate(this.<Date>getColumnOriginalValue("onDate"));
		schedulerImpl.setRunDate(this.<Date>getColumnOriginalValue("runDate"));

		return schedulerImpl;
	}

	@Override
	public int compareTo(Scheduler scheduler) {
		long primaryKey = scheduler.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Scheduler)) {
			return false;
		}

		Scheduler scheduler = (Scheduler)object;

		long primaryKey = scheduler.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Scheduler> toCacheModel() {
		SchedulerCacheModel schedulerCacheModel = new SchedulerCacheModel();

		schedulerCacheModel.schedulerId = getSchedulerId();

		schedulerCacheModel.name = getName();

		String name = schedulerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			schedulerCacheModel.name = null;
		}

		schedulerCacheModel.status = isStatus();

		Date onDate = getOnDate();

		if (onDate != null) {
			schedulerCacheModel.onDate = onDate.getTime();
		}
		else {
			schedulerCacheModel.onDate = Long.MIN_VALUE;
		}

		Date runDate = getRunDate();

		if (runDate != null) {
			schedulerCacheModel.runDate = runDate.getTime();
		}
		else {
			schedulerCacheModel.runDate = Long.MIN_VALUE;
		}

		return schedulerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Scheduler, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Scheduler, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Scheduler, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Scheduler)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Scheduler>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Scheduler.class, ModelWrapper.class);

	}

	private long _schedulerId;
	private String _name;
	private boolean _status;
	private Date _onDate;
	private Date _runDate;

	public <T> T getColumnValue(String columnName) {
		Function<Scheduler, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Scheduler)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("schedulerId", _schedulerId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("onDate", _onDate);
		_columnOriginalValues.put("runDate", _runDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("schedulerId", 1L);

		columnBitmasks.put("name", 2L);

		columnBitmasks.put("status", 4L);

		columnBitmasks.put("onDate", 8L);

		columnBitmasks.put("runDate", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Scheduler _escapedModel;

}