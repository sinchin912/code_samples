/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.lms.core.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.lms.core.model.Employee;
import com.trantorinc.synergy.lms.core.model.EmployeeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;LMS_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @generated
 */
public class EmployeeModelImpl
	extends BaseModelImpl<Employee> implements EmployeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the <code>Employee</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_Employee";

	public static final Object[][] TABLE_COLUMNS = {
		{"ecode", Types.VARCHAR}, {"status", Types.BOOLEAN},
		{"employeeType", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"doj", Types.TIMESTAMP}, {"dob", Types.TIMESTAMP},
		{"email", Types.VARCHAR}, {"band", Types.VARCHAR},
		{"designation", Types.VARCHAR}, {"manager", Types.VARCHAR},
		{"reviewer", Types.VARCHAR}, {"coordinator", Types.VARCHAR},
		{"account", Types.VARCHAR}, {"project", Types.VARCHAR},
		{"experience", Types.VARCHAR}, {"skill", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"confirmed", Types.BOOLEAN},
		{"mobile", Types.VARCHAR}, {"fileId", Types.VARCHAR},
		{"skype", Types.VARCHAR}, {"lmsUser", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("employeeType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doj", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("band", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("coordinator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("account", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("project", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experience", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("confirmed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skype", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lmsUser", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_Employee (ecode VARCHAR(75) not null primary key,status BOOLEAN,employeeType VARCHAR(75) null,name VARCHAR(75) null,doj DATE null,dob DATE null,email VARCHAR(75) null,band VARCHAR(75) null,designation VARCHAR(75) null,manager VARCHAR(75) null,reviewer VARCHAR(75) null,coordinator VARCHAR(75) null,account VARCHAR(75) null,project VARCHAR(200) null,experience VARCHAR(75) null,skill VARCHAR(75) null,location VARCHAR(75) null,confirmed BOOLEAN,mobile VARCHAR(75) null,fileId VARCHAR(75) null,skype VARCHAR(75) null,lmsUser BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table LMS_Employee";

	public static final String ORDER_BY_JPQL = " ORDER BY employee.ecode ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LMS_Employee.ecode ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ECODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmployeeModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _ecode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setEcode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ecode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Employee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Employee, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Employee, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Employee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Employee, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Employee, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Employee, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Employee, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Employee, Object>>();
		Map<String, BiConsumer<Employee, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Employee, ?>>();

		attributeGetterFunctions.put("ecode", Employee::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Employee, String>)Employee::setEcode);
		attributeGetterFunctions.put("status", Employee::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Employee, Boolean>)Employee::setStatus);
		attributeGetterFunctions.put("employeeType", Employee::getEmployeeType);
		attributeSetterBiConsumers.put(
			"employeeType",
			(BiConsumer<Employee, String>)Employee::setEmployeeType);
		attributeGetterFunctions.put("name", Employee::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Employee, String>)Employee::setName);
		attributeGetterFunctions.put("doj", Employee::getDoj);
		attributeSetterBiConsumers.put(
			"doj", (BiConsumer<Employee, Date>)Employee::setDoj);
		attributeGetterFunctions.put("dob", Employee::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<Employee, Date>)Employee::setDob);
		attributeGetterFunctions.put("email", Employee::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Employee, String>)Employee::setEmail);
		attributeGetterFunctions.put("band", Employee::getBand);
		attributeSetterBiConsumers.put(
			"band", (BiConsumer<Employee, String>)Employee::setBand);
		attributeGetterFunctions.put("designation", Employee::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<Employee, String>)Employee::setDesignation);
		attributeGetterFunctions.put("manager", Employee::getManager);
		attributeSetterBiConsumers.put(
			"manager", (BiConsumer<Employee, String>)Employee::setManager);
		attributeGetterFunctions.put("reviewer", Employee::getReviewer);
		attributeSetterBiConsumers.put(
			"reviewer", (BiConsumer<Employee, String>)Employee::setReviewer);
		attributeGetterFunctions.put("coordinator", Employee::getCoordinator);
		attributeSetterBiConsumers.put(
			"coordinator",
			(BiConsumer<Employee, String>)Employee::setCoordinator);
		attributeGetterFunctions.put("account", Employee::getAccount);
		attributeSetterBiConsumers.put(
			"account", (BiConsumer<Employee, String>)Employee::setAccount);
		attributeGetterFunctions.put("project", Employee::getProject);
		attributeSetterBiConsumers.put(
			"project", (BiConsumer<Employee, String>)Employee::setProject);
		attributeGetterFunctions.put("experience", Employee::getExperience);
		attributeSetterBiConsumers.put(
			"experience",
			(BiConsumer<Employee, String>)Employee::setExperience);
		attributeGetterFunctions.put("skill", Employee::getSkill);
		attributeSetterBiConsumers.put(
			"skill", (BiConsumer<Employee, String>)Employee::setSkill);
		attributeGetterFunctions.put("location", Employee::getLocation);
		attributeSetterBiConsumers.put(
			"location", (BiConsumer<Employee, String>)Employee::setLocation);
		attributeGetterFunctions.put("confirmed", Employee::getConfirmed);
		attributeSetterBiConsumers.put(
			"confirmed", (BiConsumer<Employee, Boolean>)Employee::setConfirmed);
		attributeGetterFunctions.put("mobile", Employee::getMobile);
		attributeSetterBiConsumers.put(
			"mobile", (BiConsumer<Employee, String>)Employee::setMobile);
		attributeGetterFunctions.put("fileId", Employee::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<Employee, String>)Employee::setFileId);
		attributeGetterFunctions.put("skype", Employee::getSkype);
		attributeSetterBiConsumers.put(
			"skype", (BiConsumer<Employee, String>)Employee::setSkype);
		attributeGetterFunctions.put("lmsUser", Employee::getLmsUser);
		attributeSetterBiConsumers.put(
			"lmsUser", (BiConsumer<Employee, Boolean>)Employee::setLmsUser);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getEmployeeType() {
		if (_employeeType == null) {
			return "";
		}
		else {
			return _employeeType;
		}
	}

	@Override
	public void setEmployeeType(String employeeType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeType = employeeType;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public Date getDoj() {
		return _doj;
	}

	@Override
	public void setDoj(Date doj) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doj = doj;
	}

	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@Override
	public String getBand() {
		if (_band == null) {
			return "";
		}
		else {
			return _band;
		}
	}

	@Override
	public void setBand(String band) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_band = band;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@Override
	public String getManager() {
		if (_manager == null) {
			return "";
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manager = manager;
	}

	@Override
	public String getReviewer() {
		if (_reviewer == null) {
			return "";
		}
		else {
			return _reviewer;
		}
	}

	@Override
	public void setReviewer(String reviewer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewer = reviewer;
	}

	@Override
	public String getCoordinator() {
		if (_coordinator == null) {
			return "";
		}
		else {
			return _coordinator;
		}
	}

	@Override
	public void setCoordinator(String coordinator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coordinator = coordinator;
	}

	@Override
	public String getAccount() {
		if (_account == null) {
			return "";
		}
		else {
			return _account;
		}
	}

	@Override
	public void setAccount(String account) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_account = account;
	}

	@Override
	public String getProject() {
		if (_project == null) {
			return "";
		}
		else {
			return _project;
		}
	}

	@Override
	public void setProject(String project) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_project = project;
	}

	@Override
	public String getExperience() {
		if (_experience == null) {
			return "";
		}
		else {
			return _experience;
		}
	}

	@Override
	public void setExperience(String experience) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experience = experience;
	}

	@Override
	public String getSkill() {
		if (_skill == null) {
			return "";
		}
		else {
			return _skill;
		}
	}

	@Override
	public void setSkill(String skill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skill = skill;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@Override
	public boolean getConfirmed() {
		return _confirmed;
	}

	@Override
	public boolean isConfirmed() {
		return _confirmed;
	}

	@Override
	public void setConfirmed(boolean confirmed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_confirmed = confirmed;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile = mobile;
	}

	@Override
	public String getFileId() {
		if (_fileId == null) {
			return "";
		}
		else {
			return _fileId;
		}
	}

	@Override
	public void setFileId(String fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	@Override
	public String getSkype() {
		if (_skype == null) {
			return "";
		}
		else {
			return _skype;
		}
	}

	@Override
	public void setSkype(String skype) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skype = skype;
	}

	@Override
	public boolean getLmsUser() {
		return _lmsUser;
	}

	@Override
	public boolean isLmsUser() {
		return _lmsUser;
	}

	@Override
	public void setLmsUser(boolean lmsUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lmsUser = lmsUser;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Employee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setEcode(getEcode());
		employeeImpl.setStatus(isStatus());
		employeeImpl.setEmployeeType(getEmployeeType());
		employeeImpl.setName(getName());
		employeeImpl.setDoj(getDoj());
		employeeImpl.setDob(getDob());
		employeeImpl.setEmail(getEmail());
		employeeImpl.setBand(getBand());
		employeeImpl.setDesignation(getDesignation());
		employeeImpl.setManager(getManager());
		employeeImpl.setReviewer(getReviewer());
		employeeImpl.setCoordinator(getCoordinator());
		employeeImpl.setAccount(getAccount());
		employeeImpl.setProject(getProject());
		employeeImpl.setExperience(getExperience());
		employeeImpl.setSkill(getSkill());
		employeeImpl.setLocation(getLocation());
		employeeImpl.setConfirmed(isConfirmed());
		employeeImpl.setMobile(getMobile());
		employeeImpl.setFileId(getFileId());
		employeeImpl.setSkype(getSkype());
		employeeImpl.setLmsUser(isLmsUser());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public Employee cloneWithOriginalValues() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		employeeImpl.setStatus(this.<Boolean>getColumnOriginalValue("status"));
		employeeImpl.setEmployeeType(
			this.<String>getColumnOriginalValue("employeeType"));
		employeeImpl.setName(this.<String>getColumnOriginalValue("name"));
		employeeImpl.setDoj(this.<Date>getColumnOriginalValue("doj"));
		employeeImpl.setDob(this.<Date>getColumnOriginalValue("dob"));
		employeeImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		employeeImpl.setBand(this.<String>getColumnOriginalValue("band"));
		employeeImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		employeeImpl.setManager(this.<String>getColumnOriginalValue("manager"));
		employeeImpl.setReviewer(
			this.<String>getColumnOriginalValue("reviewer"));
		employeeImpl.setCoordinator(
			this.<String>getColumnOriginalValue("coordinator"));
		employeeImpl.setAccount(this.<String>getColumnOriginalValue("account"));
		employeeImpl.setProject(this.<String>getColumnOriginalValue("project"));
		employeeImpl.setExperience(
			this.<String>getColumnOriginalValue("experience"));
		employeeImpl.setSkill(this.<String>getColumnOriginalValue("skill"));
		employeeImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		employeeImpl.setConfirmed(
			this.<Boolean>getColumnOriginalValue("confirmed"));
		employeeImpl.setMobile(this.<String>getColumnOriginalValue("mobile"));
		employeeImpl.setFileId(this.<String>getColumnOriginalValue("fileId"));
		employeeImpl.setSkype(this.<String>getColumnOriginalValue("skype"));
		employeeImpl.setLmsUser(
			this.<Boolean>getColumnOriginalValue("lmsUser"));

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int value = 0;

		value = getEcode().compareTo(employee.getEcode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)object;

		String primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.ecode = getEcode();

		String ecode = employeeCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			employeeCacheModel.ecode = null;
		}

		employeeCacheModel.status = isStatus();

		employeeCacheModel.employeeType = getEmployeeType();

		String employeeType = employeeCacheModel.employeeType;

		if ((employeeType != null) && (employeeType.length() == 0)) {
			employeeCacheModel.employeeType = null;
		}

		employeeCacheModel.name = getName();

		String name = employeeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			employeeCacheModel.name = null;
		}

		Date doj = getDoj();

		if (doj != null) {
			employeeCacheModel.doj = doj.getTime();
		}
		else {
			employeeCacheModel.doj = Long.MIN_VALUE;
		}

		Date dob = getDob();

		if (dob != null) {
			employeeCacheModel.dob = dob.getTime();
		}
		else {
			employeeCacheModel.dob = Long.MIN_VALUE;
		}

		employeeCacheModel.email = getEmail();

		String email = employeeCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			employeeCacheModel.email = null;
		}

		employeeCacheModel.band = getBand();

		String band = employeeCacheModel.band;

		if ((band != null) && (band.length() == 0)) {
			employeeCacheModel.band = null;
		}

		employeeCacheModel.designation = getDesignation();

		String designation = employeeCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			employeeCacheModel.designation = null;
		}

		employeeCacheModel.manager = getManager();

		String manager = employeeCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			employeeCacheModel.manager = null;
		}

		employeeCacheModel.reviewer = getReviewer();

		String reviewer = employeeCacheModel.reviewer;

		if ((reviewer != null) && (reviewer.length() == 0)) {
			employeeCacheModel.reviewer = null;
		}

		employeeCacheModel.coordinator = getCoordinator();

		String coordinator = employeeCacheModel.coordinator;

		if ((coordinator != null) && (coordinator.length() == 0)) {
			employeeCacheModel.coordinator = null;
		}

		employeeCacheModel.account = getAccount();

		String account = employeeCacheModel.account;

		if ((account != null) && (account.length() == 0)) {
			employeeCacheModel.account = null;
		}

		employeeCacheModel.project = getProject();

		String project = employeeCacheModel.project;

		if ((project != null) && (project.length() == 0)) {
			employeeCacheModel.project = null;
		}

		employeeCacheModel.experience = getExperience();

		String experience = employeeCacheModel.experience;

		if ((experience != null) && (experience.length() == 0)) {
			employeeCacheModel.experience = null;
		}

		employeeCacheModel.skill = getSkill();

		String skill = employeeCacheModel.skill;

		if ((skill != null) && (skill.length() == 0)) {
			employeeCacheModel.skill = null;
		}

		employeeCacheModel.location = getLocation();

		String location = employeeCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			employeeCacheModel.location = null;
		}

		employeeCacheModel.confirmed = isConfirmed();

		employeeCacheModel.mobile = getMobile();

		String mobile = employeeCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			employeeCacheModel.mobile = null;
		}

		employeeCacheModel.fileId = getFileId();

		String fileId = employeeCacheModel.fileId;

		if ((fileId != null) && (fileId.length() == 0)) {
			employeeCacheModel.fileId = null;
		}

		employeeCacheModel.skype = getSkype();

		String skype = employeeCacheModel.skype;

		if ((skype != null) && (skype.length() == 0)) {
			employeeCacheModel.skype = null;
		}

		employeeCacheModel.lmsUser = isLmsUser();

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Employee)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Employee>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Employee.class, ModelWrapper.class);

	}

	private String _ecode;
	private boolean _status;
	private String _employeeType;
	private String _name;
	private Date _doj;
	private Date _dob;
	private String _email;
	private String _band;
	private String _designation;
	private String _manager;
	private String _reviewer;
	private String _coordinator;
	private String _account;
	private String _project;
	private String _experience;
	private String _skill;
	private String _location;
	private boolean _confirmed;
	private String _mobile;
	private String _fileId;
	private String _skype;
	private boolean _lmsUser;

	public <T> T getColumnValue(String columnName) {
		Function<Employee, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Employee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("employeeType", _employeeType);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("doj", _doj);
		_columnOriginalValues.put("dob", _dob);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("band", _band);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("manager", _manager);
		_columnOriginalValues.put("reviewer", _reviewer);
		_columnOriginalValues.put("coordinator", _coordinator);
		_columnOriginalValues.put("account", _account);
		_columnOriginalValues.put("project", _project);
		_columnOriginalValues.put("experience", _experience);
		_columnOriginalValues.put("skill", _skill);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("confirmed", _confirmed);
		_columnOriginalValues.put("mobile", _mobile);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("skype", _skype);
		_columnOriginalValues.put("lmsUser", _lmsUser);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ecode", 1L);

		columnBitmasks.put("status", 2L);

		columnBitmasks.put("employeeType", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("doj", 16L);

		columnBitmasks.put("dob", 32L);

		columnBitmasks.put("email", 64L);

		columnBitmasks.put("band", 128L);

		columnBitmasks.put("designation", 256L);

		columnBitmasks.put("manager", 512L);

		columnBitmasks.put("reviewer", 1024L);

		columnBitmasks.put("coordinator", 2048L);

		columnBitmasks.put("account", 4096L);

		columnBitmasks.put("project", 8192L);

		columnBitmasks.put("experience", 16384L);

		columnBitmasks.put("skill", 32768L);

		columnBitmasks.put("location", 65536L);

		columnBitmasks.put("confirmed", 131072L);

		columnBitmasks.put("mobile", 262144L);

		columnBitmasks.put("fileId", 524288L);

		columnBitmasks.put("skype", 1048576L);

		columnBitmasks.put("lmsUser", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Employee _escapedModel;

}