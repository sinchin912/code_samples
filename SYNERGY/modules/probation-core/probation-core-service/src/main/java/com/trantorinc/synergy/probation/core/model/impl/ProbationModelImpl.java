/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.probation.core.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.probation.core.model.Probation;
import com.trantorinc.synergy.probation.core.model.ProbationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Probation service. Represents a row in the &quot;PROBATION_Probation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProbationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProbationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProbationImpl
 * @generated
 */
public class ProbationModelImpl
	extends BaseModelImpl<Probation> implements ProbationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a probation model instance should use the <code>Probation</code> interface instead.
	 */
	public static final String TABLE_NAME = "PROBATION_Probation";

	public static final Object[][] TABLE_COLUMNS = {
		{"ecode", Types.VARCHAR}, {"manager", Types.VARCHAR},
		{"reviewer", Types.VARCHAR}, {"state_", Types.INTEGER},
		{"stateName", Types.VARCHAR}, {"alertDate", Types.TIMESTAMP},
		{"createDate", Types.TIMESTAMP}, {"updateDate", Types.TIMESTAMP},
		{"areaOfStrength", Types.VARCHAR}, {"areaOfImprovement", Types.VARCHAR},
		{"comment_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alertDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("areaOfStrength", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areaOfImprovement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PROBATION_Probation (ecode VARCHAR(75) not null primary key,manager VARCHAR(100) null,reviewer VARCHAR(100) null,state_ INTEGER,stateName VARCHAR(75) null,alertDate DATE null,createDate DATE null,updateDate DATE null,areaOfStrength VARCHAR(1000) null,areaOfImprovement VARCHAR(1000) null,comment_ VARCHAR(1000) null)";

	public static final String TABLE_SQL_DROP =
		"drop table PROBATION_Probation";

	public static final String ORDER_BY_JPQL = " ORDER BY probation.ecode ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PROBATION_Probation.ecode ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ECODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProbationModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _ecode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setEcode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ecode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Probation.class;
	}

	@Override
	public String getModelClassName() {
		return Probation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Probation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Probation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Probation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Probation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Probation, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Probation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Probation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Probation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Probation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Probation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Probation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Probation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Probation, Object>>();
		Map<String, BiConsumer<Probation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Probation, ?>>();

		attributeGetterFunctions.put("ecode", Probation::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Probation, String>)Probation::setEcode);
		attributeGetterFunctions.put("manager", Probation::getManager);
		attributeSetterBiConsumers.put(
			"manager", (BiConsumer<Probation, String>)Probation::setManager);
		attributeGetterFunctions.put("reviewer", Probation::getReviewer);
		attributeSetterBiConsumers.put(
			"reviewer", (BiConsumer<Probation, String>)Probation::setReviewer);
		attributeGetterFunctions.put("state", Probation::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Probation, Integer>)Probation::setState);
		attributeGetterFunctions.put("stateName", Probation::getStateName);
		attributeSetterBiConsumers.put(
			"stateName",
			(BiConsumer<Probation, String>)Probation::setStateName);
		attributeGetterFunctions.put("alertDate", Probation::getAlertDate);
		attributeSetterBiConsumers.put(
			"alertDate", (BiConsumer<Probation, Date>)Probation::setAlertDate);
		attributeGetterFunctions.put("createDate", Probation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Probation, Date>)Probation::setCreateDate);
		attributeGetterFunctions.put("updateDate", Probation::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate",
			(BiConsumer<Probation, Date>)Probation::setUpdateDate);
		attributeGetterFunctions.put(
			"areaOfStrength", Probation::getAreaOfStrength);
		attributeSetterBiConsumers.put(
			"areaOfStrength",
			(BiConsumer<Probation, String>)Probation::setAreaOfStrength);
		attributeGetterFunctions.put(
			"areaOfImprovement", Probation::getAreaOfImprovement);
		attributeSetterBiConsumers.put(
			"areaOfImprovement",
			(BiConsumer<Probation, String>)Probation::setAreaOfImprovement);
		attributeGetterFunctions.put("comment", Probation::getComment);
		attributeSetterBiConsumers.put(
			"comment", (BiConsumer<Probation, String>)Probation::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getManager() {
		if (_manager == null) {
			return "";
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manager = manager;
	}

	@Override
	public String getReviewer() {
		if (_reviewer == null) {
			return "";
		}
		else {
			return _reviewer;
		}
	}

	@Override
	public void setReviewer(String reviewer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewer = reviewer;
	}

	@Override
	public int getState() {
		return _state;
	}

	@Override
	public void setState(int state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@Override
	public String getStateName() {
		if (_stateName == null) {
			return "";
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateName = stateName;
	}

	@Override
	public Date getAlertDate() {
		return _alertDate;
	}

	@Override
	public void setAlertDate(Date alertDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alertDate = alertDate;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDate = updateDate;
	}

	@Override
	public String getAreaOfStrength() {
		if (_areaOfStrength == null) {
			return "";
		}
		else {
			return _areaOfStrength;
		}
	}

	@Override
	public void setAreaOfStrength(String areaOfStrength) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areaOfStrength = areaOfStrength;
	}

	@Override
	public String getAreaOfImprovement() {
		if (_areaOfImprovement == null) {
			return "";
		}
		else {
			return _areaOfImprovement;
		}
	}

	@Override
	public void setAreaOfImprovement(String areaOfImprovement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areaOfImprovement = areaOfImprovement;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Probation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Probation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProbationImpl probationImpl = new ProbationImpl();

		probationImpl.setEcode(getEcode());
		probationImpl.setManager(getManager());
		probationImpl.setReviewer(getReviewer());
		probationImpl.setState(getState());
		probationImpl.setStateName(getStateName());
		probationImpl.setAlertDate(getAlertDate());
		probationImpl.setCreateDate(getCreateDate());
		probationImpl.setUpdateDate(getUpdateDate());
		probationImpl.setAreaOfStrength(getAreaOfStrength());
		probationImpl.setAreaOfImprovement(getAreaOfImprovement());
		probationImpl.setComment(getComment());

		probationImpl.resetOriginalValues();

		return probationImpl;
	}

	@Override
	public Probation cloneWithOriginalValues() {
		ProbationImpl probationImpl = new ProbationImpl();

		probationImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		probationImpl.setManager(
			this.<String>getColumnOriginalValue("manager"));
		probationImpl.setReviewer(
			this.<String>getColumnOriginalValue("reviewer"));
		probationImpl.setState(this.<Integer>getColumnOriginalValue("state_"));
		probationImpl.setStateName(
			this.<String>getColumnOriginalValue("stateName"));
		probationImpl.setAlertDate(
			this.<Date>getColumnOriginalValue("alertDate"));
		probationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		probationImpl.setUpdateDate(
			this.<Date>getColumnOriginalValue("updateDate"));
		probationImpl.setAreaOfStrength(
			this.<String>getColumnOriginalValue("areaOfStrength"));
		probationImpl.setAreaOfImprovement(
			this.<String>getColumnOriginalValue("areaOfImprovement"));
		probationImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));

		return probationImpl;
	}

	@Override
	public int compareTo(Probation probation) {
		int value = 0;

		value = getEcode().compareTo(probation.getEcode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Probation)) {
			return false;
		}

		Probation probation = (Probation)object;

		String primaryKey = probation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Probation> toCacheModel() {
		ProbationCacheModel probationCacheModel = new ProbationCacheModel();

		probationCacheModel.ecode = getEcode();

		String ecode = probationCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			probationCacheModel.ecode = null;
		}

		probationCacheModel.manager = getManager();

		String manager = probationCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			probationCacheModel.manager = null;
		}

		probationCacheModel.reviewer = getReviewer();

		String reviewer = probationCacheModel.reviewer;

		if ((reviewer != null) && (reviewer.length() == 0)) {
			probationCacheModel.reviewer = null;
		}

		probationCacheModel.state = getState();

		probationCacheModel.stateName = getStateName();

		String stateName = probationCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			probationCacheModel.stateName = null;
		}

		Date alertDate = getAlertDate();

		if (alertDate != null) {
			probationCacheModel.alertDate = alertDate.getTime();
		}
		else {
			probationCacheModel.alertDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			probationCacheModel.createDate = createDate.getTime();
		}
		else {
			probationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			probationCacheModel.updateDate = updateDate.getTime();
		}
		else {
			probationCacheModel.updateDate = Long.MIN_VALUE;
		}

		probationCacheModel.areaOfStrength = getAreaOfStrength();

		String areaOfStrength = probationCacheModel.areaOfStrength;

		if ((areaOfStrength != null) && (areaOfStrength.length() == 0)) {
			probationCacheModel.areaOfStrength = null;
		}

		probationCacheModel.areaOfImprovement = getAreaOfImprovement();

		String areaOfImprovement = probationCacheModel.areaOfImprovement;

		if ((areaOfImprovement != null) && (areaOfImprovement.length() == 0)) {
			probationCacheModel.areaOfImprovement = null;
		}

		probationCacheModel.comment = getComment();

		String comment = probationCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			probationCacheModel.comment = null;
		}

		return probationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Probation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Probation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Probation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Probation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Probation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Probation.class, ModelWrapper.class);

	}

	private String _ecode;
	private String _manager;
	private String _reviewer;
	private int _state;
	private String _stateName;
	private Date _alertDate;
	private Date _createDate;
	private Date _updateDate;
	private String _areaOfStrength;
	private String _areaOfImprovement;
	private String _comment;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Probation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Probation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("manager", _manager);
		_columnOriginalValues.put("reviewer", _reviewer);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("stateName", _stateName);
		_columnOriginalValues.put("alertDate", _alertDate);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("updateDate", _updateDate);
		_columnOriginalValues.put("areaOfStrength", _areaOfStrength);
		_columnOriginalValues.put("areaOfImprovement", _areaOfImprovement);
		_columnOriginalValues.put("comment_", _comment);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");
		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ecode", 1L);

		columnBitmasks.put("manager", 2L);

		columnBitmasks.put("reviewer", 4L);

		columnBitmasks.put("state_", 8L);

		columnBitmasks.put("stateName", 16L);

		columnBitmasks.put("alertDate", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("updateDate", 128L);

		columnBitmasks.put("areaOfStrength", 256L);

		columnBitmasks.put("areaOfImprovement", 512L);

		columnBitmasks.put("comment_", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Probation _escapedModel;

}