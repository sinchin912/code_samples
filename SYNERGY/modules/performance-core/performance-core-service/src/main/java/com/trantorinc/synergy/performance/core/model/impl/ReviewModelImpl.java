/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.performance.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.performance.core.model.Review;
import com.trantorinc.synergy.performance.core.model.ReviewModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Review service. Represents a row in the &quot;PERFORMANCE_Review&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReviewModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReviewImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReviewImpl
 * @generated
 */
public class ReviewModelImpl
	extends BaseModelImpl<Review> implements ReviewModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a review model instance should use the <code>Review</code> interface instead.
	 */
	public static final String TABLE_NAME = "PERFORMANCE_Review";

	public static final Object[][] TABLE_COLUMNS = {
		{"reviewId", Types.BIGINT}, {"kpiId", Types.BIGINT},
		{"ecode", Types.VARCHAR}, {"account", Types.VARCHAR},
		{"manager", Types.VARCHAR}, {"assignee", Types.VARCHAR},
		{"assigned", Types.BOOLEAN}, {"reviewStartDate", Types.TIMESTAMP},
		{"reviewState", Types.INTEGER}, {"accountPrimary", Types.BOOLEAN},
		{"finalYearReview", Types.BOOLEAN}, {"comment_", Types.VARCHAR},
		{"employeeComment", Types.VARCHAR}, {"managerComment", Types.VARCHAR},
		{"improvementComment", Types.VARCHAR}, {"hrComment", Types.VARCHAR},
		{"rating", Types.VARCHAR}, {"achievements", Types.VARCHAR},
		{"trainings", Types.VARCHAR}, {"excelledArea", Types.VARCHAR},
		{"rolePlayed", Types.VARCHAR}, {"expectedDesignation", Types.VARCHAR},
		{"expectedSalary", Types.VARCHAR}, {"readyReason", Types.VARCHAR},
		{"reasonRecommendation", Types.VARCHAR},
		{"promotionRecommendation", Types.BOOLEAN},
		{"criticalToAccount", Types.INTEGER},
		{"criticalToCompany", Types.INTEGER}, {"replacement", Types.INTEGER},
		{"replacementDetail", Types.VARCHAR},
		{"replacementReason", Types.VARCHAR},
		{"replacementReasonOther", Types.BOOLEAN},
		{"stage1Date", Types.TIMESTAMP}, {"stage2Date", Types.TIMESTAMP},
		{"stage3Date", Types.TIMESTAMP}, {"stage4Date", Types.TIMESTAMP},
		{"stage5Date", Types.TIMESTAMP}, {"firstSubmit", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reviewId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kpiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("account", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assigned", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("reviewStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reviewState", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accountPrimary", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("finalYearReview", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("improvementComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rating", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("achievements", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainings", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("excelledArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rolePlayed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDesignation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedSalary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("readyReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonRecommendation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("promotionRecommendation", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("criticalToAccount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("criticalToCompany", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("replacement", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("replacementDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("replacementReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("replacementReasonOther", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stage1Date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stage2Date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stage3Date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stage4Date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stage5Date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstSubmit", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PERFORMANCE_Review (reviewId LONG not null primary key,kpiId LONG,ecode VARCHAR(75) null,account VARCHAR(75) null,manager VARCHAR(75) null,assignee VARCHAR(75) null,assigned BOOLEAN,reviewStartDate DATE null,reviewState INTEGER,accountPrimary BOOLEAN,finalYearReview BOOLEAN,comment_ TEXT null,employeeComment TEXT null,managerComment TEXT null,improvementComment TEXT null,hrComment TEXT null,rating VARCHAR(75) null,achievements TEXT null,trainings TEXT null,excelledArea VARCHAR(2000) null,rolePlayed VARCHAR(2000) null,expectedDesignation VARCHAR(75) null,expectedSalary VARCHAR(75) null,readyReason VARCHAR(2000) null,reasonRecommendation VARCHAR(2000) null,promotionRecommendation BOOLEAN,criticalToAccount INTEGER,criticalToCompany INTEGER,replacement INTEGER,replacementDetail VARCHAR(2000) null,replacementReason VARCHAR(2000) null,replacementReasonOther BOOLEAN,stage1Date DATE null,stage2Date DATE null,stage3Date DATE null,stage4Date DATE null,stage5Date DATE null,firstSubmit BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table PERFORMANCE_Review";

	public static final String ORDER_BY_JPQL = " ORDER BY review.reviewId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PERFORMANCE_Review.reviewId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REVIEWID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReviewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reviewId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReviewId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reviewId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Review.class;
	}

	@Override
	public String getModelClassName() {
		return Review.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Review, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Review, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Review, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Review)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Review, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Review, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Review)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Review, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Review, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Review, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Review, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Review, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Review, Object>>();
		Map<String, BiConsumer<Review, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Review, ?>>();

		attributeGetterFunctions.put("reviewId", Review::getReviewId);
		attributeSetterBiConsumers.put(
			"reviewId", (BiConsumer<Review, Long>)Review::setReviewId);
		attributeGetterFunctions.put("kpiId", Review::getKpiId);
		attributeSetterBiConsumers.put(
			"kpiId", (BiConsumer<Review, Long>)Review::setKpiId);
		attributeGetterFunctions.put("ecode", Review::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Review, String>)Review::setEcode);
		attributeGetterFunctions.put("account", Review::getAccount);
		attributeSetterBiConsumers.put(
			"account", (BiConsumer<Review, String>)Review::setAccount);
		attributeGetterFunctions.put("manager", Review::getManager);
		attributeSetterBiConsumers.put(
			"manager", (BiConsumer<Review, String>)Review::setManager);
		attributeGetterFunctions.put("assignee", Review::getAssignee);
		attributeSetterBiConsumers.put(
			"assignee", (BiConsumer<Review, String>)Review::setAssignee);
		attributeGetterFunctions.put("assigned", Review::getAssigned);
		attributeSetterBiConsumers.put(
			"assigned", (BiConsumer<Review, Boolean>)Review::setAssigned);
		attributeGetterFunctions.put(
			"reviewStartDate", Review::getReviewStartDate);
		attributeSetterBiConsumers.put(
			"reviewStartDate",
			(BiConsumer<Review, Date>)Review::setReviewStartDate);
		attributeGetterFunctions.put("reviewState", Review::getReviewState);
		attributeSetterBiConsumers.put(
			"reviewState", (BiConsumer<Review, Integer>)Review::setReviewState);
		attributeGetterFunctions.put(
			"accountPrimary", Review::getAccountPrimary);
		attributeSetterBiConsumers.put(
			"accountPrimary",
			(BiConsumer<Review, Boolean>)Review::setAccountPrimary);
		attributeGetterFunctions.put(
			"finalYearReview", Review::getFinalYearReview);
		attributeSetterBiConsumers.put(
			"finalYearReview",
			(BiConsumer<Review, Boolean>)Review::setFinalYearReview);
		attributeGetterFunctions.put("comment", Review::getComment);
		attributeSetterBiConsumers.put(
			"comment", (BiConsumer<Review, String>)Review::setComment);
		attributeGetterFunctions.put(
			"employeeComment", Review::getEmployeeComment);
		attributeSetterBiConsumers.put(
			"employeeComment",
			(BiConsumer<Review, String>)Review::setEmployeeComment);
		attributeGetterFunctions.put(
			"managerComment", Review::getManagerComment);
		attributeSetterBiConsumers.put(
			"managerComment",
			(BiConsumer<Review, String>)Review::setManagerComment);
		attributeGetterFunctions.put(
			"improvementComment", Review::getImprovementComment);
		attributeSetterBiConsumers.put(
			"improvementComment",
			(BiConsumer<Review, String>)Review::setImprovementComment);
		attributeGetterFunctions.put("hrComment", Review::getHrComment);
		attributeSetterBiConsumers.put(
			"hrComment", (BiConsumer<Review, String>)Review::setHrComment);
		attributeGetterFunctions.put("rating", Review::getRating);
		attributeSetterBiConsumers.put(
			"rating", (BiConsumer<Review, String>)Review::setRating);
		attributeGetterFunctions.put("achievements", Review::getAchievements);
		attributeSetterBiConsumers.put(
			"achievements",
			(BiConsumer<Review, String>)Review::setAchievements);
		attributeGetterFunctions.put("trainings", Review::getTrainings);
		attributeSetterBiConsumers.put(
			"trainings", (BiConsumer<Review, String>)Review::setTrainings);
		attributeGetterFunctions.put("excelledArea", Review::getExcelledArea);
		attributeSetterBiConsumers.put(
			"excelledArea",
			(BiConsumer<Review, String>)Review::setExcelledArea);
		attributeGetterFunctions.put("rolePlayed", Review::getRolePlayed);
		attributeSetterBiConsumers.put(
			"rolePlayed", (BiConsumer<Review, String>)Review::setRolePlayed);
		attributeGetterFunctions.put(
			"expectedDesignation", Review::getExpectedDesignation);
		attributeSetterBiConsumers.put(
			"expectedDesignation",
			(BiConsumer<Review, String>)Review::setExpectedDesignation);
		attributeGetterFunctions.put(
			"expectedSalary", Review::getExpectedSalary);
		attributeSetterBiConsumers.put(
			"expectedSalary",
			(BiConsumer<Review, String>)Review::setExpectedSalary);
		attributeGetterFunctions.put("readyReason", Review::getReadyReason);
		attributeSetterBiConsumers.put(
			"readyReason", (BiConsumer<Review, String>)Review::setReadyReason);
		attributeGetterFunctions.put(
			"reasonRecommendation", Review::getReasonRecommendation);
		attributeSetterBiConsumers.put(
			"reasonRecommendation",
			(BiConsumer<Review, String>)Review::setReasonRecommendation);
		attributeGetterFunctions.put(
			"promotionRecommendation", Review::getPromotionRecommendation);
		attributeSetterBiConsumers.put(
			"promotionRecommendation",
			(BiConsumer<Review, Boolean>)Review::setPromotionRecommendation);
		attributeGetterFunctions.put(
			"criticalToAccount", Review::getCriticalToAccount);
		attributeSetterBiConsumers.put(
			"criticalToAccount",
			(BiConsumer<Review, Integer>)Review::setCriticalToAccount);
		attributeGetterFunctions.put(
			"criticalToCompany", Review::getCriticalToCompany);
		attributeSetterBiConsumers.put(
			"criticalToCompany",
			(BiConsumer<Review, Integer>)Review::setCriticalToCompany);
		attributeGetterFunctions.put("replacement", Review::getReplacement);
		attributeSetterBiConsumers.put(
			"replacement", (BiConsumer<Review, Integer>)Review::setReplacement);
		attributeGetterFunctions.put(
			"replacementDetail", Review::getReplacementDetail);
		attributeSetterBiConsumers.put(
			"replacementDetail",
			(BiConsumer<Review, String>)Review::setReplacementDetail);
		attributeGetterFunctions.put(
			"replacementReason", Review::getReplacementReason);
		attributeSetterBiConsumers.put(
			"replacementReason",
			(BiConsumer<Review, String>)Review::setReplacementReason);
		attributeGetterFunctions.put(
			"replacementReasonOther", Review::getReplacementReasonOther);
		attributeSetterBiConsumers.put(
			"replacementReasonOther",
			(BiConsumer<Review, Boolean>)Review::setReplacementReasonOther);
		attributeGetterFunctions.put("stage1Date", Review::getStage1Date);
		attributeSetterBiConsumers.put(
			"stage1Date", (BiConsumer<Review, Date>)Review::setStage1Date);
		attributeGetterFunctions.put("stage2Date", Review::getStage2Date);
		attributeSetterBiConsumers.put(
			"stage2Date", (BiConsumer<Review, Date>)Review::setStage2Date);
		attributeGetterFunctions.put("stage3Date", Review::getStage3Date);
		attributeSetterBiConsumers.put(
			"stage3Date", (BiConsumer<Review, Date>)Review::setStage3Date);
		attributeGetterFunctions.put("stage4Date", Review::getStage4Date);
		attributeSetterBiConsumers.put(
			"stage4Date", (BiConsumer<Review, Date>)Review::setStage4Date);
		attributeGetterFunctions.put("stage5Date", Review::getStage5Date);
		attributeSetterBiConsumers.put(
			"stage5Date", (BiConsumer<Review, Date>)Review::setStage5Date);
		attributeGetterFunctions.put("firstSubmit", Review::getFirstSubmit);
		attributeSetterBiConsumers.put(
			"firstSubmit", (BiConsumer<Review, Boolean>)Review::setFirstSubmit);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getReviewId() {
		return _reviewId;
	}

	@Override
	public void setReviewId(long reviewId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewId = reviewId;
	}

	@Override
	public long getKpiId() {
		return _kpiId;
	}

	@Override
	public void setKpiId(long kpiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_kpiId = kpiId;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getAccount() {
		if (_account == null) {
			return "";
		}
		else {
			return _account;
		}
	}

	@Override
	public void setAccount(String account) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_account = account;
	}

	@Override
	public String getManager() {
		if (_manager == null) {
			return "";
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manager = manager;
	}

	@Override
	public String getAssignee() {
		if (_assignee == null) {
			return "";
		}
		else {
			return _assignee;
		}
	}

	@Override
	public void setAssignee(String assignee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assignee = assignee;
	}

	@Override
	public boolean getAssigned() {
		return _assigned;
	}

	@Override
	public boolean isAssigned() {
		return _assigned;
	}

	@Override
	public void setAssigned(boolean assigned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assigned = assigned;
	}

	@Override
	public Date getReviewStartDate() {
		return _reviewStartDate;
	}

	@Override
	public void setReviewStartDate(Date reviewStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewStartDate = reviewStartDate;
	}

	@Override
	public int getReviewState() {
		return _reviewState;
	}

	@Override
	public void setReviewState(int reviewState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewState = reviewState;
	}

	@Override
	public boolean getAccountPrimary() {
		return _accountPrimary;
	}

	@Override
	public boolean isAccountPrimary() {
		return _accountPrimary;
	}

	@Override
	public void setAccountPrimary(boolean accountPrimary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountPrimary = accountPrimary;
	}

	@Override
	public boolean getFinalYearReview() {
		return _finalYearReview;
	}

	@Override
	public boolean isFinalYearReview() {
		return _finalYearReview;
	}

	@Override
	public void setFinalYearReview(boolean finalYearReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_finalYearReview = finalYearReview;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@Override
	public String getEmployeeComment() {
		if (_employeeComment == null) {
			return "";
		}
		else {
			return _employeeComment;
		}
	}

	@Override
	public void setEmployeeComment(String employeeComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeComment = employeeComment;
	}

	@Override
	public String getManagerComment() {
		if (_managerComment == null) {
			return "";
		}
		else {
			return _managerComment;
		}
	}

	@Override
	public void setManagerComment(String managerComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerComment = managerComment;
	}

	@Override
	public String getImprovementComment() {
		if (_improvementComment == null) {
			return "";
		}
		else {
			return _improvementComment;
		}
	}

	@Override
	public void setImprovementComment(String improvementComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_improvementComment = improvementComment;
	}

	@Override
	public String getHrComment() {
		if (_hrComment == null) {
			return "";
		}
		else {
			return _hrComment;
		}
	}

	@Override
	public void setHrComment(String hrComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hrComment = hrComment;
	}

	@Override
	public String getRating() {
		if (_rating == null) {
			return "";
		}
		else {
			return _rating;
		}
	}

	@Override
	public void setRating(String rating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rating = rating;
	}

	@Override
	public String getAchievements() {
		if (_achievements == null) {
			return "";
		}
		else {
			return _achievements;
		}
	}

	@Override
	public void setAchievements(String achievements) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_achievements = achievements;
	}

	@Override
	public String getTrainings() {
		if (_trainings == null) {
			return "";
		}
		else {
			return _trainings;
		}
	}

	@Override
	public void setTrainings(String trainings) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainings = trainings;
	}

	@Override
	public String getExcelledArea() {
		if (_excelledArea == null) {
			return "";
		}
		else {
			return _excelledArea;
		}
	}

	@Override
	public void setExcelledArea(String excelledArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_excelledArea = excelledArea;
	}

	@Override
	public String getRolePlayed() {
		if (_rolePlayed == null) {
			return "";
		}
		else {
			return _rolePlayed;
		}
	}

	@Override
	public void setRolePlayed(String rolePlayed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rolePlayed = rolePlayed;
	}

	@Override
	public String getExpectedDesignation() {
		if (_expectedDesignation == null) {
			return "";
		}
		else {
			return _expectedDesignation;
		}
	}

	@Override
	public void setExpectedDesignation(String expectedDesignation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDesignation = expectedDesignation;
	}

	@Override
	public String getExpectedSalary() {
		if (_expectedSalary == null) {
			return "";
		}
		else {
			return _expectedSalary;
		}
	}

	@Override
	public void setExpectedSalary(String expectedSalary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedSalary = expectedSalary;
	}

	@Override
	public String getReadyReason() {
		if (_readyReason == null) {
			return "";
		}
		else {
			return _readyReason;
		}
	}

	@Override
	public void setReadyReason(String readyReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_readyReason = readyReason;
	}

	@Override
	public String getReasonRecommendation() {
		if (_reasonRecommendation == null) {
			return "";
		}
		else {
			return _reasonRecommendation;
		}
	}

	@Override
	public void setReasonRecommendation(String reasonRecommendation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonRecommendation = reasonRecommendation;
	}

	@Override
	public boolean getPromotionRecommendation() {
		return _promotionRecommendation;
	}

	@Override
	public boolean isPromotionRecommendation() {
		return _promotionRecommendation;
	}

	@Override
	public void setPromotionRecommendation(boolean promotionRecommendation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_promotionRecommendation = promotionRecommendation;
	}

	@Override
	public int getCriticalToAccount() {
		return _criticalToAccount;
	}

	@Override
	public void setCriticalToAccount(int criticalToAccount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_criticalToAccount = criticalToAccount;
	}

	@Override
	public int getCriticalToCompany() {
		return _criticalToCompany;
	}

	@Override
	public void setCriticalToCompany(int criticalToCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_criticalToCompany = criticalToCompany;
	}

	@Override
	public int getReplacement() {
		return _replacement;
	}

	@Override
	public void setReplacement(int replacement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacement = replacement;
	}

	@Override
	public String getReplacementDetail() {
		if (_replacementDetail == null) {
			return "";
		}
		else {
			return _replacementDetail;
		}
	}

	@Override
	public void setReplacementDetail(String replacementDetail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacementDetail = replacementDetail;
	}

	@Override
	public String getReplacementReason() {
		if (_replacementReason == null) {
			return "";
		}
		else {
			return _replacementReason;
		}
	}

	@Override
	public void setReplacementReason(String replacementReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacementReason = replacementReason;
	}

	@Override
	public boolean getReplacementReasonOther() {
		return _replacementReasonOther;
	}

	@Override
	public boolean isReplacementReasonOther() {
		return _replacementReasonOther;
	}

	@Override
	public void setReplacementReasonOther(boolean replacementReasonOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_replacementReasonOther = replacementReasonOther;
	}

	@Override
	public Date getStage1Date() {
		return _stage1Date;
	}

	@Override
	public void setStage1Date(Date stage1Date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage1Date = stage1Date;
	}

	@Override
	public Date getStage2Date() {
		return _stage2Date;
	}

	@Override
	public void setStage2Date(Date stage2Date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage2Date = stage2Date;
	}

	@Override
	public Date getStage3Date() {
		return _stage3Date;
	}

	@Override
	public void setStage3Date(Date stage3Date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage3Date = stage3Date;
	}

	@Override
	public Date getStage4Date() {
		return _stage4Date;
	}

	@Override
	public void setStage4Date(Date stage4Date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage4Date = stage4Date;
	}

	@Override
	public Date getStage5Date() {
		return _stage5Date;
	}

	@Override
	public void setStage5Date(Date stage5Date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage5Date = stage5Date;
	}

	@Override
	public boolean getFirstSubmit() {
		return _firstSubmit;
	}

	@Override
	public boolean isFirstSubmit() {
		return _firstSubmit;
	}

	@Override
	public void setFirstSubmit(boolean firstSubmit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstSubmit = firstSubmit;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Review.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Review toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Review>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReviewImpl reviewImpl = new ReviewImpl();

		reviewImpl.setReviewId(getReviewId());
		reviewImpl.setKpiId(getKpiId());
		reviewImpl.setEcode(getEcode());
		reviewImpl.setAccount(getAccount());
		reviewImpl.setManager(getManager());
		reviewImpl.setAssignee(getAssignee());
		reviewImpl.setAssigned(isAssigned());
		reviewImpl.setReviewStartDate(getReviewStartDate());
		reviewImpl.setReviewState(getReviewState());
		reviewImpl.setAccountPrimary(isAccountPrimary());
		reviewImpl.setFinalYearReview(isFinalYearReview());
		reviewImpl.setComment(getComment());
		reviewImpl.setEmployeeComment(getEmployeeComment());
		reviewImpl.setManagerComment(getManagerComment());
		reviewImpl.setImprovementComment(getImprovementComment());
		reviewImpl.setHrComment(getHrComment());
		reviewImpl.setRating(getRating());
		reviewImpl.setAchievements(getAchievements());
		reviewImpl.setTrainings(getTrainings());
		reviewImpl.setExcelledArea(getExcelledArea());
		reviewImpl.setRolePlayed(getRolePlayed());
		reviewImpl.setExpectedDesignation(getExpectedDesignation());
		reviewImpl.setExpectedSalary(getExpectedSalary());
		reviewImpl.setReadyReason(getReadyReason());
		reviewImpl.setReasonRecommendation(getReasonRecommendation());
		reviewImpl.setPromotionRecommendation(isPromotionRecommendation());
		reviewImpl.setCriticalToAccount(getCriticalToAccount());
		reviewImpl.setCriticalToCompany(getCriticalToCompany());
		reviewImpl.setReplacement(getReplacement());
		reviewImpl.setReplacementDetail(getReplacementDetail());
		reviewImpl.setReplacementReason(getReplacementReason());
		reviewImpl.setReplacementReasonOther(isReplacementReasonOther());
		reviewImpl.setStage1Date(getStage1Date());
		reviewImpl.setStage2Date(getStage2Date());
		reviewImpl.setStage3Date(getStage3Date());
		reviewImpl.setStage4Date(getStage4Date());
		reviewImpl.setStage5Date(getStage5Date());
		reviewImpl.setFirstSubmit(isFirstSubmit());

		reviewImpl.resetOriginalValues();

		return reviewImpl;
	}

	@Override
	public Review cloneWithOriginalValues() {
		ReviewImpl reviewImpl = new ReviewImpl();

		reviewImpl.setReviewId(this.<Long>getColumnOriginalValue("reviewId"));
		reviewImpl.setKpiId(this.<Long>getColumnOriginalValue("kpiId"));
		reviewImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		reviewImpl.setAccount(this.<String>getColumnOriginalValue("account"));
		reviewImpl.setManager(this.<String>getColumnOriginalValue("manager"));
		reviewImpl.setAssignee(this.<String>getColumnOriginalValue("assignee"));
		reviewImpl.setAssigned(
			this.<Boolean>getColumnOriginalValue("assigned"));
		reviewImpl.setReviewStartDate(
			this.<Date>getColumnOriginalValue("reviewStartDate"));
		reviewImpl.setReviewState(
			this.<Integer>getColumnOriginalValue("reviewState"));
		reviewImpl.setAccountPrimary(
			this.<Boolean>getColumnOriginalValue("accountPrimary"));
		reviewImpl.setFinalYearReview(
			this.<Boolean>getColumnOriginalValue("finalYearReview"));
		reviewImpl.setComment(this.<String>getColumnOriginalValue("comment_"));
		reviewImpl.setEmployeeComment(
			this.<String>getColumnOriginalValue("employeeComment"));
		reviewImpl.setManagerComment(
			this.<String>getColumnOriginalValue("managerComment"));
		reviewImpl.setImprovementComment(
			this.<String>getColumnOriginalValue("improvementComment"));
		reviewImpl.setHrComment(
			this.<String>getColumnOriginalValue("hrComment"));
		reviewImpl.setRating(this.<String>getColumnOriginalValue("rating"));
		reviewImpl.setAchievements(
			this.<String>getColumnOriginalValue("achievements"));
		reviewImpl.setTrainings(
			this.<String>getColumnOriginalValue("trainings"));
		reviewImpl.setExcelledArea(
			this.<String>getColumnOriginalValue("excelledArea"));
		reviewImpl.setRolePlayed(
			this.<String>getColumnOriginalValue("rolePlayed"));
		reviewImpl.setExpectedDesignation(
			this.<String>getColumnOriginalValue("expectedDesignation"));
		reviewImpl.setExpectedSalary(
			this.<String>getColumnOriginalValue("expectedSalary"));
		reviewImpl.setReadyReason(
			this.<String>getColumnOriginalValue("readyReason"));
		reviewImpl.setReasonRecommendation(
			this.<String>getColumnOriginalValue("reasonRecommendation"));
		reviewImpl.setPromotionRecommendation(
			this.<Boolean>getColumnOriginalValue("promotionRecommendation"));
		reviewImpl.setCriticalToAccount(
			this.<Integer>getColumnOriginalValue("criticalToAccount"));
		reviewImpl.setCriticalToCompany(
			this.<Integer>getColumnOriginalValue("criticalToCompany"));
		reviewImpl.setReplacement(
			this.<Integer>getColumnOriginalValue("replacement"));
		reviewImpl.setReplacementDetail(
			this.<String>getColumnOriginalValue("replacementDetail"));
		reviewImpl.setReplacementReason(
			this.<String>getColumnOriginalValue("replacementReason"));
		reviewImpl.setReplacementReasonOther(
			this.<Boolean>getColumnOriginalValue("replacementReasonOther"));
		reviewImpl.setStage1Date(
			this.<Date>getColumnOriginalValue("stage1Date"));
		reviewImpl.setStage2Date(
			this.<Date>getColumnOriginalValue("stage2Date"));
		reviewImpl.setStage3Date(
			this.<Date>getColumnOriginalValue("stage3Date"));
		reviewImpl.setStage4Date(
			this.<Date>getColumnOriginalValue("stage4Date"));
		reviewImpl.setStage5Date(
			this.<Date>getColumnOriginalValue("stage5Date"));
		reviewImpl.setFirstSubmit(
			this.<Boolean>getColumnOriginalValue("firstSubmit"));

		return reviewImpl;
	}

	@Override
	public int compareTo(Review review) {
		int value = 0;

		if (getReviewId() < review.getReviewId()) {
			value = -1;
		}
		else if (getReviewId() > review.getReviewId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Review)) {
			return false;
		}

		Review review = (Review)object;

		long primaryKey = review.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Review> toCacheModel() {
		ReviewCacheModel reviewCacheModel = new ReviewCacheModel();

		reviewCacheModel.reviewId = getReviewId();

		reviewCacheModel.kpiId = getKpiId();

		reviewCacheModel.ecode = getEcode();

		String ecode = reviewCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			reviewCacheModel.ecode = null;
		}

		reviewCacheModel.account = getAccount();

		String account = reviewCacheModel.account;

		if ((account != null) && (account.length() == 0)) {
			reviewCacheModel.account = null;
		}

		reviewCacheModel.manager = getManager();

		String manager = reviewCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			reviewCacheModel.manager = null;
		}

		reviewCacheModel.assignee = getAssignee();

		String assignee = reviewCacheModel.assignee;

		if ((assignee != null) && (assignee.length() == 0)) {
			reviewCacheModel.assignee = null;
		}

		reviewCacheModel.assigned = isAssigned();

		Date reviewStartDate = getReviewStartDate();

		if (reviewStartDate != null) {
			reviewCacheModel.reviewStartDate = reviewStartDate.getTime();
		}
		else {
			reviewCacheModel.reviewStartDate = Long.MIN_VALUE;
		}

		reviewCacheModel.reviewState = getReviewState();

		reviewCacheModel.accountPrimary = isAccountPrimary();

		reviewCacheModel.finalYearReview = isFinalYearReview();

		reviewCacheModel.comment = getComment();

		String comment = reviewCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			reviewCacheModel.comment = null;
		}

		reviewCacheModel.employeeComment = getEmployeeComment();

		String employeeComment = reviewCacheModel.employeeComment;

		if ((employeeComment != null) && (employeeComment.length() == 0)) {
			reviewCacheModel.employeeComment = null;
		}

		reviewCacheModel.managerComment = getManagerComment();

		String managerComment = reviewCacheModel.managerComment;

		if ((managerComment != null) && (managerComment.length() == 0)) {
			reviewCacheModel.managerComment = null;
		}

		reviewCacheModel.improvementComment = getImprovementComment();

		String improvementComment = reviewCacheModel.improvementComment;

		if ((improvementComment != null) &&
			(improvementComment.length() == 0)) {

			reviewCacheModel.improvementComment = null;
		}

		reviewCacheModel.hrComment = getHrComment();

		String hrComment = reviewCacheModel.hrComment;

		if ((hrComment != null) && (hrComment.length() == 0)) {
			reviewCacheModel.hrComment = null;
		}

		reviewCacheModel.rating = getRating();

		String rating = reviewCacheModel.rating;

		if ((rating != null) && (rating.length() == 0)) {
			reviewCacheModel.rating = null;
		}

		reviewCacheModel.achievements = getAchievements();

		String achievements = reviewCacheModel.achievements;

		if ((achievements != null) && (achievements.length() == 0)) {
			reviewCacheModel.achievements = null;
		}

		reviewCacheModel.trainings = getTrainings();

		String trainings = reviewCacheModel.trainings;

		if ((trainings != null) && (trainings.length() == 0)) {
			reviewCacheModel.trainings = null;
		}

		reviewCacheModel.excelledArea = getExcelledArea();

		String excelledArea = reviewCacheModel.excelledArea;

		if ((excelledArea != null) && (excelledArea.length() == 0)) {
			reviewCacheModel.excelledArea = null;
		}

		reviewCacheModel.rolePlayed = getRolePlayed();

		String rolePlayed = reviewCacheModel.rolePlayed;

		if ((rolePlayed != null) && (rolePlayed.length() == 0)) {
			reviewCacheModel.rolePlayed = null;
		}

		reviewCacheModel.expectedDesignation = getExpectedDesignation();

		String expectedDesignation = reviewCacheModel.expectedDesignation;

		if ((expectedDesignation != null) &&
			(expectedDesignation.length() == 0)) {

			reviewCacheModel.expectedDesignation = null;
		}

		reviewCacheModel.expectedSalary = getExpectedSalary();

		String expectedSalary = reviewCacheModel.expectedSalary;

		if ((expectedSalary != null) && (expectedSalary.length() == 0)) {
			reviewCacheModel.expectedSalary = null;
		}

		reviewCacheModel.readyReason = getReadyReason();

		String readyReason = reviewCacheModel.readyReason;

		if ((readyReason != null) && (readyReason.length() == 0)) {
			reviewCacheModel.readyReason = null;
		}

		reviewCacheModel.reasonRecommendation = getReasonRecommendation();

		String reasonRecommendation = reviewCacheModel.reasonRecommendation;

		if ((reasonRecommendation != null) &&
			(reasonRecommendation.length() == 0)) {

			reviewCacheModel.reasonRecommendation = null;
		}

		reviewCacheModel.promotionRecommendation = isPromotionRecommendation();

		reviewCacheModel.criticalToAccount = getCriticalToAccount();

		reviewCacheModel.criticalToCompany = getCriticalToCompany();

		reviewCacheModel.replacement = getReplacement();

		reviewCacheModel.replacementDetail = getReplacementDetail();

		String replacementDetail = reviewCacheModel.replacementDetail;

		if ((replacementDetail != null) && (replacementDetail.length() == 0)) {
			reviewCacheModel.replacementDetail = null;
		}

		reviewCacheModel.replacementReason = getReplacementReason();

		String replacementReason = reviewCacheModel.replacementReason;

		if ((replacementReason != null) && (replacementReason.length() == 0)) {
			reviewCacheModel.replacementReason = null;
		}

		reviewCacheModel.replacementReasonOther = isReplacementReasonOther();

		Date stage1Date = getStage1Date();

		if (stage1Date != null) {
			reviewCacheModel.stage1Date = stage1Date.getTime();
		}
		else {
			reviewCacheModel.stage1Date = Long.MIN_VALUE;
		}

		Date stage2Date = getStage2Date();

		if (stage2Date != null) {
			reviewCacheModel.stage2Date = stage2Date.getTime();
		}
		else {
			reviewCacheModel.stage2Date = Long.MIN_VALUE;
		}

		Date stage3Date = getStage3Date();

		if (stage3Date != null) {
			reviewCacheModel.stage3Date = stage3Date.getTime();
		}
		else {
			reviewCacheModel.stage3Date = Long.MIN_VALUE;
		}

		Date stage4Date = getStage4Date();

		if (stage4Date != null) {
			reviewCacheModel.stage4Date = stage4Date.getTime();
		}
		else {
			reviewCacheModel.stage4Date = Long.MIN_VALUE;
		}

		Date stage5Date = getStage5Date();

		if (stage5Date != null) {
			reviewCacheModel.stage5Date = stage5Date.getTime();
		}
		else {
			reviewCacheModel.stage5Date = Long.MIN_VALUE;
		}

		reviewCacheModel.firstSubmit = isFirstSubmit();

		return reviewCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Review, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Review, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Review, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Review)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Review>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Review.class, ModelWrapper.class);

	}

	private long _reviewId;
	private long _kpiId;
	private String _ecode;
	private String _account;
	private String _manager;
	private String _assignee;
	private boolean _assigned;
	private Date _reviewStartDate;
	private int _reviewState;
	private boolean _accountPrimary;
	private boolean _finalYearReview;
	private String _comment;
	private String _employeeComment;
	private String _managerComment;
	private String _improvementComment;
	private String _hrComment;
	private String _rating;
	private String _achievements;
	private String _trainings;
	private String _excelledArea;
	private String _rolePlayed;
	private String _expectedDesignation;
	private String _expectedSalary;
	private String _readyReason;
	private String _reasonRecommendation;
	private boolean _promotionRecommendation;
	private int _criticalToAccount;
	private int _criticalToCompany;
	private int _replacement;
	private String _replacementDetail;
	private String _replacementReason;
	private boolean _replacementReasonOther;
	private Date _stage1Date;
	private Date _stage2Date;
	private Date _stage3Date;
	private Date _stage4Date;
	private Date _stage5Date;
	private boolean _firstSubmit;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Review, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Review)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("reviewId", _reviewId);
		_columnOriginalValues.put("kpiId", _kpiId);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("account", _account);
		_columnOriginalValues.put("manager", _manager);
		_columnOriginalValues.put("assignee", _assignee);
		_columnOriginalValues.put("assigned", _assigned);
		_columnOriginalValues.put("reviewStartDate", _reviewStartDate);
		_columnOriginalValues.put("reviewState", _reviewState);
		_columnOriginalValues.put("accountPrimary", _accountPrimary);
		_columnOriginalValues.put("finalYearReview", _finalYearReview);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("employeeComment", _employeeComment);
		_columnOriginalValues.put("managerComment", _managerComment);
		_columnOriginalValues.put("improvementComment", _improvementComment);
		_columnOriginalValues.put("hrComment", _hrComment);
		_columnOriginalValues.put("rating", _rating);
		_columnOriginalValues.put("achievements", _achievements);
		_columnOriginalValues.put("trainings", _trainings);
		_columnOriginalValues.put("excelledArea", _excelledArea);
		_columnOriginalValues.put("rolePlayed", _rolePlayed);
		_columnOriginalValues.put("expectedDesignation", _expectedDesignation);
		_columnOriginalValues.put("expectedSalary", _expectedSalary);
		_columnOriginalValues.put("readyReason", _readyReason);
		_columnOriginalValues.put(
			"reasonRecommendation", _reasonRecommendation);
		_columnOriginalValues.put(
			"promotionRecommendation", _promotionRecommendation);
		_columnOriginalValues.put("criticalToAccount", _criticalToAccount);
		_columnOriginalValues.put("criticalToCompany", _criticalToCompany);
		_columnOriginalValues.put("replacement", _replacement);
		_columnOriginalValues.put("replacementDetail", _replacementDetail);
		_columnOriginalValues.put("replacementReason", _replacementReason);
		_columnOriginalValues.put(
			"replacementReasonOther", _replacementReasonOther);
		_columnOriginalValues.put("stage1Date", _stage1Date);
		_columnOriginalValues.put("stage2Date", _stage2Date);
		_columnOriginalValues.put("stage3Date", _stage3Date);
		_columnOriginalValues.put("stage4Date", _stage4Date);
		_columnOriginalValues.put("stage5Date", _stage5Date);
		_columnOriginalValues.put("firstSubmit", _firstSubmit);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("reviewId", 1L);

		columnBitmasks.put("kpiId", 2L);

		columnBitmasks.put("ecode", 4L);

		columnBitmasks.put("account", 8L);

		columnBitmasks.put("manager", 16L);

		columnBitmasks.put("assignee", 32L);

		columnBitmasks.put("assigned", 64L);

		columnBitmasks.put("reviewStartDate", 128L);

		columnBitmasks.put("reviewState", 256L);

		columnBitmasks.put("accountPrimary", 512L);

		columnBitmasks.put("finalYearReview", 1024L);

		columnBitmasks.put("comment_", 2048L);

		columnBitmasks.put("employeeComment", 4096L);

		columnBitmasks.put("managerComment", 8192L);

		columnBitmasks.put("improvementComment", 16384L);

		columnBitmasks.put("hrComment", 32768L);

		columnBitmasks.put("rating", 65536L);

		columnBitmasks.put("achievements", 131072L);

		columnBitmasks.put("trainings", 262144L);

		columnBitmasks.put("excelledArea", 524288L);

		columnBitmasks.put("rolePlayed", 1048576L);

		columnBitmasks.put("expectedDesignation", 2097152L);

		columnBitmasks.put("expectedSalary", 4194304L);

		columnBitmasks.put("readyReason", 8388608L);

		columnBitmasks.put("reasonRecommendation", 16777216L);

		columnBitmasks.put("promotionRecommendation", 33554432L);

		columnBitmasks.put("criticalToAccount", 67108864L);

		columnBitmasks.put("criticalToCompany", 134217728L);

		columnBitmasks.put("replacement", 268435456L);

		columnBitmasks.put("replacementDetail", 536870912L);

		columnBitmasks.put("replacementReason", 1073741824L);

		columnBitmasks.put("replacementReasonOther", 2147483648L);

		columnBitmasks.put("stage1Date", 4294967296L);

		columnBitmasks.put("stage2Date", 8589934592L);

		columnBitmasks.put("stage3Date", 17179869184L);

		columnBitmasks.put("stage4Date", 34359738368L);

		columnBitmasks.put("stage5Date", 68719476736L);

		columnBitmasks.put("firstSubmit", 137438953472L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Review _escapedModel;

}