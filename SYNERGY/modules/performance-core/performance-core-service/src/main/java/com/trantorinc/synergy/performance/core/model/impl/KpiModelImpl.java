/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.performance.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.performance.core.model.Kpi;
import com.trantorinc.synergy.performance.core.model.KpiModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Kpi service. Represents a row in the &quot;PERFORMANCE_Kpi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>KpiModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KpiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see KpiImpl
 * @generated
 */
public class KpiModelImpl extends BaseModelImpl<Kpi> implements KpiModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kpi model instance should use the <code>Kpi</code> interface instead.
	 */
	public static final String TABLE_NAME = "PERFORMANCE_Kpi";

	public static final Object[][] TABLE_COLUMNS = {
		{"kpiId", Types.BIGINT}, {"ecode", Types.VARCHAR},
		{"account", Types.VARCHAR}, {"managerEmail", Types.VARCHAR},
		{"reviewerEmail", Types.VARCHAR}, {"accountPrimary", Types.BOOLEAN},
		{"updateDate", Types.TIMESTAMP}, {"kpiSettingStatus", Types.BOOLEAN},
		{"rejectionComment", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("kpiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ecode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("account", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountPrimary", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("updateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("kpiSettingStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("rejectionComment", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PERFORMANCE_Kpi (kpiId LONG not null primary key,ecode VARCHAR(75) null,account VARCHAR(75) null,managerEmail VARCHAR(75) null,reviewerEmail VARCHAR(75) null,accountPrimary BOOLEAN,updateDate DATE null,kpiSettingStatus BOOLEAN,rejectionComment VARCHAR(200) null)";

	public static final String TABLE_SQL_DROP = "drop table PERFORMANCE_Kpi";

	public static final String ORDER_BY_JPQL = " ORDER BY kpi.kpiId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PERFORMANCE_Kpi.kpiId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long KPIID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public KpiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kpiId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKpiId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kpiId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Kpi.class;
	}

	@Override
	public String getModelClassName() {
		return Kpi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Kpi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Kpi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Kpi, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Kpi)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Kpi, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Kpi, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Kpi)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Kpi, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Kpi, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Kpi, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Kpi, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Kpi, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Kpi, Object>>();
		Map<String, BiConsumer<Kpi, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Kpi, ?>>();

		attributeGetterFunctions.put("kpiId", Kpi::getKpiId);
		attributeSetterBiConsumers.put(
			"kpiId", (BiConsumer<Kpi, Long>)Kpi::setKpiId);
		attributeGetterFunctions.put("ecode", Kpi::getEcode);
		attributeSetterBiConsumers.put(
			"ecode", (BiConsumer<Kpi, String>)Kpi::setEcode);
		attributeGetterFunctions.put("account", Kpi::getAccount);
		attributeSetterBiConsumers.put(
			"account", (BiConsumer<Kpi, String>)Kpi::setAccount);
		attributeGetterFunctions.put("managerEmail", Kpi::getManagerEmail);
		attributeSetterBiConsumers.put(
			"managerEmail", (BiConsumer<Kpi, String>)Kpi::setManagerEmail);
		attributeGetterFunctions.put("reviewerEmail", Kpi::getReviewerEmail);
		attributeSetterBiConsumers.put(
			"reviewerEmail", (BiConsumer<Kpi, String>)Kpi::setReviewerEmail);
		attributeGetterFunctions.put("accountPrimary", Kpi::getAccountPrimary);
		attributeSetterBiConsumers.put(
			"accountPrimary", (BiConsumer<Kpi, Boolean>)Kpi::setAccountPrimary);
		attributeGetterFunctions.put("updateDate", Kpi::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate", (BiConsumer<Kpi, Date>)Kpi::setUpdateDate);
		attributeGetterFunctions.put(
			"kpiSettingStatus", Kpi::getKpiSettingStatus);
		attributeSetterBiConsumers.put(
			"kpiSettingStatus",
			(BiConsumer<Kpi, Boolean>)Kpi::setKpiSettingStatus);
		attributeGetterFunctions.put(
			"rejectionComment", Kpi::getRejectionComment);
		attributeSetterBiConsumers.put(
			"rejectionComment",
			(BiConsumer<Kpi, String>)Kpi::setRejectionComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getKpiId() {
		return _kpiId;
	}

	@Override
	public void setKpiId(long kpiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_kpiId = kpiId;
	}

	@Override
	public String getEcode() {
		if (_ecode == null) {
			return "";
		}
		else {
			return _ecode;
		}
	}

	@Override
	public void setEcode(String ecode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecode = ecode;
	}

	@Override
	public String getAccount() {
		if (_account == null) {
			return "";
		}
		else {
			return _account;
		}
	}

	@Override
	public void setAccount(String account) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_account = account;
	}

	@Override
	public String getManagerEmail() {
		if (_managerEmail == null) {
			return "";
		}
		else {
			return _managerEmail;
		}
	}

	@Override
	public void setManagerEmail(String managerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerEmail = managerEmail;
	}

	@Override
	public String getReviewerEmail() {
		if (_reviewerEmail == null) {
			return "";
		}
		else {
			return _reviewerEmail;
		}
	}

	@Override
	public void setReviewerEmail(String reviewerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewerEmail = reviewerEmail;
	}

	@Override
	public boolean getAccountPrimary() {
		return _accountPrimary;
	}

	@Override
	public boolean isAccountPrimary() {
		return _accountPrimary;
	}

	@Override
	public void setAccountPrimary(boolean accountPrimary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountPrimary = accountPrimary;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDate = updateDate;
	}

	@Override
	public boolean getKpiSettingStatus() {
		return _kpiSettingStatus;
	}

	@Override
	public boolean isKpiSettingStatus() {
		return _kpiSettingStatus;
	}

	@Override
	public void setKpiSettingStatus(boolean kpiSettingStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_kpiSettingStatus = kpiSettingStatus;
	}

	@Override
	public String getRejectionComment() {
		if (_rejectionComment == null) {
			return "";
		}
		else {
			return _rejectionComment;
		}
	}

	@Override
	public void setRejectionComment(String rejectionComment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rejectionComment = rejectionComment;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Kpi.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Kpi toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Kpi> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KpiImpl kpiImpl = new KpiImpl();

		kpiImpl.setKpiId(getKpiId());
		kpiImpl.setEcode(getEcode());
		kpiImpl.setAccount(getAccount());
		kpiImpl.setManagerEmail(getManagerEmail());
		kpiImpl.setReviewerEmail(getReviewerEmail());
		kpiImpl.setAccountPrimary(isAccountPrimary());
		kpiImpl.setUpdateDate(getUpdateDate());
		kpiImpl.setKpiSettingStatus(isKpiSettingStatus());
		kpiImpl.setRejectionComment(getRejectionComment());

		kpiImpl.resetOriginalValues();

		return kpiImpl;
	}

	@Override
	public Kpi cloneWithOriginalValues() {
		KpiImpl kpiImpl = new KpiImpl();

		kpiImpl.setKpiId(this.<Long>getColumnOriginalValue("kpiId"));
		kpiImpl.setEcode(this.<String>getColumnOriginalValue("ecode"));
		kpiImpl.setAccount(this.<String>getColumnOriginalValue("account"));
		kpiImpl.setManagerEmail(
			this.<String>getColumnOriginalValue("managerEmail"));
		kpiImpl.setReviewerEmail(
			this.<String>getColumnOriginalValue("reviewerEmail"));
		kpiImpl.setAccountPrimary(
			this.<Boolean>getColumnOriginalValue("accountPrimary"));
		kpiImpl.setUpdateDate(this.<Date>getColumnOriginalValue("updateDate"));
		kpiImpl.setKpiSettingStatus(
			this.<Boolean>getColumnOriginalValue("kpiSettingStatus"));
		kpiImpl.setRejectionComment(
			this.<String>getColumnOriginalValue("rejectionComment"));

		return kpiImpl;
	}

	@Override
	public int compareTo(Kpi kpi) {
		long primaryKey = kpi.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Kpi)) {
			return false;
		}

		Kpi kpi = (Kpi)object;

		long primaryKey = kpi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Kpi> toCacheModel() {
		KpiCacheModel kpiCacheModel = new KpiCacheModel();

		kpiCacheModel.kpiId = getKpiId();

		kpiCacheModel.ecode = getEcode();

		String ecode = kpiCacheModel.ecode;

		if ((ecode != null) && (ecode.length() == 0)) {
			kpiCacheModel.ecode = null;
		}

		kpiCacheModel.account = getAccount();

		String account = kpiCacheModel.account;

		if ((account != null) && (account.length() == 0)) {
			kpiCacheModel.account = null;
		}

		kpiCacheModel.managerEmail = getManagerEmail();

		String managerEmail = kpiCacheModel.managerEmail;

		if ((managerEmail != null) && (managerEmail.length() == 0)) {
			kpiCacheModel.managerEmail = null;
		}

		kpiCacheModel.reviewerEmail = getReviewerEmail();

		String reviewerEmail = kpiCacheModel.reviewerEmail;

		if ((reviewerEmail != null) && (reviewerEmail.length() == 0)) {
			kpiCacheModel.reviewerEmail = null;
		}

		kpiCacheModel.accountPrimary = isAccountPrimary();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			kpiCacheModel.updateDate = updateDate.getTime();
		}
		else {
			kpiCacheModel.updateDate = Long.MIN_VALUE;
		}

		kpiCacheModel.kpiSettingStatus = isKpiSettingStatus();

		kpiCacheModel.rejectionComment = getRejectionComment();

		String rejectionComment = kpiCacheModel.rejectionComment;

		if ((rejectionComment != null) && (rejectionComment.length() == 0)) {
			kpiCacheModel.rejectionComment = null;
		}

		return kpiCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Kpi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Kpi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Kpi, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Kpi)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Kpi>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Kpi.class, ModelWrapper.class);

	}

	private long _kpiId;
	private String _ecode;
	private String _account;
	private String _managerEmail;
	private String _reviewerEmail;
	private boolean _accountPrimary;
	private Date _updateDate;
	private boolean _kpiSettingStatus;
	private String _rejectionComment;

	public <T> T getColumnValue(String columnName) {
		Function<Kpi, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Kpi)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("kpiId", _kpiId);
		_columnOriginalValues.put("ecode", _ecode);
		_columnOriginalValues.put("account", _account);
		_columnOriginalValues.put("managerEmail", _managerEmail);
		_columnOriginalValues.put("reviewerEmail", _reviewerEmail);
		_columnOriginalValues.put("accountPrimary", _accountPrimary);
		_columnOriginalValues.put("updateDate", _updateDate);
		_columnOriginalValues.put("kpiSettingStatus", _kpiSettingStatus);
		_columnOriginalValues.put("rejectionComment", _rejectionComment);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("kpiId", 1L);

		columnBitmasks.put("ecode", 2L);

		columnBitmasks.put("account", 4L);

		columnBitmasks.put("managerEmail", 8L);

		columnBitmasks.put("reviewerEmail", 16L);

		columnBitmasks.put("accountPrimary", 32L);

		columnBitmasks.put("updateDate", 64L);

		columnBitmasks.put("kpiSettingStatus", 128L);

		columnBitmasks.put("rejectionComment", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Kpi _escapedModel;

}