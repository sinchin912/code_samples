/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.performance.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.performance.core.model.KpiGuide;
import com.trantorinc.synergy.performance.core.model.KpiGuideModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the KpiGuide service. Represents a row in the &quot;PERFORMANCE_KpiGuide&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>KpiGuideModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KpiGuideImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see KpiGuideImpl
 * @generated
 */
public class KpiGuideModelImpl
	extends BaseModelImpl<KpiGuide> implements KpiGuideModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kpi guide model instance should use the <code>KpiGuide</code> interface instead.
	 */
	public static final String TABLE_NAME = "PERFORMANCE_KpiGuide";

	public static final Object[][] TABLE_COLUMNS = {
		{"guideId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"attribute", Types.BOOLEAN},
		{"other", Types.BOOLEAN}, {"mandatory", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("guideId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attribute", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("other", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("mandatory", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PERFORMANCE_KpiGuide (guideId LONG not null primary key,title VARCHAR(75) null,description TEXT null,attribute BOOLEAN,other BOOLEAN,mandatory BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table PERFORMANCE_KpiGuide";

	public static final String ORDER_BY_JPQL = " ORDER BY kpiGuide.guideId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PERFORMANCE_KpiGuide.guideId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GUIDEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public KpiGuideModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _guideId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGuideId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _guideId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KpiGuide.class;
	}

	@Override
	public String getModelClassName() {
		return KpiGuide.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<KpiGuide, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<KpiGuide, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<KpiGuide, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((KpiGuide)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<KpiGuide, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<KpiGuide, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(KpiGuide)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<KpiGuide, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<KpiGuide, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<KpiGuide, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<KpiGuide, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<KpiGuide, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<KpiGuide, Object>>();
		Map<String, BiConsumer<KpiGuide, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<KpiGuide, ?>>();

		attributeGetterFunctions.put("guideId", KpiGuide::getGuideId);
		attributeSetterBiConsumers.put(
			"guideId", (BiConsumer<KpiGuide, Long>)KpiGuide::setGuideId);
		attributeGetterFunctions.put("title", KpiGuide::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<KpiGuide, String>)KpiGuide::setTitle);
		attributeGetterFunctions.put("description", KpiGuide::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<KpiGuide, String>)KpiGuide::setDescription);
		attributeGetterFunctions.put("attribute", KpiGuide::getAttribute);
		attributeSetterBiConsumers.put(
			"attribute", (BiConsumer<KpiGuide, Boolean>)KpiGuide::setAttribute);
		attributeGetterFunctions.put("other", KpiGuide::getOther);
		attributeSetterBiConsumers.put(
			"other", (BiConsumer<KpiGuide, Boolean>)KpiGuide::setOther);
		attributeGetterFunctions.put("mandatory", KpiGuide::getMandatory);
		attributeSetterBiConsumers.put(
			"mandatory", (BiConsumer<KpiGuide, Boolean>)KpiGuide::setMandatory);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getGuideId() {
		return _guideId;
	}

	@Override
	public void setGuideId(long guideId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_guideId = guideId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public boolean getAttribute() {
		return _attribute;
	}

	@Override
	public boolean isAttribute() {
		return _attribute;
	}

	@Override
	public void setAttribute(boolean attribute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attribute = attribute;
	}

	@Override
	public boolean getOther() {
		return _other;
	}

	@Override
	public boolean isOther() {
		return _other;
	}

	@Override
	public void setOther(boolean other) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_other = other;
	}

	@Override
	public boolean getMandatory() {
		return _mandatory;
	}

	@Override
	public boolean isMandatory() {
		return _mandatory;
	}

	@Override
	public void setMandatory(boolean mandatory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mandatory = mandatory;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, KpiGuide.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KpiGuide toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, KpiGuide>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KpiGuideImpl kpiGuideImpl = new KpiGuideImpl();

		kpiGuideImpl.setGuideId(getGuideId());
		kpiGuideImpl.setTitle(getTitle());
		kpiGuideImpl.setDescription(getDescription());
		kpiGuideImpl.setAttribute(isAttribute());
		kpiGuideImpl.setOther(isOther());
		kpiGuideImpl.setMandatory(isMandatory());

		kpiGuideImpl.resetOriginalValues();

		return kpiGuideImpl;
	}

	@Override
	public KpiGuide cloneWithOriginalValues() {
		KpiGuideImpl kpiGuideImpl = new KpiGuideImpl();

		kpiGuideImpl.setGuideId(this.<Long>getColumnOriginalValue("guideId"));
		kpiGuideImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		kpiGuideImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		kpiGuideImpl.setAttribute(
			this.<Boolean>getColumnOriginalValue("attribute"));
		kpiGuideImpl.setOther(this.<Boolean>getColumnOriginalValue("other"));
		kpiGuideImpl.setMandatory(
			this.<Boolean>getColumnOriginalValue("mandatory"));

		return kpiGuideImpl;
	}

	@Override
	public int compareTo(KpiGuide kpiGuide) {
		long primaryKey = kpiGuide.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof KpiGuide)) {
			return false;
		}

		KpiGuide kpiGuide = (KpiGuide)object;

		long primaryKey = kpiGuide.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<KpiGuide> toCacheModel() {
		KpiGuideCacheModel kpiGuideCacheModel = new KpiGuideCacheModel();

		kpiGuideCacheModel.guideId = getGuideId();

		kpiGuideCacheModel.title = getTitle();

		String title = kpiGuideCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			kpiGuideCacheModel.title = null;
		}

		kpiGuideCacheModel.description = getDescription();

		String description = kpiGuideCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			kpiGuideCacheModel.description = null;
		}

		kpiGuideCacheModel.attribute = isAttribute();

		kpiGuideCacheModel.other = isOther();

		kpiGuideCacheModel.mandatory = isMandatory();

		return kpiGuideCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<KpiGuide, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<KpiGuide, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<KpiGuide, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((KpiGuide)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, KpiGuide>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					KpiGuide.class, ModelWrapper.class);

	}

	private long _guideId;
	private String _title;
	private String _description;
	private boolean _attribute;
	private boolean _other;
	private boolean _mandatory;

	public <T> T getColumnValue(String columnName) {
		Function<KpiGuide, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((KpiGuide)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("guideId", _guideId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("attribute", _attribute);
		_columnOriginalValues.put("other", _other);
		_columnOriginalValues.put("mandatory", _mandatory);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("guideId", 1L);

		columnBitmasks.put("title", 2L);

		columnBitmasks.put("description", 4L);

		columnBitmasks.put("attribute", 8L);

		columnBitmasks.put("other", 16L);

		columnBitmasks.put("mandatory", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private KpiGuide _escapedModel;

}