/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.performance.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.performance.core.model.ReviewRollback;
import com.trantorinc.synergy.performance.core.model.ReviewRollbackModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ReviewRollback service. Represents a row in the &quot;PERFORMANCE_ReviewRollback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReviewRollbackModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReviewRollbackImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReviewRollbackImpl
 * @generated
 */
public class ReviewRollbackModelImpl
	extends BaseModelImpl<ReviewRollback> implements ReviewRollbackModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a review rollback model instance should use the <code>ReviewRollback</code> interface instead.
	 */
	public static final String TABLE_NAME = "PERFORMANCE_ReviewRollback";

	public static final Object[][] TABLE_COLUMNS = {
		{"rollbackId", Types.BIGINT}, {"reviewId", Types.BIGINT},
		{"requestBy", Types.VARCHAR}, {"requestDate", Types.TIMESTAMP},
		{"actionDate", Types.TIMESTAMP}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("rollbackId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reviewId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PERFORMANCE_ReviewRollback (rollbackId LONG not null primary key,reviewId LONG,requestBy VARCHAR(75) null,requestDate DATE null,actionDate DATE null,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table PERFORMANCE_ReviewRollback";

	public static final String ORDER_BY_JPQL =
		" ORDER BY reviewRollback.rollbackId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PERFORMANCE_ReviewRollback.rollbackId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROLLBACKID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReviewRollbackModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rollbackId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRollbackId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rollbackId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ReviewRollback.class;
	}

	@Override
	public String getModelClassName() {
		return ReviewRollback.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ReviewRollback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ReviewRollback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ReviewRollback, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ReviewRollback)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ReviewRollback, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ReviewRollback, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ReviewRollback)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ReviewRollback, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ReviewRollback, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ReviewRollback, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ReviewRollback, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ReviewRollback, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ReviewRollback, Object>>();
		Map<String, BiConsumer<ReviewRollback, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ReviewRollback, ?>>();

		attributeGetterFunctions.put(
			"rollbackId", ReviewRollback::getRollbackId);
		attributeSetterBiConsumers.put(
			"rollbackId",
			(BiConsumer<ReviewRollback, Long>)ReviewRollback::setRollbackId);
		attributeGetterFunctions.put("reviewId", ReviewRollback::getReviewId);
		attributeSetterBiConsumers.put(
			"reviewId",
			(BiConsumer<ReviewRollback, Long>)ReviewRollback::setReviewId);
		attributeGetterFunctions.put("requestBy", ReviewRollback::getRequestBy);
		attributeSetterBiConsumers.put(
			"requestBy",
			(BiConsumer<ReviewRollback, String>)ReviewRollback::setRequestBy);
		attributeGetterFunctions.put(
			"requestDate", ReviewRollback::getRequestDate);
		attributeSetterBiConsumers.put(
			"requestDate",
			(BiConsumer<ReviewRollback, Date>)ReviewRollback::setRequestDate);
		attributeGetterFunctions.put(
			"actionDate", ReviewRollback::getActionDate);
		attributeSetterBiConsumers.put(
			"actionDate",
			(BiConsumer<ReviewRollback, Date>)ReviewRollback::setActionDate);
		attributeGetterFunctions.put("status", ReviewRollback::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ReviewRollback, Integer>)ReviewRollback::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getRollbackId() {
		return _rollbackId;
	}

	@Override
	public void setRollbackId(long rollbackId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rollbackId = rollbackId;
	}

	@Override
	public long getReviewId() {
		return _reviewId;
	}

	@Override
	public void setReviewId(long reviewId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewId = reviewId;
	}

	@Override
	public String getRequestBy() {
		if (_requestBy == null) {
			return "";
		}
		else {
			return _requestBy;
		}
	}

	@Override
	public void setRequestBy(String requestBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestBy = requestBy;
	}

	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestDate = requestDate;
	}

	@Override
	public Date getActionDate() {
		return _actionDate;
	}

	@Override
	public void setActionDate(Date actionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actionDate = actionDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ReviewRollback.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ReviewRollback toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ReviewRollback>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReviewRollbackImpl reviewRollbackImpl = new ReviewRollbackImpl();

		reviewRollbackImpl.setRollbackId(getRollbackId());
		reviewRollbackImpl.setReviewId(getReviewId());
		reviewRollbackImpl.setRequestBy(getRequestBy());
		reviewRollbackImpl.setRequestDate(getRequestDate());
		reviewRollbackImpl.setActionDate(getActionDate());
		reviewRollbackImpl.setStatus(getStatus());

		reviewRollbackImpl.resetOriginalValues();

		return reviewRollbackImpl;
	}

	@Override
	public ReviewRollback cloneWithOriginalValues() {
		ReviewRollbackImpl reviewRollbackImpl = new ReviewRollbackImpl();

		reviewRollbackImpl.setRollbackId(
			this.<Long>getColumnOriginalValue("rollbackId"));
		reviewRollbackImpl.setReviewId(
			this.<Long>getColumnOriginalValue("reviewId"));
		reviewRollbackImpl.setRequestBy(
			this.<String>getColumnOriginalValue("requestBy"));
		reviewRollbackImpl.setRequestDate(
			this.<Date>getColumnOriginalValue("requestDate"));
		reviewRollbackImpl.setActionDate(
			this.<Date>getColumnOriginalValue("actionDate"));
		reviewRollbackImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));

		return reviewRollbackImpl;
	}

	@Override
	public int compareTo(ReviewRollback reviewRollback) {
		long primaryKey = reviewRollback.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ReviewRollback)) {
			return false;
		}

		ReviewRollback reviewRollback = (ReviewRollback)object;

		long primaryKey = reviewRollback.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ReviewRollback> toCacheModel() {
		ReviewRollbackCacheModel reviewRollbackCacheModel =
			new ReviewRollbackCacheModel();

		reviewRollbackCacheModel.rollbackId = getRollbackId();

		reviewRollbackCacheModel.reviewId = getReviewId();

		reviewRollbackCacheModel.requestBy = getRequestBy();

		String requestBy = reviewRollbackCacheModel.requestBy;

		if ((requestBy != null) && (requestBy.length() == 0)) {
			reviewRollbackCacheModel.requestBy = null;
		}

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			reviewRollbackCacheModel.requestDate = requestDate.getTime();
		}
		else {
			reviewRollbackCacheModel.requestDate = Long.MIN_VALUE;
		}

		Date actionDate = getActionDate();

		if (actionDate != null) {
			reviewRollbackCacheModel.actionDate = actionDate.getTime();
		}
		else {
			reviewRollbackCacheModel.actionDate = Long.MIN_VALUE;
		}

		reviewRollbackCacheModel.status = getStatus();

		return reviewRollbackCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ReviewRollback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ReviewRollback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ReviewRollback, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ReviewRollback)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ReviewRollback>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ReviewRollback.class, ModelWrapper.class);

	}

	private long _rollbackId;
	private long _reviewId;
	private String _requestBy;
	private Date _requestDate;
	private Date _actionDate;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		Function<ReviewRollback, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ReviewRollback)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("rollbackId", _rollbackId);
		_columnOriginalValues.put("reviewId", _reviewId);
		_columnOriginalValues.put("requestBy", _requestBy);
		_columnOriginalValues.put("requestDate", _requestDate);
		_columnOriginalValues.put("actionDate", _actionDate);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("rollbackId", 1L);

		columnBitmasks.put("reviewId", 2L);

		columnBitmasks.put("requestBy", 4L);

		columnBitmasks.put("requestDate", 8L);

		columnBitmasks.put("actionDate", 16L);

		columnBitmasks.put("status", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ReviewRollback _escapedModel;

}