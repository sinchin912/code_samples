/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.email.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.email.core.model.EmailAttachment;
import com.trantorinc.synergy.email.core.model.EmailAttachmentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmailAttachment service. Represents a row in the &quot;EMAIL_EmailAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmailAttachmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailAttachmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmailAttachmentImpl
 * @generated
 */
public class EmailAttachmentModelImpl
	extends BaseModelImpl<EmailAttachment> implements EmailAttachmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email attachment model instance should use the <code>EmailAttachment</code> interface instead.
	 */
	public static final String TABLE_NAME = "EMAIL_EmailAttachment";

	public static final Object[][] TABLE_COLUMNS = {
		{"emailAttachmentId", Types.BIGINT}, {"emailId", Types.BIGINT},
		{"attachmentName", Types.VARCHAR}, {"attachmentFileId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("emailAttachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attachmentFileId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EMAIL_EmailAttachment (emailAttachmentId LONG not null primary key,emailId LONG,attachmentName VARCHAR(500) null,attachmentFileId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table EMAIL_EmailAttachment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY emailAttachment.emailAttachmentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EMAIL_EmailAttachment.emailAttachmentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAILATTACHMENTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmailAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _emailAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmailAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _emailAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return EmailAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmailAttachment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmailAttachment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailAttachment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmailAttachment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmailAttachment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmailAttachment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmailAttachment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmailAttachment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmailAttachment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EmailAttachment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmailAttachment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmailAttachment, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EmailAttachment, Object>>();
		Map<String, BiConsumer<EmailAttachment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EmailAttachment, ?>>();

		attributeGetterFunctions.put(
			"emailAttachmentId", EmailAttachment::getEmailAttachmentId);
		attributeSetterBiConsumers.put(
			"emailAttachmentId",
			(BiConsumer<EmailAttachment, Long>)
				EmailAttachment::setEmailAttachmentId);
		attributeGetterFunctions.put("emailId", EmailAttachment::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId",
			(BiConsumer<EmailAttachment, Long>)EmailAttachment::setEmailId);
		attributeGetterFunctions.put(
			"attachmentName", EmailAttachment::getAttachmentName);
		attributeSetterBiConsumers.put(
			"attachmentName",
			(BiConsumer<EmailAttachment, String>)
				EmailAttachment::setAttachmentName);
		attributeGetterFunctions.put(
			"attachmentFileId", EmailAttachment::getAttachmentFileId);
		attributeSetterBiConsumers.put(
			"attachmentFileId",
			(BiConsumer<EmailAttachment, String>)
				EmailAttachment::setAttachmentFileId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEmailAttachmentId() {
		return _emailAttachmentId;
	}

	@Override
	public void setEmailAttachmentId(long emailAttachmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAttachmentId = emailAttachmentId;
	}

	@Override
	public long getEmailId() {
		return _emailId;
	}

	@Override
	public void setEmailId(long emailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailId = emailId;
	}

	@Override
	public String getAttachmentName() {
		if (_attachmentName == null) {
			return "";
		}
		else {
			return _attachmentName;
		}
	}

	@Override
	public void setAttachmentName(String attachmentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attachmentName = attachmentName;
	}

	@Override
	public String getAttachmentFileId() {
		if (_attachmentFileId == null) {
			return "";
		}
		else {
			return _attachmentFileId;
		}
	}

	@Override
	public void setAttachmentFileId(String attachmentFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attachmentFileId = attachmentFileId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EmailAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailAttachment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmailAttachment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailAttachmentImpl emailAttachmentImpl = new EmailAttachmentImpl();

		emailAttachmentImpl.setEmailAttachmentId(getEmailAttachmentId());
		emailAttachmentImpl.setEmailId(getEmailId());
		emailAttachmentImpl.setAttachmentName(getAttachmentName());
		emailAttachmentImpl.setAttachmentFileId(getAttachmentFileId());

		emailAttachmentImpl.resetOriginalValues();

		return emailAttachmentImpl;
	}

	@Override
	public EmailAttachment cloneWithOriginalValues() {
		EmailAttachmentImpl emailAttachmentImpl = new EmailAttachmentImpl();

		emailAttachmentImpl.setEmailAttachmentId(
			this.<Long>getColumnOriginalValue("emailAttachmentId"));
		emailAttachmentImpl.setEmailId(
			this.<Long>getColumnOriginalValue("emailId"));
		emailAttachmentImpl.setAttachmentName(
			this.<String>getColumnOriginalValue("attachmentName"));
		emailAttachmentImpl.setAttachmentFileId(
			this.<String>getColumnOriginalValue("attachmentFileId"));

		return emailAttachmentImpl;
	}

	@Override
	public int compareTo(EmailAttachment emailAttachment) {
		int value = 0;

		if (getEmailAttachmentId() < emailAttachment.getEmailAttachmentId()) {
			value = -1;
		}
		else if (getEmailAttachmentId() >
					emailAttachment.getEmailAttachmentId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmailAttachment)) {
			return false;
		}

		EmailAttachment emailAttachment = (EmailAttachment)object;

		long primaryKey = emailAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailAttachment> toCacheModel() {
		EmailAttachmentCacheModel emailAttachmentCacheModel =
			new EmailAttachmentCacheModel();

		emailAttachmentCacheModel.emailAttachmentId = getEmailAttachmentId();

		emailAttachmentCacheModel.emailId = getEmailId();

		emailAttachmentCacheModel.attachmentName = getAttachmentName();

		String attachmentName = emailAttachmentCacheModel.attachmentName;

		if ((attachmentName != null) && (attachmentName.length() == 0)) {
			emailAttachmentCacheModel.attachmentName = null;
		}

		emailAttachmentCacheModel.attachmentFileId = getAttachmentFileId();

		String attachmentFileId = emailAttachmentCacheModel.attachmentFileId;

		if ((attachmentFileId != null) && (attachmentFileId.length() == 0)) {
			emailAttachmentCacheModel.attachmentFileId = null;
		}

		return emailAttachmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmailAttachment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmailAttachment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailAttachment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EmailAttachment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmailAttachment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EmailAttachment.class, ModelWrapper.class);

	}

	private long _emailAttachmentId;
	private long _emailId;
	private String _attachmentName;
	private String _attachmentFileId;

	public <T> T getColumnValue(String columnName) {
		Function<EmailAttachment, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmailAttachment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("emailAttachmentId", _emailAttachmentId);
		_columnOriginalValues.put("emailId", _emailId);
		_columnOriginalValues.put("attachmentName", _attachmentName);
		_columnOriginalValues.put("attachmentFileId", _attachmentFileId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("emailAttachmentId", 1L);

		columnBitmasks.put("emailId", 2L);

		columnBitmasks.put("attachmentName", 4L);

		columnBitmasks.put("attachmentFileId", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmailAttachment _escapedModel;

}