/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trantorinc.synergy.email.core.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.trantorinc.synergy.email.core.model.Email;
import com.trantorinc.synergy.email.core.model.EmailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Email service. Represents a row in the &quot;EMAIL_Email&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmailImpl
 * @generated
 */
public class EmailModelImpl extends BaseModelImpl<Email> implements EmailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email model instance should use the <code>Email</code> interface instead.
	 */
	public static final String TABLE_NAME = "EMAIL_Email";

	public static final Object[][] TABLE_COLUMNS = {
		{"emailId", Types.BIGINT}, {"scheduled", Types.BOOLEAN},
		{"module", Types.VARCHAR}, {"toAddress", Types.VARCHAR},
		{"ccAddress", Types.VARCHAR}, {"bccAddress", Types.VARCHAR},
		{"subject", Types.VARCHAR}, {"body", Types.VARCHAR},
		{"createdDate", Types.TIMESTAMP}, {"sent", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("emailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scheduled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("module", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ccAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bccAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sent", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EMAIL_Email (emailId LONG not null primary key,scheduled BOOLEAN,module VARCHAR(75) null,toAddress TEXT null,ccAddress TEXT null,bccAddress TEXT null,subject TEXT null,body TEXT null,createdDate DATE null,sent BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table EMAIL_Email";

	public static final String ORDER_BY_JPQL = " ORDER BY email.emailId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EMAIL_Email.emailId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAILID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _emailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _emailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Email.class;
	}

	@Override
	public String getModelClassName() {
		return Email.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Email, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Email, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Email, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Email)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Email, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Email, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Email)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Email, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Email, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Email, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Email, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Email, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Email, Object>>();
		Map<String, BiConsumer<Email, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Email, ?>>();

		attributeGetterFunctions.put("emailId", Email::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId", (BiConsumer<Email, Long>)Email::setEmailId);
		attributeGetterFunctions.put("scheduled", Email::getScheduled);
		attributeSetterBiConsumers.put(
			"scheduled", (BiConsumer<Email, Boolean>)Email::setScheduled);
		attributeGetterFunctions.put("module", Email::getModule);
		attributeSetterBiConsumers.put(
			"module", (BiConsumer<Email, String>)Email::setModule);
		attributeGetterFunctions.put("toAddress", Email::getToAddress);
		attributeSetterBiConsumers.put(
			"toAddress", (BiConsumer<Email, String>)Email::setToAddress);
		attributeGetterFunctions.put("ccAddress", Email::getCcAddress);
		attributeSetterBiConsumers.put(
			"ccAddress", (BiConsumer<Email, String>)Email::setCcAddress);
		attributeGetterFunctions.put("bccAddress", Email::getBccAddress);
		attributeSetterBiConsumers.put(
			"bccAddress", (BiConsumer<Email, String>)Email::setBccAddress);
		attributeGetterFunctions.put("subject", Email::getSubject);
		attributeSetterBiConsumers.put(
			"subject", (BiConsumer<Email, String>)Email::setSubject);
		attributeGetterFunctions.put("body", Email::getBody);
		attributeSetterBiConsumers.put(
			"body", (BiConsumer<Email, String>)Email::setBody);
		attributeGetterFunctions.put("createdDate", Email::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate", (BiConsumer<Email, Date>)Email::setCreatedDate);
		attributeGetterFunctions.put("sent", Email::getSent);
		attributeSetterBiConsumers.put(
			"sent", (BiConsumer<Email, Boolean>)Email::setSent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEmailId() {
		return _emailId;
	}

	@Override
	public void setEmailId(long emailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailId = emailId;
	}

	@Override
	public boolean getScheduled() {
		return _scheduled;
	}

	@Override
	public boolean isScheduled() {
		return _scheduled;
	}

	@Override
	public void setScheduled(boolean scheduled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scheduled = scheduled;
	}

	@Override
	public String getModule() {
		if (_module == null) {
			return "";
		}
		else {
			return _module;
		}
	}

	@Override
	public void setModule(String module) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_module = module;
	}

	@Override
	public String getToAddress() {
		if (_toAddress == null) {
			return "";
		}
		else {
			return _toAddress;
		}
	}

	@Override
	public void setToAddress(String toAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toAddress = toAddress;
	}

	@Override
	public String getCcAddress() {
		if (_ccAddress == null) {
			return "";
		}
		else {
			return _ccAddress;
		}
	}

	@Override
	public void setCcAddress(String ccAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ccAddress = ccAddress;
	}

	@Override
	public String getBccAddress() {
		if (_bccAddress == null) {
			return "";
		}
		else {
			return _bccAddress;
		}
	}

	@Override
	public void setBccAddress(String bccAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bccAddress = bccAddress;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subject = subject;
	}

	@Override
	public String getBody() {
		if (_body == null) {
			return "";
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_body = body;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@Override
	public boolean getSent() {
		return _sent;
	}

	@Override
	public boolean isSent() {
		return _sent;
	}

	@Override
	public void setSent(boolean sent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sent = sent;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Email.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Email toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Email>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailImpl emailImpl = new EmailImpl();

		emailImpl.setEmailId(getEmailId());
		emailImpl.setScheduled(isScheduled());
		emailImpl.setModule(getModule());
		emailImpl.setToAddress(getToAddress());
		emailImpl.setCcAddress(getCcAddress());
		emailImpl.setBccAddress(getBccAddress());
		emailImpl.setSubject(getSubject());
		emailImpl.setBody(getBody());
		emailImpl.setCreatedDate(getCreatedDate());
		emailImpl.setSent(isSent());

		emailImpl.resetOriginalValues();

		return emailImpl;
	}

	@Override
	public Email cloneWithOriginalValues() {
		EmailImpl emailImpl = new EmailImpl();

		emailImpl.setEmailId(this.<Long>getColumnOriginalValue("emailId"));
		emailImpl.setScheduled(
			this.<Boolean>getColumnOriginalValue("scheduled"));
		emailImpl.setModule(this.<String>getColumnOriginalValue("module"));
		emailImpl.setToAddress(
			this.<String>getColumnOriginalValue("toAddress"));
		emailImpl.setCcAddress(
			this.<String>getColumnOriginalValue("ccAddress"));
		emailImpl.setBccAddress(
			this.<String>getColumnOriginalValue("bccAddress"));
		emailImpl.setSubject(this.<String>getColumnOriginalValue("subject"));
		emailImpl.setBody(this.<String>getColumnOriginalValue("body"));
		emailImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		emailImpl.setSent(this.<Boolean>getColumnOriginalValue("sent"));

		return emailImpl;
	}

	@Override
	public int compareTo(Email email) {
		int value = 0;

		if (getEmailId() < email.getEmailId()) {
			value = -1;
		}
		else if (getEmailId() > email.getEmailId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Email)) {
			return false;
		}

		Email email = (Email)object;

		long primaryKey = email.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Email> toCacheModel() {
		EmailCacheModel emailCacheModel = new EmailCacheModel();

		emailCacheModel.emailId = getEmailId();

		emailCacheModel.scheduled = isScheduled();

		emailCacheModel.module = getModule();

		String module = emailCacheModel.module;

		if ((module != null) && (module.length() == 0)) {
			emailCacheModel.module = null;
		}

		emailCacheModel.toAddress = getToAddress();

		String toAddress = emailCacheModel.toAddress;

		if ((toAddress != null) && (toAddress.length() == 0)) {
			emailCacheModel.toAddress = null;
		}

		emailCacheModel.ccAddress = getCcAddress();

		String ccAddress = emailCacheModel.ccAddress;

		if ((ccAddress != null) && (ccAddress.length() == 0)) {
			emailCacheModel.ccAddress = null;
		}

		emailCacheModel.bccAddress = getBccAddress();

		String bccAddress = emailCacheModel.bccAddress;

		if ((bccAddress != null) && (bccAddress.length() == 0)) {
			emailCacheModel.bccAddress = null;
		}

		emailCacheModel.subject = getSubject();

		String subject = emailCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			emailCacheModel.subject = null;
		}

		emailCacheModel.body = getBody();

		String body = emailCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			emailCacheModel.body = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			emailCacheModel.createdDate = createdDate.getTime();
		}
		else {
			emailCacheModel.createdDate = Long.MIN_VALUE;
		}

		emailCacheModel.sent = isSent();

		return emailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Email, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Email, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Email, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Email)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Email>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Email.class, ModelWrapper.class);

	}

	private long _emailId;
	private boolean _scheduled;
	private String _module;
	private String _toAddress;
	private String _ccAddress;
	private String _bccAddress;
	private String _subject;
	private String _body;
	private Date _createdDate;
	private boolean _sent;

	public <T> T getColumnValue(String columnName) {
		Function<Email, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Email)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("emailId", _emailId);
		_columnOriginalValues.put("scheduled", _scheduled);
		_columnOriginalValues.put("module", _module);
		_columnOriginalValues.put("toAddress", _toAddress);
		_columnOriginalValues.put("ccAddress", _ccAddress);
		_columnOriginalValues.put("bccAddress", _bccAddress);
		_columnOriginalValues.put("subject", _subject);
		_columnOriginalValues.put("body", _body);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("sent", _sent);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("emailId", 1L);

		columnBitmasks.put("scheduled", 2L);

		columnBitmasks.put("module", 4L);

		columnBitmasks.put("toAddress", 8L);

		columnBitmasks.put("ccAddress", 16L);

		columnBitmasks.put("bccAddress", 32L);

		columnBitmasks.put("subject", 64L);

		columnBitmasks.put("body", 128L);

		columnBitmasks.put("createdDate", 256L);

		columnBitmasks.put("sent", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Email _escapedModel;

}